name: Upload Python Package

on:
  release:
    types: [published]
  pull_request:
    branches: [main]

env:
  PYNXTOOLS_VERSION: "latest_release"
  PYTHON_VERSION: "3.12"
jobs:
  pre-pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install uv && Set up Python ${{ env.PYTHON_VERSION }}
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          version: "0.6.2"
      - name: Install dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install coverage coveralls
      - name: Install pynxtools version ${{ env.PYNXTOOLS_VERSION }}  
        run: |
          pip uninstall pynxtools -q
          if [ "${{ env.PYNXTOOLS_VERSION }}" == "latest_release" ]; then
            uv pip install pynxtools
          else
           uv pip install pynxtools=="${{ env.PYNXTOOLS_VERSION }}"
          fi
      - name: Install pynxtools-spm
        run: |
          uv pip install .[dev]
      - name: Run Reader tests
        run: |
          pytest tests/test_reader.py
      - name: Run Nomad Examples tests
        run: |
          pytest tests/test_nomad_examples.py

  deploy:
    needs: pre-pytest
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      # - name: Git tag version
      #   id: git_tag_version
      #   run: |
      #     # Extract the version from the tag (e.g., 'v1.0.0' becomes '1.0.0')
      #     GIT_TAG_VERSION=${GITHUB_REF#refs/tags/v}
      #     echo "GIT_TAG_VERSION=$GIT_TAG_VERSION" >> $GITHUB_ENV
      #     echo "Version from Git tag: $GIT_TAG_VERSION"
      # - name: Citation version
      #   id: citation_version
      #   run: |
      #     # Parse the version from the CITATION.cff file
      #     CITATION_VERSION=$(grep '^version:' CITATION.cff | cut -d' ' -f2)
      #     echo "CITATION_VERSION=$CITATION_VERSION" >> $GITHUB_ENV
      #     echo "Version from CITATION.cff: $CITATION_VERSION"
      # - name: Compare versions
      #   run: |
      #     if [ "$GIT_TAG_VERSION" != "$CITATION_VERSION" ]; then
      #       echo "Version mismatch: Git tag version is $GIT_TAG_VERSION, CITATION.cff version is $CITATION_VERSION"
      #       exit 1
      #     fi
      # - name: Build package
      #   run: python -m build
      # - name: Publish package
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     verbose: true
        # with:
        #   user: __token__
        #   password: ${{secrets.PYPI_API_TOKEN}}