DEBUG - ===== GROUP (// [NXroot::]): <HDF5 file "omicron_stm_default_config.nxs" (mode r)>
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:):
DEBUG - 
        The root of a NeXus file.

        In the NeXus standard, only NXentry groups are allowed at the
        root level of a file, although it is permitted to include
        additional groups and fields that are not part of the NeXus
        standard and will not be validated by NeXus tools. NeXus defines
        a number of root-level attributes that can be used to annotate
        the NeXus tree.

        Note that NXroot is the only base class that does not inherit
        from the NXobject class, since the latter permits the inclusion
        of NeXus objects that are not allowed at the root level.
    
DEBUG - ===== ATTRS (//@HDF5_Version)
DEBUG - value: 1.14.6 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - NXroot.nxdl.xml:@HDF5_Version - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:/HDF5_Version):
DEBUG - 
            Version of HDF5 library used in writing the file.

            Note this attribute is spelled with uppercase "V",
            different than other version attributes.
        
DEBUG - ===== ATTRS (//@NX_class)
DEBUG - value: NXroot 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//@NeXus_release)
DEBUG - value: v2024.02.post1.dev1995+g1f460cd1 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - NXroot.nxdl.xml:@NeXus_release - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:/NeXus_release):
DEBUG - 
            The version of NeXus definitions used in writing the file. This can either be a date-based
            NeXus release (e.g., YYYY.MM), see https://github.com/nexusformat/definitions/releases or
            a version tag that includes additional development information, such as a commit distance and
            a Git hash. This is typically formatted as  `vYYYY.MM.post1.dev<commit-distance>-g<git-hash>`,
            where `YYYY.MM` refers to the base version of the NeXus definitions. `post1.dev<commit-distance>` 
            indicates that the definitions are based on a commit after the base version (post1), with
            `<commit-distance>` being the number of commits since that version. `g<git-hash>` is the 
            abbreviated Git hash that identifies the specific commit of the definitions being used.

            If the version includes both a commit distance and a Git hash, the ``NeXus_repository`` 
            attribute must be included, specifying the URL of the repository containing that version.
        
DEBUG - ===== ATTRS (//@NeXus_repository)
DEBUG - value: https://github.com/FAIRmat-NFDI/nexus_definitions/blob/1f460cd1 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - NXroot.nxdl.xml:@NeXus_repository - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:/NeXus_repository):
DEBUG - 
            A repository containing the application definitions
            used for creating this file.
            If the ``NeXus_release`` attribute contains a commit distance and hash,
            this should refer to this repository.
        
DEBUG - ===== ATTRS (//@file_name)
DEBUG - value: omicron_stm_default_config.nxs 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - NXroot.nxdl.xml:@file_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:/file_name):
DEBUG - File name of original NeXus file
DEBUG - ===== ATTRS (//@file_time)
DEBUG - value: 2025-10-06 10:12:01.883571+02:00 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - NXroot.nxdl.xml:@file_time - [NX_DATE_TIME]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:/file_time):
DEBUG - Date and time file was originally created
DEBUG - ===== ATTRS (//@file_update_time)
DEBUG - value: 2025-10-06 10:12:01.883571+02:00 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - NXroot.nxdl.xml:@file_update_time - [NX_DATE_TIME]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:/file_update_time):
DEBUG - Date and time of last file change at close
DEBUG - ===== ATTRS (//@h5py_version)
DEBUG - value: 3.14.0 
DEBUG - classpath: ['']
DEBUG - classes:
NXroot.nxdl.xml:
DEBUG - NXroot.nxdl.xml:@h5py_version - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXroot.nxdl.xml:/h5py_version):
DEBUG - Version of h5py Python package used in writing the file
DEBUG - ===== GROUP (//entry [NXstm::/NXentry]): <HDF5 group "/entry" (17 members)>
DEBUG - classpath: ['NXentry']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY):
DEBUG - 
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY):
DEBUG - 
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY):
DEBUG - 
DEBUG - documentation (NXentry.nxdl.xml:):
DEBUG - 
		(**required**) :ref:`NXentry` describes the measurement.

		The top-level NeXus group which contains all the data and associated
		information that comprise a single measurement.
		It is mandatory that there is at least one
		group of this type in the NeXus file.	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry@NX_class)
DEBUG - value: NXentry 
DEBUG - classpath: ['NXentry']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry@default)
DEBUG - value: current_forward 
DEBUG - classpath: ['NXentry']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXstm.nxdl.xml:/ENTRY@default - [NX_CHAR]
DEBUG - NXspm.nxdl.xml:/ENTRY@default - [NX_CHAR]
DEBUG - NXsensor_scan.nxdl.xml:/ENTRY@default - [NX_CHAR]
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/default):
DEBUG - 
                .. index:: plotting
                
                Declares which child group contains a path leading
                to a :ref:`NXdata` group.
                
                It is recommended (as of NIAC2014) to use this attribute
                to help define the path to the default dataset to be visualized upon entry.
                See https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
            
DEBUG - NXentry.nxdl.xml:@default - [NX_CHAR]
DEBUG - documentation (NXentry.nxdl.xml:/default):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: default attribute value

			Declares which :ref:`NXdata` group contains the data
			to be shown by default.
			It is used to resolve ambiguity when
			one :ref:`NXdata` group exists.
			The value :ref:`names <validItemName>` a child group.  If that group
			itself has a ``default`` attribute, continue this chain until an
			:ref:`NXdata` group is reached.

			For more information about how NeXus identifies the default
			plottable data, see the
			:ref:`Find Plottable Data, v3 <Find-Plottable-Data-v3>`
			section.
		
DEBUG - NXobject.nxdl.xml:@default - [NX_CHAR]
DEBUG - documentation (NXobject.nxdl.xml:/default):
DEBUG - 
			.. index:: plotting

			Declares which child group contains a path leading
			to a :ref:`NXdata` group or a group using a base class
			extending :ref:`NXdata`.

			It is recommended (as of NIAC2014) to use this attribute
			to help define the path to the default dataset to be plotted.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
        
DEBUG - ===== GROUP (//entry/current_backward [NXstm::/NXentry/NXdata]): <HDF5 group "/entry/current_backward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                The data group.
            
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG - documentation (NXentry.nxdl.xml:/DATA):
DEBUG - 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/current_backward@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/current_backward@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/current_backward@signal)
DEBUG - value: current 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/current_backward@target)
DEBUG - value: /entry/current_backward 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/current_backward@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/current_backward@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/current_backward/current): <HDF5 dataset "current": shape (512, 512), type "<i4">
DEBUG - value: [ -89614248 -129183967  -80056875  -53352320  -47116311  -51199570 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG - 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/current_backward/current@long_name)
DEBUG - value: Current (ampere) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/current_backward/current@units)
DEBUG - value: ampere 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/current_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/current_backward/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/current_backward/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/current_backward/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/current_backward/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/current_backward/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/current_backward/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== GROUP (//entry/current_forward [NXstm::/NXentry/NXdata]): <HDF5 group "/entry/current_forward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                The data group.
            
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG - documentation (NXentry.nxdl.xml:/DATA):
DEBUG - 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/current_forward@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/current_forward@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/current_forward@signal)
DEBUG - value: current 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/current_forward@target)
DEBUG - value: /entry/current_forward 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/current_forward@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/current_forward@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/current_forward/current): <HDF5 dataset "current": shape (512, 512), type "<i4">
DEBUG - value: [-100055201 -110339805  -57667645  -46606777  -40990747  -69971120 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG - 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/current_forward/current@long_name)
DEBUG - value: Current (ampere) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/current_forward/current@units)
DEBUG - value: ampere 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/current_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/current_forward/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/current_forward/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/current_forward/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/current_forward/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/current_forward/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/current_forward/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/definition): <HDF5 dataset "definition": shape (), type "|O">
DEBUG - value: NXstm 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
DEBUG - <<REQUIRED>>
DEBUG - enumeration (NXstm.nxdl.xml:/ENTRY/definition):
DEBUG - -> NXstm
DEBUG - enumeration (NXspm.nxdl.xml:/ENTRY/definition):
DEBUG - -> NXspm
DEBUG - enumeration (NXsensor_scan.nxdl.xml:/ENTRY/definition):
DEBUG - -> NXsensor_scan
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/definition):
DEBUG - 
                Name of the definition that is used for the STM technique.
            
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/definition):
DEBUG - 
                Name of the definition that is used for the application.
            
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/definition):
DEBUG - 
DEBUG - documentation (NXentry.nxdl.xml:/definition):
DEBUG - 
			(alternate use: see same field in :ref:`NXsubentry` for preferred)
			
			Official NeXus NXDL schema to which this entry conforms which must be
			the name of the NXDL file (case sensitive without the file extension)
			that the NXDL schema is defined in. 
			
			For example the ``definition`` field for a file that conformed to the 
			*NXarpes.nxdl.xml* definition must contain the string **NXarpes**.
			
			This field is provided so that :ref:`NXentry` can be the overlay position
			in a NeXus data file for an application definition and its
			set of groups, fields, and attributes.

			*It is advised* to use :ref:`NXsubentry`, instead, as the overlay position.
		
DEBUG - ===== ATTRS (//entry/definition@URL)
DEBUG - value: https://github.com/FAIRmat-NFDI/nexus_definitions/blob/1f460cd1 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
DEBUG - NXentry.nxdl.xml:/definition@URL - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXentry.nxdl.xml:/definition/URL):
DEBUG - URL of NXDL file
DEBUG - ===== ATTRS (//entry/definition@version)
DEBUG - value: v2024.02.post1.dev1995+g1f460cd1 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
DEBUG - NXsensor_scan.nxdl.xml:/ENTRY/definition@version - [NX_CHAR]
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/definition/version):
DEBUG - 
DEBUG - NXentry.nxdl.xml:/definition@version - [NX_CHAR]
DEBUG - documentation (NXentry.nxdl.xml:/definition/version):
DEBUG - NXDL version number
DEBUG - ===== FIELD (//entry/end_time): <HDF5 dataset "end_time": shape (), type "|O">
DEBUG - value: 2022-04-16T19:20:45.723633+01:00 
DEBUG - classpath: ['NXentry', 'NX_DATE_TIME']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/end_time
NXentry.nxdl.xml:/end_time
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/end_time):
DEBUG - 
                The end time of the experiment.
            
DEBUG - documentation (NXentry.nxdl.xml:/end_time):
DEBUG - Ending time of measurement
DEBUG - ===== FIELD (//entry/experiment_description): <HDF5 dataset "experiment_description": shape (), type "|O">
DEBUG - value: <p>An demo example&nbsp;</p> 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/experiment_description
NXentry.nxdl.xml:/experiment_description
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/experiment_description):
DEBUG - 
DEBUG - documentation (NXentry.nxdl.xml:/experiment_description):
DEBUG - Brief summary of the experiment, including key objectives.
DEBUG - ===== FIELD (//entry/experiment_technique): <HDF5 dataset "experiment_technique": shape (), type "|O">
DEBUG - value: STM 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/experiment_technique
NXspm.nxdl.xml:/ENTRY/experiment_technique
DEBUG - <<REQUIRED>>
DEBUG - enumeration (NXstm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG - -> STM
DEBUG - enumeration (NXspm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG - -> STM
DEBUG - -> STS
DEBUG - -> AFM
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG - 
                The specific to STM experiment.
            
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG - 
                The technique of the experiment like STM, STS, AFM.
            
DEBUG - ===== FIELD (//entry/identifier_collection): <HDF5 dataset "identifier_collection": shape (), type "|O">
DEBUG - value: D:\\DATA\\nanonis V45_sessions\\Zurich PLL\\2023-03-31 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/identifier_collection
NXentry.nxdl.xml:/identifier_collection
NXobject.nxdl.xml:/identifierNAME
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/identifier_collection):
DEBUG - 
                The unique identifier for the collection. The identifier is used to group a
                number of the experiments run upon the same setup and/or same sample.
            
DEBUG - documentation (NXentry.nxdl.xml:/identifier_collection):
DEBUG - User or Data Acquisition defined group of NeXus files or NXentry
DEBUG - documentation (NXobject.nxdl.xml:/identifierNAME):
DEBUG - 
			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
DEBUG - ===== FIELD (//entry/identifier_experiment): <HDF5 dataset "identifier_experiment": shape (), type "|O">
DEBUG - value: D:\\DATA\\nanonis V45_sessions\\Zurich PLL\\2023-03-31\\2023_03_31_oAu(111)__FeBr2_EP1_018.sxm 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/identifier_experiment
NXsensor_scan.nxdl.xml:/ENTRY/identifier_experiment
NXentry.nxdl.xml:/identifier_experiment
NXobject.nxdl.xml:/identifierNAME
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/identifier_experiment):
DEBUG - 
                The identifier for the experiment which should be unique at least in lab.
            
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/identifier_experiment):
DEBUG - 
                The unique identifier for the entry. The identifier is mainly lab-defined and
                can be a combination of the sample name, date and time, experiment condition
                (such as temperature) or instrument-generated unique identifier.
            
DEBUG - documentation (NXentry.nxdl.xml:/identifier_experiment):
DEBUG - 
			Unique identifier for the experiment,
			defined by the facility,
			possibly linked to the proposals
		
DEBUG - documentation (NXobject.nxdl.xml:/identifierNAME):
DEBUG - 
			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
DEBUG - ===== GROUP (//entry/instrument [NXstm::/NXentry/NXinstrument]): <HDF5 group "/entry/instrument" (7 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT
NXentry.nxdl.xml:/INSTRUMENT
NXinstrument.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT):
DEBUG - 
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT):
DEBUG - 
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT):
DEBUG - 
DEBUG - documentation (NXentry.nxdl.xml:/INSTRUMENT):
DEBUG - 
DEBUG - documentation (NXinstrument.nxdl.xml:):
DEBUG - 
		Collection of the components of the instrument or beamline.
		
		Template of instrument descriptions comprising various beamline components. 
		Each component will also be a NeXus group defined by its distance from the 
		sample. Negative distances represent beamline components that are before the 
		sample while positive distances represent components that are after the sample. 
		This device allows the unique identification of beamline components in a way 
		that is valid for both reactor and pulsed instrumentation.
	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument@NX_class)
DEBUG - value: NXinstrument 
DEBUG - classpath: ['NXentry', 'NXinstrument']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT
NXentry.nxdl.xml:/INSTRUMENT
NXinstrument.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/current_sensor [NXstm::/NXentry/NXinstrument/NXsensor]): <HDF5 group "/entry/instrument/current_sensor" (1 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/current_sensorTAG
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/current_sensorTAG):
DEBUG - 
                    Information for current sensor. Any current sensor such as a current-voltage transimpedance amplifier involved in the experiment or
                    in any special measurement or in any specialized experiment component can be
                    registered under this group.
                
DEBUG - documentation (NXinstrument.nxdl.xml:/SENSOR):
DEBUG - 
DEBUG - documentation (NXsensor.nxdl.xml:):
DEBUG - 
		A sensor used to monitor an external condition 
		
		The condition itself is described in :ref:`NXenvironment`.
	
DEBUG - documentation (NXcomponent.nxdl.xml:):
DEBUG - 
         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/current_sensor@NX_class)
DEBUG - value: NXsensor 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/current_sensorTAG
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/current_sensor/current): <HDF5 dataset "current": shape (), type "<f4">
DEBUG - value: -4e-10 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/current_sensorTAG/current
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/current_sensorTAG/current):
DEBUG - 
                        Name of the current according to the purpose of the measurement.
                        E.g., the field can be named as tip_current defining the current measured at the tip.
                    
DEBUG - ===== ATTRS (//entry/instrument/current_sensor/current@units)
DEBUG - value: ampere 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/current_sensorTAG/current
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/current_sensorTAG/current@units [NX_CURRENT]
DEBUG - ===== GROUP (//entry/instrument/hardware [NXstm::/NXentry/NXinstrument/NXfabrication]): <HDF5 group "/entry/instrument/hardware" (2 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware):
DEBUG - 
                    The hardware description of core instrument setup of experiment.
                    Usually, the entire instrument is supplied by a single manufacturer.
                    To describe the hardware from any sub-components, use the ``hardware`` group of that
                    sub-component (child group of the NXinstrument group) group.
                
DEBUG - documentation (NXinstrument.nxdl.xml:/FABRICATION):
DEBUG - 
DEBUG - documentation (NXfabrication.nxdl.xml:):
DEBUG - 
         Details about a component as it is defined by its manufacturer.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/hardware@NX_class)
DEBUG - value: NXfabrication 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/hardware/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG - value: omicron 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/name
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/name):
DEBUG - 
                        Name of the hardware.
                    
DEBUG - ===== FIELD (//entry/instrument/hardware/vendor): <HDF5 dataset "vendor": shape (), type "|O">
DEBUG - value: omicron 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/vendor
NXfabrication.nxdl.xml:/vendor
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/vendor):
DEBUG - 
                        Company name of the manufacturer.
                    
DEBUG - documentation (NXfabrication.nxdl.xml:/vendor):
DEBUG - 
             Company name of the manufacturer.
        
DEBUG - ===== GROUP (//entry/instrument/height_piezo_sensor [NXstm::/NXentry/NXinstrument/NXspm_piezo_sensor]): <HDF5 group "/entry/instrument/height_piezo_sensor" (2 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor
NXspm_piezo_sensor.nxdl.xml:
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor):
DEBUG - 
                    The sensor information for the height (Z-axis) piezo device.
                
DEBUG - documentation (NXspm_piezo_sensor.nxdl.xml:):
DEBUG - 
        This piezo sensor group refers to the height (or Z) piezo sensor.
    
DEBUG - documentation (NXsensor.nxdl.xml:):
DEBUG - 
		A sensor used to monitor an external condition 
		
		The condition itself is described in :ref:`NXenvironment`.
	
DEBUG - documentation (NXcomponent.nxdl.xml:):
DEBUG - 
         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor@NX_class)
DEBUG - value: NXspm_piezo_sensor 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor
NXspm_piezo_sensor.nxdl.xml:
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration [NXstm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration" (1 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config']
DEBUG - classes:
NXspm_piezo_sensor.nxdl.xml:/piezo_configuration
NXspm_piezo_config.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_sensor.nxdl.xml:/piezo_configuration):
DEBUG - 
            The piezo configuration information like piezoelectric calibration and material
            properties.
        
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:):
DEBUG - 
        A base class describing piezo actuator settings for scanning probe microscopy.
        
        Piezoelectric actuators work utilizing the inverse-piezoelectric effect, when a voltage
        is applied on the material and it deforms proportional to the applied voltage.
        Description below shows calibration coefficients and other configuration parameters of
        open loop piezo actuators (that is actuators without capacitive sensor feedback systems).
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration@NX_class)
DEBUG - value: NXspm_piezo_config 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config']
DEBUG - classes:
NXspm_piezo_sensor.nxdl.xml:/piezo_configuration
NXspm_piezo_config.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration [NXstm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config/NXcalibration]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration/calibration" (3 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:/calibration):
DEBUG - 
DEBUG - documentation (NXcalibration.nxdl.xml:):
DEBUG - 
        Subclass of NXprocess to describe post-processing calibrations.
    
DEBUG - documentation (NXprocess.nxdl.xml:):
DEBUG - 
        The :ref:`NXprocess` class describes an operation used to
        process data as part of an analysis workflow, providing
        information such as the software used, the date of the
        operation, the input parameters, and the resulting data. 
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration@NX_class)
DEBUG - value: NXcalibration 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_date): <HDF5 dataset "calibration_date": shape (), type "|O">
DEBUG - value: 2022-01-20T16:07:09+01:00 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_DATE_TIME']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_date
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_date):
DEBUG - 
                The date of the calibration.
            
DEBUG - ===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters [NXstm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config/NXcalibration/NXparameters]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters" (3 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters):
DEBUG - 
DEBUG - documentation (NXcalibration.nxdl.xml:/calibration_parameters):
DEBUG - 
            Fit coefficients to be used in ``fit_formula_description``.
            
            As an example, for non-linear energy calibrations, e.g. in a time-of-flight (TOF) detector, a polynomial 
            function is fitted to a set of features (peaks) at well defined energy positions to determine
            E(TOF). Here we can store the fit coefficients for that procedure.
        
DEBUG - documentation (NXprocess.nxdl.xml:/PARAMETERS):
DEBUG - 
            Parameters used in performing the data analysis.
        
DEBUG - documentation (NXobject.nxdl.xml:/PARAMETERS):
DEBUG - 
DEBUG - documentation (NXparameters.nxdl.xml:):
DEBUG - Container for parameters, usually used in processing or analysis.
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters@NX_class)
DEBUG - value: NXparameters 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_x): <HDF5 dataset "coefficient_x": shape (), type "<f8">
DEBUG - value: -5.866e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):
DEBUG - 
                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_x@units)
DEBUG - value: meter / volt 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG - NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_y): <HDF5 dataset "coefficient_y": shape (), type "<f8">
DEBUG - value: 5.866e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):
DEBUG - 
                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_y@units)
DEBUG - value: meter / volt 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG - NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_z): <HDF5 dataset "coefficient_z": shape (), type "<f8">
DEBUG - value: -1.133e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):
DEBUG - 
                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_z@units)
DEBUG - value: meter / volt 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG - NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_type): <HDF5 dataset "calibration_type": shape (), type "|O">
DEBUG - value: active 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_CHAR']
DEBUG - classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_piezo_config.nxdl.xml:/calibration/calibration_type):
DEBUG - -> active
DEBUG - -> passive
DEBUG - documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_type):
DEBUG - 
                The name of the calibration type, sometimes it is called
                `active calibration`.
            
DEBUG - ===== GROUP (//entry/instrument/height_piezo_sensor/spm_positioner [NXstm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_positioner]): <HDF5 group "/entry/instrument/height_piezo_sensor/spm_positioner" (1 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner']
DEBUG - classes:
NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER
NXspm_positioner.nxdl.xml:
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER):
DEBUG - 
            The positioner information like the position of the tip, the position of the
            sample, PID controller etc.
        
DEBUG - documentation (NXspm_positioner.nxdl.xml:):
DEBUG - 
        An extension of positioner, used to maintain a measurement signal through
        a feedback loop, specialized for scanning probe microscopy applications.
        
        The component positions the spm head or cantilever tip on the surface of the sample
        thus maps 2D scan of the sample.
    
DEBUG - documentation (NXpositioner.nxdl.xml:):
DEBUG - 
        A generic positioner such as a motor or piezo-electric transducer.  
    
DEBUG - documentation (NXcomponent.nxdl.xml:):
DEBUG - 
         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner@NX_class)
DEBUG - value: NXspm_positioner 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner']
DEBUG - classes:
NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER
NXspm_positioner.nxdl.xml:
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller [NXstm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_positioner/NXpid_controller]): <HDF5 group "/entry/instrument/height_piezo_sensor/spm_positioner/z_controller" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller']
DEBUG - classes:
NXspm_positioner.nxdl.xml:/z_controller
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_positioner.nxdl.xml:/z_controller):
DEBUG - 
            This controller's task is to continuously adjust the Z position of tip (e.g., in topography scan in
            STM/STS experiment) in order to keep the selected control signal as close as possible to the Set
            Point. Different control signals lead to different controller's behavior.
            
            The second PID feedback loop intends to position the tip in the Z direction.
            
            p_gain (proportional gain) from z_controller refers to K_p value from PID controller.
            i_gain (integral gain) from z_controller refers to K_i value from PID controller.
            setpoint from z_controller refers to setpoint from PID controller.
            
            Usually, the same controller, (z_controller) will be used for positioning the tip in three dimensional
            space. In this case, the controller coefficients (proportional, integral, differential) and other characteristic
            constants will be the same. Otherwise, for separate controllers positioning the tip in 3D space use the
            :ref:`feedback </NXspm_positioner/actuator/feedback-group>` controller in actuator.
        
DEBUG - documentation (NXpid_controller.nxdl.xml:):
DEBUG - 
        A description of a feedback system in terms of the settings of a proportional-integral-derivative (PID) controller.
         
        Automated control of a physical quantity is often achieved by connecting the output of a sensor to an actuator
        (e.g. using a thermocouple to monitor the effect of a heater and influence the power provided to it). The physical
        quantity being operated on is typically referred to as the "Process Variable", with the desired value being the 
        "Setpoint" (which may vary as a function of time) and the "Error Value" is the time-varying function of the difference 
        between the Setpoint value and the concurrent measurement of the Process Variable  (Error Value = Setpoint - Process Variable).
         
        A PID controller calculates an output value for use as an input signal to an actuator via the weighted sum of four terms:
        * Proportional: the current Error Value
        * Integral: the integral of the Error Value function
        * Derivative: the first derivative of the Error Value function
        * Feed Forward: A model of the physical system (optional)
        
        The weightings of these terms are given by the corresponding constants:
        * K_p
        * K_i
        * K_d
        * K_ff
         
        A classic PID controller only implements the P, I and D terms and the values of the K_p, K_i and K_d constants are sufficient to fully
        describe the behaviour of the feedback system implemented by such a PID controller. The inclusion of a Feed Forward term in a feedback system
        is a modern adaptation that aids optimization of the automated control. It is not present in all PID controllers, but it is also not uncommon.
         
        Note that the ``NXpid_controller`` is designed to be a child object of the actuator that its output is connected to. The parent object
        representing the actuator is likely to be represented by an ``NXactuator`` or ``NXpositioner`` base class, but there is a wide variety
        of possible applications for PID controllers.
    
DEBUG - documentation (NXcomponent.nxdl.xml:):
DEBUG - 
         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller@NX_class)
DEBUG - value: NXpid_controller 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller']
DEBUG - classes:
NXspm_positioner.nxdl.xml:/z_controller
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/K_i): <HDF5 dataset "K_i": shape (), type "<f8">
DEBUG - value: 2.2e-06 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG - classes:
NXpid_controller.nxdl.xml:/K_i
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXpid_controller.nxdl.xml:/K_i):
DEBUG - 
            Integral gain constant. This constant determines how strongly the output value
            should react to an accumulated offset in the Error Value that should have
            been corrected previously. since the integral term is proportional to both
            the magnitude and persistence of the Error Value over time.
        
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/K_p): <HDF5 dataset "K_p": shape (), type "<f8">
DEBUG - value: 1e-10 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG - classes:
NXpid_controller.nxdl.xml:/K_p
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXpid_controller.nxdl.xml:/K_p):
DEBUG - 
            Proportional gain constant. This constant determines how strongly the output value
            directly follows the current Error Value. When this constant dominates, the output
            value is linearly proportional to the Error Value.
        
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/set_point): <HDF5 dataset "set_point": shape (), type "<f8">
DEBUG - value: -4e-10 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG - classes:
NXspm_positioner.nxdl.xml:/z_controller/set_point
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_positioner.nxdl.xml:/z_controller/set_point):
DEBUG - 
                The set point for the z-controller to be fixed and the target value could be
                height or current.
            
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/set_point@units)
DEBUG - value: ampere 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG - classes:
NXspm_positioner.nxdl.xml:/z_controller/set_point
DEBUG - NXspm_positioner.nxdl.xml:/z_controller/set_point@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/z_offset_value): <HDF5 dataset "z_offset_value": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG - classes:
NXspm_positioner.nxdl.xml:/z_controller/z_offset_value
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_positioner.nxdl.xml:/z_controller/z_offset_value):
DEBUG - 
                Offset added to the initial averaged tip position on Z-axis before starting
                scan.
            
DEBUG - ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/z_offset_value@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG - classes:
NXspm_positioner.nxdl.xml:/z_controller/z_offset_value
DEBUG - NXspm_positioner.nxdl.xml:/z_controller/z_offset_value@units [NX_LENGTH]
DEBUG - ===== GROUP (//entry/instrument/lockin_amplifier [NXstm::/NXentry/NXinstrument/NXlockin]): <HDF5 group "/entry/instrument/lockin_amplifier" (12 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXlockin.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier):
DEBUG - 
                    The lock-in amplifier information. The device is being used to extract
                    the very weak signal buried in noisy signals.
                
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier):
DEBUG - 
                    The lock-in amplifier information.
                
DEBUG - documentation (NXlockin.nxdl.xml:):
DEBUG - 
        A base class definition for a lock-in amplifier.
        
        The lock-in amplifier information: the device is being used to extract a (potentially)
        very weak input signal buried in the noisy background, where the input signal has
        the same frequency (or its harmonic) as carrier signal or reference signal, using heterodyne
        detection.
        
        This method extracts the amplitude and phase shift between input signal and reference signal.
        
        In single phase lock-in amplifiers used in high signal-to-noise ratio applications, only
        the amplitude is measured and phase difference is set to zero.
        
        In two phase lock-in amplifiers used in low signal-to-noise ratio applications, both the
        amplitude and phase difference are measured.
        
        Fields with partial names like low_passN, high_passN, etc., can be repeated for each channel
        of the lockin amplifier. It is envisioned that these fields are named low_pass_0, low_pass_1,
        and so on.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier@NX_class)
DEBUG - value: NXlockin 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXlockin.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/active_channel): <HDF5 dataset "active_channel": shape (), type "|O">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_CHAR']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier/active_channel
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier/active_channel):
DEBUG - 
                        The name of the active channel of the lock-in amplifier which is used for the
                        measurement.
                    
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/dc_offset_value_d1): <HDF5 dataset "dc_offset_value_d1": shape (), type "<f8">
DEBUG - value: -1.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/dc_offset_valueN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/dc_offset_valueN):
DEBUG - 
            The DC offset of the demodulated signal.
            This is used to remove the DC component from the demodulated signal.
            
            The same DC offset might be applied to the input signal in the modulation process.
            N is envisioned to represent the channel number e.g., dc_offset_value1.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/dc_offset_value_d1@units)
DEBUG - value: volt 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/dc_offset_valueN
DEBUG - NXlockin.nxdl.xml:/dc_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/dc_offset_value_d2): <HDF5 dataset "dc_offset_value_d2": shape (), type "<f8">
DEBUG - value: -1.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/dc_offset_valueN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/dc_offset_valueN):
DEBUG - 
            The DC offset of the demodulated signal.
            This is used to remove the DC component from the demodulated signal.
            
            The same DC offset might be applied to the input signal in the modulation process.
            N is envisioned to represent the channel number e.g., dc_offset_value1.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/dc_offset_value_d2@units)
DEBUG - value: volt 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/dc_offset_valueN
DEBUG - NXlockin.nxdl.xml:/dc_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/harmonic_order_d1): <HDF5 dataset "harmonic_order_d1": shape (), type "<f8">
DEBUG - value: 1.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/harmonic_orderN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/harmonic_orderN):
DEBUG - 
            The reference signal can be a higher harmonic of the modulation signal.
            Here the order of the harmonic is stored.
            N is envisioned to represent the channel number e.g., harmonic_order1.
        
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/harmonic_order_d2): <HDF5 dataset "harmonic_order_d2": shape (), type "<f8">
DEBUG - value: 1.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/harmonic_orderN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/harmonic_orderN):
DEBUG - 
            The reference signal can be a higher harmonic of the modulation signal.
            Here the order of the harmonic is stored.
            N is envisioned to represent the channel number e.g., harmonic_order1.
        
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/low_pass_d1): <HDF5 dataset "low_pass_d1": shape (), type "<f8">
DEBUG - value: 100.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/low_passN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/low_passN):
DEBUG - 
            Frequency of the low-pass filter or cut-off frequency. Only signals below
            this frequency are passed through the filter.
            N is envisioned to represent the channel number e.g., low_pass1.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/low_pass_d1@units)
DEBUG - value: kilohertz 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/low_passN
DEBUG - NXlockin.nxdl.xml:/low_passN@units [NX_FREQUENCY]
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/modulation_signal): <HDF5 dataset "modulation_signal": shape (), type "|O">
DEBUG - value: current 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_CHAR']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier/modulation_signal
NXlockin.nxdl.xml:/modulation_signal
DEBUG - <<RECOMMENDED>>
DEBUG - enumeration (NXlockin.nxdl.xml:/modulation_signal):
DEBUG - -> voltage
DEBUG - -> current
DEBUG - -> bias
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier/modulation_signal):
DEBUG - 
                        The type of the signal (voltage or current) subject to modulation.
                    
DEBUG - documentation (NXlockin.nxdl.xml:/modulation_signal):
DEBUG - 
            Type of the modulation or reference signal, voltage | current | bias.
            The name of the current or voltage signal can be also specified
            according to their purpose (e.g., `bias` voltage).
        
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/ref_offset_phase_d1): <HDF5 dataset "ref_offset_phase_d1": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/ref_offset_phaseN):
DEBUG - 
            An extra phase offset added to the reference signal in modulation step.
            N is envisioned to represent the channel number e.g., hp_filter_order1.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/ref_offset_phase_d1@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
DEBUG - NXlockin.nxdl.xml:/ref_offset_phaseN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/ref_offset_phase_d2): <HDF5 dataset "ref_offset_phase_d2": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/ref_offset_phaseN):
DEBUG - 
            An extra phase offset added to the reference signal in modulation step.
            N is envisioned to represent the channel number e.g., hp_filter_order1.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/ref_offset_phase_d2@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
DEBUG - NXlockin.nxdl.xml:/ref_offset_phaseN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/reference_amplitude): <HDF5 dataset "reference_amplitude": shape (), type "<f8">
DEBUG - value: 0.009999998845 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/reference_amplitude
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/reference_amplitude):
DEBUG - 
            Amplitude of the reference signal for the lock-in amplifier.
            Unit could be NX_VOLTAGE or NX_CURRENT depending on the type of the reference signal.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/reference_amplitude@units)
DEBUG - value: volt 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/reference_amplitude
DEBUG - NXlockin.nxdl.xml:/reference_amplitude@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/reference_frequency): <HDF5 dataset "reference_frequency": shape (), type "<f8">
DEBUG - value: 1200.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/reference_frequency
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/reference_frequency):
DEBUG - 
            Frequency of the reference signal for the lock-in amplifier.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/reference_frequency@target)
DEBUG - value: /entry/instrument/lockin_amplifier/reference_frequency 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/reference_frequency
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/reference_frequency@units)
DEBUG - value: hertz 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/reference_frequency
DEBUG - NXlockin.nxdl.xml:/reference_frequency@units [NX_FREQUENCY]
DEBUG - ===== FIELD (//entry/instrument/lockin_amplifier/reference_phase): <HDF5 dataset "reference_phase": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/reference_phase
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXlockin.nxdl.xml:/reference_phase):
DEBUG - 
            Phase of the reference signal set in the lock-in amplifier.
        
DEBUG - ===== ATTRS (//entry/instrument/lockin_amplifier/reference_phase@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG - classes:
NXlockin.nxdl.xml:/reference_phase
DEBUG - NXlockin.nxdl.xml:/reference_phase@units [NX_ANGLE]
DEBUG - ===== GROUP (//entry/instrument/sample_bias_voltage [NXstm::/NXentry/NXinstrument/NXsensor]): <HDF5 group "/entry/instrument/sample_bias_voltage" (1 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage):
DEBUG - 
                    The DC bias voltage that is applied to the sample (for example in constant-
                    current mode in STM).
                
DEBUG - documentation (NXinstrument.nxdl.xml:/SENSOR):
DEBUG - 
DEBUG - documentation (NXsensor.nxdl.xml:):
DEBUG - 
		A sensor used to monitor an external condition 
		
		The condition itself is described in :ref:`NXenvironment`.
	
DEBUG - documentation (NXcomponent.nxdl.xml:):
DEBUG - 
         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/sample_bias_voltage@NX_class)
DEBUG - value: NXsensor 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/sample_bias_voltage/bias_voltage): <HDF5 dataset "bias_voltage": shape (), type "<f4">
DEBUG - value: -1.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage):
DEBUG - 
                        The bias voltage (DC) applied to the sample.
                    
DEBUG - ===== ATTRS (//entry/instrument/sample_bias_voltage/bias_voltage@units)
DEBUG - value: volt 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage@units [NX_VOLTAGE]
DEBUG - ===== GROUP (//entry/instrument/scan_environment [NXstm::/NXentry/NXinstrument/NXenvironment]): <HDF5 group "/entry/instrument/scan_environment" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT
NXenvironment.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT):
DEBUG - 
                    The environment information for stm or sts experiment.
                    
                    Note: At least one field from head_temperature, cryo_bottom_temperature and cryo_shield_temperature must be provided.
                
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT):
DEBUG - 
                    Information of the scan environment holding concept for
                    temperature, setpoint (current or height), scan area and scan data.
                    
                    Note: At least one field from head_temperature, cryo_bottom_temperature and cryo_shield_temperature must be provided.
                
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT):
DEBUG - 
                    Describes an environment setup for the experiment.
                    
                    All the setting values of the independently scanned controllers are listed under corresponding
                    NXsensor groups. Similarly, separate NXsensor groups are used to store the readings from each
                    measurement sensor.
                    
                    For example, in a temperature-dependent IV measurement, the temperature and voltage must be
                    present as independently scanned controllers and the current sensor must also be present with
                    its readings.
                
DEBUG - documentation (NXenvironment.nxdl.xml:):
DEBUG - Parameters for controlling external conditions
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment@NX_class)
DEBUG - value: NXenvironment 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT
NXenvironment.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_backward [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_backward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, e.g. pattern of scan
                        (e.g. mesh), scanner speed, etc.
                    
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, type of scan (e.g.
                        mesh, spiral, etc.), and scan speed, etc. This group mainly stores the scan settings
                        data. For processed data or final experimental data would go to NXdata group.
                    
DEBUG - documentation (NXspm_scan_control.nxdl.xml:):
DEBUG - 
        A scan is performed inside an N-dimensional phase space, where each dimension can correspond not only to real space coordinates (x,y) but also to any other parameter. This class contains detailed information about controlling the scan in such a phase space (or its subspace).
        
        scan_types:
        Trajectory: A list of N-dimensional sequential vectors describes the trajectory line for a full scan.
        Mesh: For each dimension a range and a direction are chosen. When a scan along a dimension is done, a single step in the next dimension is taken, and then the scan in the previous dimension is repeated. As such we can speak about the fastest and the slowest scan axes.
        Snake: Similar to a mesh scan but with the scanning direction reversed after each line.
        Spiral: A scan taken along a spiral trajectory.
        Linear: A scan where the scanning will be performed along a single independent axis.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        
        Scan_control_types:
        Stepping: At each step, a movement to the next point is performed; correction (for example backlash) or active regulation (feedback loop) may or may not be applied. After the movement is done, the measurement is performed without the movement.
        Continuous: The scanning of each line in an N-dimensional phase space is done without stopping; measurements are done simultaneously with the movement.
        Oscillating: Scanning over a scan point continuously and then moving to start scanning at the next position.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward@NX_class)
DEBUG - value: NXspm_scan_control 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan" (8 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN):
DEBUG - 
                            The mesh scan is a common technique used in SPM to scan the surface of the sample
                            in a grid pattern.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/meshSCAN):
DEBUG - 
            For each dimension a range and a direction are chosen. When a scan along a dimension is done,
            a single step in the next dimension is taken, and then the scan in the previous dimension is
            repeated. As such we can speak about the fastest and the slowest scan axes.
        
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:):
DEBUG - 
        Basic base class to define the pattern of a scan in a given scan region.
        
        The base class is intended to handle the following scan types or patterns:
        
        Trajectory: A list of N-dimensional sequential vectors, representing a point in phase space, describes
          the trajectory line for a full scan.
        Mesh: For each dimension, a range and a direction are chosen. When a scan along a dimension is done, a
          single step in the next dimension is taken, and then the scan in the previous dimension is repeated.
          As such we can speak about the fastest and the slowest scan axes.
          
        Snake: Similar to a mesh scan but the current scanning direction reversed after each line completed.
        Spiral: A scan taken along a spiral trajectory.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        Linear: A scan where the scanning will be performed along a single independent axis.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan@NX_class)
DEBUG - value: NXspm_scan_pattern 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/continuous): <HDF5 dataset "continuous": shape (), type "|b1">
DEBUG - value: True 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_BOOLEAN']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/continuousN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/continuousN):
DEBUG - 
            If the scan probe moves continuously over the scan points or steps, use True. The default value is True.
            Usually, continuous scanning is possible in one dimension. On other dimensions, the scan probe moves
            in steps.
            
            Rename the field, according to the name of the dimension (e.g. continuous_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG - 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data@signal)
DEBUG - value: current 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data@target)
DEBUG - value: /entry/current_forward 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/current): <HDF5 dataset "current": shape (512, 512), type "<i4">
DEBUG - value: [-100055201 -110339805  -57667645  -46606777  -40990747  -69971120 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG - 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/current@long_name)
DEBUG - value: Current (ampere) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/current@units)
DEBUG - value: ampere 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_data/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_points_x): <HDF5 dataset "scan_points_x": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x):
DEBUG - 
                                The number of points scanned in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/scan_points_y): <HDF5 dataset "scan_points_y": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y):
DEBUG - 
                                The number of points scanned in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/step_size_x): <HDF5 dataset "step_size_x": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x):
DEBUG - 
                                The step size in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/step_size_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/step_size_y): <HDF5 dataset "step_size_y": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y):
DEBUG - 
                                The step size in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/step_size_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/stepping_x): <HDF5 dataset "stepping_x": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/mesh_scan/stepping_y): <HDF5 dataset "stepping_y": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_control_type): <HDF5 dataset "scan_control_type": shape (), type "|O">
DEBUG - value: continuous 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_control_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - -> stepping
DEBUG - -> continuous
DEBUG - -> oscillating
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - 
            This string describes how the scan was performed.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_region]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region" (10 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region):
DEBUG - 
                            The scan region (phase space or sub-phase space) is the region where the scan is
                            performed.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_region):
DEBUG - 
            The scan region is the area of phase space or sub-phase space where the scan is
            performed. The region could be N-dimensional and is defined by the minimum and
            maximum values of the scan axes.
        
DEBUG - documentation (NXspm_scan_region.nxdl.xml:):
DEBUG - 
        The scan region is the area of phase space or sub-phase space where the scan is
        performed. The region could be N-dimensional and is defined by the minimum and
        maximum values of the scan axes.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region@NX_class)
DEBUG - value: NXspm_scan_region 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_angle_x): <HDF5 dataset "scan_angle_x": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x):
DEBUG - 
                                The angle of the scan region in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_angle_x@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_angle_y): <HDF5 dataset "scan_angle_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y):
DEBUG - 
                                The angle of the scan region in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_angle_y@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_end_x): <HDF5 dataset "scan_end_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x):
DEBUG - 
                                The end of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_end_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_end_y): <HDF5 dataset "scan_end_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y):
DEBUG - 
                                The end of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_end_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_offset_value_x): <HDF5 dataset "scan_offset_value_x": shape (), type "<f4">
DEBUG - value: -2.25e-07 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x):
DEBUG - 
                                The offset of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_offset_value_x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_offset_value_y): <HDF5 dataset "scan_offset_value_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y):
DEBUG - 
                                The offset of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_offset_value_y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_range_x): <HDF5 dataset "scan_range_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x):
DEBUG - 
                                The range of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_range_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_range_y): <HDF5 dataset "scan_range_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y):
DEBUG - 
                                The range of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_range_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_start_x): <HDF5 dataset "scan_start_x": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x):
DEBUG - 
                                The start of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_start_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_start_y): <HDF5 dataset "scan_start_y": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y):
DEBUG - 
                                The start of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_region/scan_start_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_backward/scan_type): <HDF5 dataset "scan_type": shape (), type "|O">
DEBUG - value: mesh 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - -> trajectory
DEBUG - -> mesh
DEBUG - -> snake
DEBUG - -> spiral
DEBUG - -> linear
DEBUG - -> tilt
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - 
            This group specifies how the trajectory of the scan is defined.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_forward [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_forward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, e.g. pattern of scan
                        (e.g. mesh), scanner speed, etc.
                    
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, type of scan (e.g.
                        mesh, spiral, etc.), and scan speed, etc. This group mainly stores the scan settings
                        data. For processed data or final experimental data would go to NXdata group.
                    
DEBUG - documentation (NXspm_scan_control.nxdl.xml:):
DEBUG - 
        A scan is performed inside an N-dimensional phase space, where each dimension can correspond not only to real space coordinates (x,y) but also to any other parameter. This class contains detailed information about controlling the scan in such a phase space (or its subspace).
        
        scan_types:
        Trajectory: A list of N-dimensional sequential vectors describes the trajectory line for a full scan.
        Mesh: For each dimension a range and a direction are chosen. When a scan along a dimension is done, a single step in the next dimension is taken, and then the scan in the previous dimension is repeated. As such we can speak about the fastest and the slowest scan axes.
        Snake: Similar to a mesh scan but with the scanning direction reversed after each line.
        Spiral: A scan taken along a spiral trajectory.
        Linear: A scan where the scanning will be performed along a single independent axis.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        
        Scan_control_types:
        Stepping: At each step, a movement to the next point is performed; correction (for example backlash) or active regulation (feedback loop) may or may not be applied. After the movement is done, the measurement is performed without the movement.
        Continuous: The scanning of each line in an N-dimensional phase space is done without stopping; measurements are done simultaneously with the movement.
        Oscillating: Scanning over a scan point continuously and then moving to start scanning at the next position.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward@NX_class)
DEBUG - value: NXspm_scan_control 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan" (8 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN):
DEBUG - 
                            The mesh scan is a common technique used in SPM to scan the surface of the sample
                            in a grid pattern.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/meshSCAN):
DEBUG - 
            For each dimension a range and a direction are chosen. When a scan along a dimension is done,
            a single step in the next dimension is taken, and then the scan in the previous dimension is
            repeated. As such we can speak about the fastest and the slowest scan axes.
        
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:):
DEBUG - 
        Basic base class to define the pattern of a scan in a given scan region.
        
        The base class is intended to handle the following scan types or patterns:
        
        Trajectory: A list of N-dimensional sequential vectors, representing a point in phase space, describes
          the trajectory line for a full scan.
        Mesh: For each dimension, a range and a direction are chosen. When a scan along a dimension is done, a
          single step in the next dimension is taken, and then the scan in the previous dimension is repeated.
          As such we can speak about the fastest and the slowest scan axes.
          
        Snake: Similar to a mesh scan but the current scanning direction reversed after each line completed.
        Spiral: A scan taken along a spiral trajectory.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        Linear: A scan where the scanning will be performed along a single independent axis.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan@NX_class)
DEBUG - value: NXspm_scan_pattern 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/continuous): <HDF5 dataset "continuous": shape (), type "|b1">
DEBUG - value: True 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_BOOLEAN']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/continuousN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/continuousN):
DEBUG - 
            If the scan probe moves continuously over the scan points or steps, use True. The default value is True.
            Usually, continuous scanning is possible in one dimension. On other dimensions, the scan probe moves
            in steps.
            
            Rename the field, according to the name of the dimension (e.g. continuous_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG - 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data@signal)
DEBUG - value: current 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data@target)
DEBUG - value: /entry/current_backward 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/current): <HDF5 dataset "current": shape (512, 512), type "<i4">
DEBUG - value: [ -89614248 -129183967  -80056875  -53352320  -47116311  -51199570 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG - 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/current@long_name)
DEBUG - value: Current (ampere) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/current@units)
DEBUG - value: ampere 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_data/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_points_x): <HDF5 dataset "scan_points_x": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x):
DEBUG - 
                                The number of points scanned in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/scan_points_y): <HDF5 dataset "scan_points_y": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y):
DEBUG - 
                                The number of points scanned in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/step_size_x): <HDF5 dataset "step_size_x": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x):
DEBUG - 
                                The step size in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/step_size_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/step_size_y): <HDF5 dataset "step_size_y": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y):
DEBUG - 
                                The step size in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/step_size_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/stepping_x): <HDF5 dataset "stepping_x": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/mesh_scan/stepping_y): <HDF5 dataset "stepping_y": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_control_type): <HDF5 dataset "scan_control_type": shape (), type "|O">
DEBUG - value: continuous 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_control_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - -> stepping
DEBUG - -> continuous
DEBUG - -> oscillating
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - 
            This string describes how the scan was performed.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_region]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region" (10 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region):
DEBUG - 
                            The scan region (phase space or sub-phase space) is the region where the scan is
                            performed.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_region):
DEBUG - 
            The scan region is the area of phase space or sub-phase space where the scan is
            performed. The region could be N-dimensional and is defined by the minimum and
            maximum values of the scan axes.
        
DEBUG - documentation (NXspm_scan_region.nxdl.xml:):
DEBUG - 
        The scan region is the area of phase space or sub-phase space where the scan is
        performed. The region could be N-dimensional and is defined by the minimum and
        maximum values of the scan axes.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region@NX_class)
DEBUG - value: NXspm_scan_region 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_angle_x): <HDF5 dataset "scan_angle_x": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x):
DEBUG - 
                                The angle of the scan region in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_angle_x@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_angle_y): <HDF5 dataset "scan_angle_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y):
DEBUG - 
                                The angle of the scan region in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_angle_y@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_end_x): <HDF5 dataset "scan_end_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x):
DEBUG - 
                                The end of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_end_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_end_y): <HDF5 dataset "scan_end_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y):
DEBUG - 
                                The end of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_end_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_offset_value_x): <HDF5 dataset "scan_offset_value_x": shape (), type "<f4">
DEBUG - value: -2.25e-07 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x):
DEBUG - 
                                The offset of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_offset_value_x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_offset_value_y): <HDF5 dataset "scan_offset_value_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y):
DEBUG - 
                                The offset of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_offset_value_y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_range_x): <HDF5 dataset "scan_range_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x):
DEBUG - 
                                The range of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_range_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_range_y): <HDF5 dataset "scan_range_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y):
DEBUG - 
                                The range of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_range_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_start_x): <HDF5 dataset "scan_start_x": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x):
DEBUG - 
                                The start of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_start_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_start_y): <HDF5 dataset "scan_start_y": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y):
DEBUG - 
                                The start of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_region/scan_start_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_current_forward/scan_type): <HDF5 dataset "scan_type": shape (), type "|O">
DEBUG - value: mesh 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - -> trajectory
DEBUG - -> mesh
DEBUG - -> snake
DEBUG - -> spiral
DEBUG - -> linear
DEBUG - -> tilt
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - 
            This group specifies how the trajectory of the scan is defined.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_backward [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_backward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, e.g. pattern of scan
                        (e.g. mesh), scanner speed, etc.
                    
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, type of scan (e.g.
                        mesh, spiral, etc.), and scan speed, etc. This group mainly stores the scan settings
                        data. For processed data or final experimental data would go to NXdata group.
                    
DEBUG - documentation (NXspm_scan_control.nxdl.xml:):
DEBUG - 
        A scan is performed inside an N-dimensional phase space, where each dimension can correspond not only to real space coordinates (x,y) but also to any other parameter. This class contains detailed information about controlling the scan in such a phase space (or its subspace).
        
        scan_types:
        Trajectory: A list of N-dimensional sequential vectors describes the trajectory line for a full scan.
        Mesh: For each dimension a range and a direction are chosen. When a scan along a dimension is done, a single step in the next dimension is taken, and then the scan in the previous dimension is repeated. As such we can speak about the fastest and the slowest scan axes.
        Snake: Similar to a mesh scan but with the scanning direction reversed after each line.
        Spiral: A scan taken along a spiral trajectory.
        Linear: A scan where the scanning will be performed along a single independent axis.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        
        Scan_control_types:
        Stepping: At each step, a movement to the next point is performed; correction (for example backlash) or active regulation (feedback loop) may or may not be applied. After the movement is done, the measurement is performed without the movement.
        Continuous: The scanning of each line in an N-dimensional phase space is done without stopping; measurements are done simultaneously with the movement.
        Oscillating: Scanning over a scan point continuously and then moving to start scanning at the next position.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward@NX_class)
DEBUG - value: NXspm_scan_control 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan" (8 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN):
DEBUG - 
                            The mesh scan is a common technique used in SPM to scan the surface of the sample
                            in a grid pattern.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/meshSCAN):
DEBUG - 
            For each dimension a range and a direction are chosen. When a scan along a dimension is done,
            a single step in the next dimension is taken, and then the scan in the previous dimension is
            repeated. As such we can speak about the fastest and the slowest scan axes.
        
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:):
DEBUG - 
        Basic base class to define the pattern of a scan in a given scan region.
        
        The base class is intended to handle the following scan types or patterns:
        
        Trajectory: A list of N-dimensional sequential vectors, representing a point in phase space, describes
          the trajectory line for a full scan.
        Mesh: For each dimension, a range and a direction are chosen. When a scan along a dimension is done, a
          single step in the next dimension is taken, and then the scan in the previous dimension is repeated.
          As such we can speak about the fastest and the slowest scan axes.
          
        Snake: Similar to a mesh scan but the current scanning direction reversed after each line completed.
        Spiral: A scan taken along a spiral trajectory.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        Linear: A scan where the scanning will be performed along a single independent axis.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan@NX_class)
DEBUG - value: NXspm_scan_pattern 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/continuous): <HDF5 dataset "continuous": shape (), type "|b1">
DEBUG - value: True 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_BOOLEAN']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/continuousN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/continuousN):
DEBUG - 
            If the scan probe moves continuously over the scan points or steps, use True. The default value is True.
            Usually, continuous scanning is possible in one dimension. On other dimensions, the scan probe moves
            in steps.
            
            Rename the field, according to the name of the dimension (e.g. continuous_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG - 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data@signal)
DEBUG - value: topography_backward 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data@target)
DEBUG - value: /entry/z_backward 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/topography_backward): <HDF5 dataset "topography_backward": shape (512, 512), type "<i4">
DEBUG - value: [571444632 571454832 571472750 571450168 571407349 571356662 571351217 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG - 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/topography_backward@long_name)
DEBUG - value: Topography_backward (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/topography_backward@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_data/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_points_x): <HDF5 dataset "scan_points_x": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x):
DEBUG - 
                                The number of points scanned in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/scan_points_y): <HDF5 dataset "scan_points_y": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y):
DEBUG - 
                                The number of points scanned in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/step_size_x): <HDF5 dataset "step_size_x": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x):
DEBUG - 
                                The step size in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/step_size_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/step_size_y): <HDF5 dataset "step_size_y": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y):
DEBUG - 
                                The step size in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/step_size_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/stepping_x): <HDF5 dataset "stepping_x": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/mesh_scan/stepping_y): <HDF5 dataset "stepping_y": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_control_type): <HDF5 dataset "scan_control_type": shape (), type "|O">
DEBUG - value: continuous 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_control_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - -> stepping
DEBUG - -> continuous
DEBUG - -> oscillating
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - 
            This string describes how the scan was performed.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_region]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region" (10 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region):
DEBUG - 
                            The scan region (phase space or sub-phase space) is the region where the scan is
                            performed.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_region):
DEBUG - 
            The scan region is the area of phase space or sub-phase space where the scan is
            performed. The region could be N-dimensional and is defined by the minimum and
            maximum values of the scan axes.
        
DEBUG - documentation (NXspm_scan_region.nxdl.xml:):
DEBUG - 
        The scan region is the area of phase space or sub-phase space where the scan is
        performed. The region could be N-dimensional and is defined by the minimum and
        maximum values of the scan axes.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region@NX_class)
DEBUG - value: NXspm_scan_region 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_angle_x): <HDF5 dataset "scan_angle_x": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x):
DEBUG - 
                                The angle of the scan region in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_angle_x@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_angle_y): <HDF5 dataset "scan_angle_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y):
DEBUG - 
                                The angle of the scan region in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_angle_y@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_end_x): <HDF5 dataset "scan_end_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x):
DEBUG - 
                                The end of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_end_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_end_y): <HDF5 dataset "scan_end_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y):
DEBUG - 
                                The end of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_end_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_offset_value_x): <HDF5 dataset "scan_offset_value_x": shape (), type "<f4">
DEBUG - value: -2.25e-07 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x):
DEBUG - 
                                The offset of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_offset_value_x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_offset_value_y): <HDF5 dataset "scan_offset_value_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y):
DEBUG - 
                                The offset of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_offset_value_y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_range_x): <HDF5 dataset "scan_range_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x):
DEBUG - 
                                The range of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_range_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_range_y): <HDF5 dataset "scan_range_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y):
DEBUG - 
                                The range of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_range_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_start_x): <HDF5 dataset "scan_start_x": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x):
DEBUG - 
                                The start of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_start_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_start_y): <HDF5 dataset "scan_start_y": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y):
DEBUG - 
                                The start of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_region/scan_start_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_backward/scan_type): <HDF5 dataset "scan_type": shape (), type "|O">
DEBUG - value: mesh 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - -> trajectory
DEBUG - -> mesh
DEBUG - -> snake
DEBUG - -> spiral
DEBUG - -> linear
DEBUG - -> tilt
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - 
            This group specifies how the trajectory of the scan is defined.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_forward [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_forward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, e.g. pattern of scan
                        (e.g. mesh), scanner speed, etc.
                    
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG - 
                        The scan control information like scan region or phase space, type of scan (e.g.
                        mesh, spiral, etc.), and scan speed, etc. This group mainly stores the scan settings
                        data. For processed data or final experimental data would go to NXdata group.
                    
DEBUG - documentation (NXspm_scan_control.nxdl.xml:):
DEBUG - 
        A scan is performed inside an N-dimensional phase space, where each dimension can correspond not only to real space coordinates (x,y) but also to any other parameter. This class contains detailed information about controlling the scan in such a phase space (or its subspace).
        
        scan_types:
        Trajectory: A list of N-dimensional sequential vectors describes the trajectory line for a full scan.
        Mesh: For each dimension a range and a direction are chosen. When a scan along a dimension is done, a single step in the next dimension is taken, and then the scan in the previous dimension is repeated. As such we can speak about the fastest and the slowest scan axes.
        Snake: Similar to a mesh scan but with the scanning direction reversed after each line.
        Spiral: A scan taken along a spiral trajectory.
        Linear: A scan where the scanning will be performed along a single independent axis.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        
        Scan_control_types:
        Stepping: At each step, a movement to the next point is performed; correction (for example backlash) or active regulation (feedback loop) may or may not be applied. After the movement is done, the measurement is performed without the movement.
        Continuous: The scanning of each line in an N-dimensional phase space is done without stopping; measurements are done simultaneously with the movement.
        Oscillating: Scanning over a scan point continuously and then moving to start scanning at the next position.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward@NX_class)
DEBUG - value: NXspm_scan_control 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan" (8 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN):
DEBUG - 
                            The mesh scan is a common technique used in SPM to scan the surface of the sample
                            in a grid pattern.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/meshSCAN):
DEBUG - 
            For each dimension a range and a direction are chosen. When a scan along a dimension is done,
            a single step in the next dimension is taken, and then the scan in the previous dimension is
            repeated. As such we can speak about the fastest and the slowest scan axes.
        
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:):
DEBUG - 
        Basic base class to define the pattern of a scan in a given scan region.
        
        The base class is intended to handle the following scan types or patterns:
        
        Trajectory: A list of N-dimensional sequential vectors, representing a point in phase space, describes
          the trajectory line for a full scan.
        Mesh: For each dimension, a range and a direction are chosen. When a scan along a dimension is done, a
          single step in the next dimension is taken, and then the scan in the previous dimension is repeated.
          As such we can speak about the fastest and the slowest scan axes.
          
        Snake: Similar to a mesh scan but the current scanning direction reversed after each line completed.
        Spiral: A scan taken along a spiral trajectory.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        Linear: A scan where the scanning will be performed along a single independent axis.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan@NX_class)
DEBUG - value: NXspm_scan_pattern 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/continuous): <HDF5 dataset "continuous": shape (), type "|b1">
DEBUG - value: True 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_BOOLEAN']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/continuousN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/continuousN):
DEBUG - 
            If the scan probe moves continuously over the scan points or steps, use True. The default value is True.
            Usually, continuous scanning is possible in one dimension. On other dimensions, the scan probe moves
            in steps.
            
            Rename the field, according to the name of the dimension (e.g. continuous_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data" (4 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG - 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data@signal)
DEBUG - value: topography_forward 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data@target)
DEBUG - value: /entry/z_forward 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/topography_forward): <HDF5 dataset "topography_forward": shape (512, 512), type "<i4">
DEBUG - value: [571379072 571350418 571348439 571370482 571409081 571444477 571469445 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG - 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/topography_forward@long_name)
DEBUG - value: Topography_forward (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/topography_forward@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG - 
                The name of the axis that corresponds to the data field.
            
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_data/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_points_x): <HDF5 dataset "scan_points_x": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x):
DEBUG - 
                                The number of points scanned in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/scan_points_y): <HDF5 dataset "scan_points_y": shape (), type "<u4">
DEBUG - value: 512 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y):
DEBUG - 
                                The number of points scanned in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG - 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/step_size_x): <HDF5 dataset "step_size_x": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x):
DEBUG - 
                                The step size in x direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/step_size_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/step_size_y): <HDF5 dataset "step_size_y": shape (), type "<f8">
DEBUG - value: 9.746551627571026e-11 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y):
DEBUG - 
                                The step size in y direction.
                            
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG - 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/step_size_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y@units [NX_LENGTH]
DEBUG - NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/stepping_x): <HDF5 dataset "stepping_x": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/mesh_scan/stepping_y): <HDF5 dataset "stepping_y": shape (), type "<i8">
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG - classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG - 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_control_type): <HDF5 dataset "scan_control_type": shape (), type "|O">
DEBUG - value: continuous 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_control_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - -> stepping
DEBUG - -> continuous
DEBUG - -> oscillating
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG - 
            This string describes how the scan was performed.
        
DEBUG - ===== GROUP (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region [NXstm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_region]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region" (10 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region):
DEBUG - 
                            The scan region (phase space or sub-phase space) is the region where the scan is
                            performed.
                        
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_region):
DEBUG - 
            The scan region is the area of phase space or sub-phase space where the scan is
            performed. The region could be N-dimensional and is defined by the minimum and
            maximum values of the scan axes.
        
DEBUG - documentation (NXspm_scan_region.nxdl.xml:):
DEBUG - 
        The scan region is the area of phase space or sub-phase space where the scan is
        performed. The region could be N-dimensional and is defined by the minimum and
        maximum values of the scan axes.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region@NX_class)
DEBUG - value: NXspm_scan_region 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_angle_x): <HDF5 dataset "scan_angle_x": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x):
DEBUG - 
                                The angle of the scan region in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_angle_x@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_angle_y): <HDF5 dataset "scan_angle_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y):
DEBUG - 
                                The angle of the scan region in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG - 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_angle_y@units)
DEBUG - value: degree 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_y@units [NX_ANGLE]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_end_x): <HDF5 dataset "scan_end_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x):
DEBUG - 
                                The end of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_end_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_end_y): <HDF5 dataset "scan_end_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y):
DEBUG - 
                                The end of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG - 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_end_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_offset_value_x): <HDF5 dataset "scan_offset_value_x": shape (), type "<f4">
DEBUG - value: -2.25e-07 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x):
DEBUG - 
                                The offset of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_offset_value_x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_offset_value_y): <HDF5 dataset "scan_offset_value_y": shape (), type "<f4">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y):
DEBUG - 
                                The offset of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG - 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_offset_value_y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_range_x): <HDF5 dataset "scan_range_x": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x):
DEBUG - 
                                The range of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_range_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_range_y): <HDF5 dataset "scan_range_y": shape (), type "<f8">
DEBUG - value: 4.990234433316365e-08 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y):
DEBUG - 
                                The range of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG - 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_range_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_start_x): <HDF5 dataset "scan_start_x": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x):
DEBUG - 
                                The start of the scan in x direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_start_x@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_start_y): <HDF5 dataset "scan_start_y": shape (), type "<f8">
DEBUG - value: 0.0 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y):
DEBUG - 
                                The start of the scan in y direction.
                            
DEBUG - documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG - 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG - ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_region/scan_start_y@units)
DEBUG - value: m 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG - NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y@units [NX_LENGTH]
DEBUG - NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG - ===== FIELD (//entry/instrument/scan_environment/spm_scan_control_topography_forward/scan_type): <HDF5 dataset "scan_type": shape (), type "|O">
DEBUG - value: mesh 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG - classes:
NXspm_scan_control.nxdl.xml:/scan_type
DEBUG - <<OPTIONAL>>
DEBUG - enumeration (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - -> trajectory
DEBUG - -> mesh
DEBUG - -> snake
DEBUG - -> spiral
DEBUG - -> linear
DEBUG - -> tilt
DEBUG - documentation (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG - 
            This group specifies how the trajectory of the scan is defined.
        
DEBUG - ===== GROUP (//entry/instrument/software [NXstm::/NXentry/NXinstrument/NXfabrication]): <HDF5 group "/entry/instrument/software" (2 members)>
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software):
DEBUG - 
                    The software description of core instrument setup of experiment.
                    Usually, the entire instrument is supplied by a single name/manufacturer/model/etc.
                    To describe the software from any sub-components, use the ``software`` group of that component.
                
DEBUG - documentation (NXinstrument.nxdl.xml:/FABRICATION):
DEBUG - 
DEBUG - documentation (NXfabrication.nxdl.xml:):
DEBUG - 
         Details about a component as it is defined by its manufacturer.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/instrument/software@NX_class)
DEBUG - value: NXfabrication 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/instrument/software/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG - value: omicron 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/name
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/name):
DEBUG - 
                        Name of the software.
                    
DEBUG - ===== FIELD (//entry/instrument/software/vendor): <HDF5 dataset "vendor": shape (), type "|O">
DEBUG - value: omicron 
DEBUG - classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/vendor
NXfabrication.nxdl.xml:/vendor
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/vendor):
DEBUG - 
                        Company name of the manufacturer.
                    
DEBUG - documentation (NXfabrication.nxdl.xml:/vendor):
DEBUG - 
             Company name of the manufacturer.
        
DEBUG - ===== GROUP (//entry/reproducibility_indicators [NXstm::/NXentry/NXcollection]): <HDF5 group "/entry/reproducibility_indicators" (2 members)>
DEBUG - classpath: ['NXentry', 'NXcollection']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/reproducibility_indicators
NXspm.nxdl.xml:/ENTRY/reproducibility_indicators
NXentry.nxdl.xml:/COLLECTION
NXobject.nxdl.xml:/COLLECTION
NXcollection.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/reproducibility_indicators):
DEBUG - 
                The group's concepts hold the link to the related concepts that define the
                reproducibility of the STM experiment.
            
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/reproducibility_indicators):
DEBUG - 
                The group of indicators (links to the existing fields in different groups) that measure
                the reproducibility of the experiment.
            
DEBUG - documentation (NXentry.nxdl.xml:/COLLECTION):
DEBUG - 
DEBUG - documentation (NXobject.nxdl.xml:/COLLECTION):
DEBUG - 
DEBUG - documentation (NXcollection.nxdl.xml:):
DEBUG - 
		An unvalidated set of terms, such as the description of a beam line.
		
		Use :ref:`NXcollection` to gather together any set of terms.
		The original suggestion is to use this as a container 
		class for the description of a beamline.
		
		For NeXus validation, :ref:`NXcollection` will always generate 
		a warning since it is always an optional group.  
		Anything (groups, fields, or attributes) placed in
		an :ref:`NXcollection` group will not be validated.

		.. admonition:: NXcollection content is not validated.

		   :ref:`NXcollection` is and will always be for unvalidated content.

		   Any and all content within a :ref:`NXcollection` group specified by
		   an application definition cannot be validated.

		   It is suggested to use a :ref:`NXparameters` group for similar
		   content which should be validated.

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/reproducibility_indicators@NX_class)
DEBUG - value: NXcollection 
DEBUG - classpath: ['NXentry', 'NXcollection']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/reproducibility_indicators
NXspm.nxdl.xml:/ENTRY/reproducibility_indicators
NXentry.nxdl.xml:/COLLECTION
NXobject.nxdl.xml:/COLLECTION
NXcollection.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/reproducibility_indicators/modulation_signal): <HDF5 dataset "modulation_signal": shape (), type "|O">
DEBUG - value: current 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_CHAR']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/reproducibility_indicators/modulation_signal_type
NXspm.nxdl.xml:/ENTRY/reproducibility_indicators/LINK_TO_FIELD
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/reproducibility_indicators/modulation_signal_type):
DEBUG - 
                    This is the signal on which the modulation voltage or current will be added.
                    This should be a link to
                    /entry/instrument/phase_lock_loop/modulation_signal
                
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/reproducibility_indicators/LINK_TO_FIELD):
DEBUG - 
                    A place holder to create link to any field relevant considered as
                    reproducibility indicators (defined by laboratory).
                
DEBUG - ===== FIELD (//entry/reproducibility_indicators/reference_frequency): <HDF5 dataset "reference_frequency": shape (), type "<f8">
DEBUG - value: 1200.0 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_NUMBER']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/reproducibility_indicators/reference_frequency
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/reproducibility_indicators/reference_frequency):
DEBUG - 
                    The frequency of the sine modulation that is used as a carrier signal of input signal in lock-in.
                    
                    This should be a link to
                    /entry/instrument/lockin_amplifier/reference_frequency
                
DEBUG - ===== ATTRS (//entry/reproducibility_indicators/reference_frequency@target)
DEBUG - value: /entry/instrument/lockin_amplifier/reference_frequency 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_NUMBER']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/reproducibility_indicators/reference_frequency
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/reproducibility_indicators/reference_frequency@units)
DEBUG - value: hertz 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_NUMBER']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/reproducibility_indicators/reference_frequency
DEBUG - NXstm.nxdl.xml:/ENTRY/reproducibility_indicators/reference_frequency@units - REQUIRED, but undefined unit category
DEBUG - ===== GROUP (//entry/resolution_indicators [NXstm::/NXentry/NXcollection]): <HDF5 group "/entry/resolution_indicators" (2 members)>
DEBUG - classpath: ['NXentry', 'NXcollection']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/resolution_indicators
NXspm.nxdl.xml:/ENTRY/resolution_indicators
NXentry.nxdl.xml:/COLLECTION
NXobject.nxdl.xml:/COLLECTION
NXcollection.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/resolution_indicators):
DEBUG - 
                The group's concepts hold the link to the related concepts that define the
                resolution of the STM experiment.
            
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/resolution_indicators):
DEBUG - 
                The group of indicators (links to the existing fields in different groups) that
                are used to measure the resolution of the experiment results.
            
DEBUG - documentation (NXentry.nxdl.xml:/COLLECTION):
DEBUG - 
DEBUG - documentation (NXobject.nxdl.xml:/COLLECTION):
DEBUG - 
DEBUG - documentation (NXcollection.nxdl.xml:):
DEBUG - 
		An unvalidated set of terms, such as the description of a beam line.
		
		Use :ref:`NXcollection` to gather together any set of terms.
		The original suggestion is to use this as a container 
		class for the description of a beamline.
		
		For NeXus validation, :ref:`NXcollection` will always generate 
		a warning since it is always an optional group.  
		Anything (groups, fields, or attributes) placed in
		an :ref:`NXcollection` group will not be validated.

		.. admonition:: NXcollection content is not validated.

		   :ref:`NXcollection` is and will always be for unvalidated content.

		   Any and all content within a :ref:`NXcollection` group specified by
		   an application definition cannot be validated.

		   It is suggested to use a :ref:`NXparameters` group for similar
		   content which should be validated.

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/resolution_indicators@NX_class)
DEBUG - value: NXcollection 
DEBUG - classpath: ['NXentry', 'NXcollection']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/resolution_indicators
NXspm.nxdl.xml:/ENTRY/resolution_indicators
NXentry.nxdl.xml:/COLLECTION
NXobject.nxdl.xml:/COLLECTION
NXcollection.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/resolution_indicators/modulation_signal): <HDF5 dataset "modulation_signal": shape (), type "|O">
DEBUG - value: current 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_CHAR']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/resolution_indicators/LINK_TO_FIELD
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/resolution_indicators/LINK_TO_FIELD):
DEBUG - 
                    A place holder to create link to any field relevant considered as
                    reproducibility indicators (defined by laboratory).
                
DEBUG - ===== FIELD (//entry/resolution_indicators/reference_frequency): <HDF5 dataset "reference_frequency": shape (), type "<f8">
DEBUG - value: 1200.0 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_NUMBER']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/resolution_indicators/reference_frequency
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/resolution_indicators/reference_frequency):
DEBUG - 
                    The frequency of the sine modulation that is used to modulate the signal in lock-in.
                    This should be a link to
                    /entry/instrument/lockin_amplifier/reference_frequency
                
DEBUG - ===== ATTRS (//entry/resolution_indicators/reference_frequency@target)
DEBUG - value: /entry/instrument/lockin_amplifier/reference_frequency 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_NUMBER']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/resolution_indicators/reference_frequency
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/resolution_indicators/reference_frequency@units)
DEBUG - value: hertz 
DEBUG - classpath: ['NXentry', 'NXcollection', 'NX_NUMBER']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/resolution_indicators/reference_frequency
DEBUG - NXstm.nxdl.xml:/ENTRY/resolution_indicators/reference_frequency@units - REQUIRED, but undefined unit category
DEBUG - ===== GROUP (//entry/sample [NXstm::/NXentry/NXsample]): <HDF5 group "/entry/sample" (3 members)>
DEBUG - classpath: ['NXentry', 'NXsample']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE
NXentry.nxdl.xml:/SAMPLE
NXsample.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/SAMPLE):
DEBUG - 
                The sample information.
            
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE):
DEBUG - 
DEBUG - documentation (NXentry.nxdl.xml:/SAMPLE):
DEBUG - 
DEBUG - documentation (NXsample.nxdl.xml:):
DEBUG - 
		Any information on the sample. 
		
		This could include scanned variables that
		are associated with one of the data dimensions, e.g. the magnetic field, or
		logged data, e.g. monitored temperature vs elapsed time.
	
DEBUG - documentation (NXcomponent.nxdl.xml:):
DEBUG - 
         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/sample@NX_class)
DEBUG - value: NXsample 
DEBUG - classpath: ['NXentry', 'NXsample']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE
NXentry.nxdl.xml:/SAMPLE
NXsample.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/sample/history [NXstm::/NXentry/NXsample/NXhistory]): <HDF5 group "/entry/sample/history" (1 members)>
DEBUG - classpath: ['NXentry', 'NXsample', 'NXhistory']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE/history
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY
NXsample.nxdl.xml:/history
NXhistory.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/SAMPLE/history):
DEBUG - 
                    A set of physical processes that occurred to the sample prior/during experiment.
                
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY):
DEBUG - 
DEBUG - documentation (NXsample.nxdl.xml:/history):
DEBUG - 
        	A set of physical processes that occurred to the sample prior/during experiment.
		
DEBUG - documentation (NXhistory.nxdl.xml:):
DEBUG - 
        A set of activities that occurred to a physical entity prior/during experiment.
        
        Ideally, a full report of the previous operations (or links to a chain of operations).
        Alternatively, notes allow for additional descriptors in any format.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/sample/history@NX_class)
DEBUG - value: NXhistory 
DEBUG - classpath: ['NXentry', 'NXsample', 'NXhistory']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE/history
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY
NXsample.nxdl.xml:/history
NXhistory.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== GROUP (//entry/sample/history/note [NXstm::/NXentry/NXsample/NXhistory/NXnote]): <HDF5 group "/entry/sample/history/note" (1 members)>
DEBUG - classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote']
DEBUG - classes:
NXhistory.nxdl.xml:/NOTE
NXobject.nxdl.xml:/NOTE
NXnote.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXhistory.nxdl.xml:/NOTE):
DEBUG - 
            A descriptor to keep track of the treatment of the physical entity before or during the
            experiment (NXnote allows to add pictures, audio, movies). Alternatively, a
            reference to the location or a unique identifier or other metadata file. In the
            case these are not available, free-text description.
            This should only be used in case that there is no rigorous description
            using the base classes above. This group can also be used to pull in any activities
            that are not well described by an existing base class definition.
            
            Any number of instances of NXnote are allowed for describing extra details of
            this activity.
        
DEBUG - documentation (NXobject.nxdl.xml:/NOTE):
DEBUG - 
DEBUG - documentation (NXnote.nxdl.xml:):
DEBUG - 
		Any additional freeform information not covered by the other base classes.
		
		This class can be used to store additional information in a 
		NeXus file e.g. pictures, movies, audio, additional text logs
	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/sample/history/note@NX_class)
DEBUG - value: NXnote 
DEBUG - classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote']
DEBUG - classes:
NXhistory.nxdl.xml:/NOTE
NXobject.nxdl.xml:/NOTE
NXnote.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/sample/history/note/description): <HDF5 dataset "description": shape (), type "|O">
DEBUG - value: <p>Demo description: This sample is used in Palma's lab.</p> 
DEBUG - classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote', 'NX_CHAR']
DEBUG - classes:
NXnote.nxdl.xml:/description
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXnote.nxdl.xml:/description):
DEBUG - Title of an image or other details of the note
DEBUG - ===== FIELD (//entry/sample/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG - value: diPAMY 
DEBUG - classpath: ['NXentry', 'NXsample', 'NX_CHAR']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/name
NXsample.nxdl.xml:/name
NXcomponent.nxdl.xml:/name
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/name):
DEBUG - 
DEBUG - documentation (NXsample.nxdl.xml:/name):
DEBUG - Descriptive name of sample
DEBUG - documentation (NXcomponent.nxdl.xml:/name):
DEBUG - 
            Name of the component.
        
DEBUG - ===== GROUP (//entry/sample/sample_component_1 [NXstm::/NXentry/NXsample/NXsample_component]): <HDF5 group "/entry/sample/sample_component_1" (3 members)>
DEBUG - classpath: ['NXentry', 'NXsample', 'NXsample_component']
DEBUG - classes:
NXsample.nxdl.xml:/SAMPLE_COMPONENT
NXsample_component.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXsample.nxdl.xml:/SAMPLE_COMPONENT):
DEBUG - 
			One group per sample component
			This is the preferred way of recording per component information over the n_comp arrays
		
DEBUG - documentation (NXsample_component.nxdl.xml:):
DEBUG - 
		One group like this per component can be recorded for a sample consisting of multiple components.
	
DEBUG - documentation (NXcomponent.nxdl.xml:):
DEBUG - 
         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/sample/sample_component_1@NX_class)
DEBUG - value: NXsample_component 
DEBUG - classpath: ['NXentry', 'NXsample', 'NXsample_component']
DEBUG - classes:
NXsample.nxdl.xml:/SAMPLE_COMPONENT
NXsample_component.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/sample/sample_component_1/chemical_formula): <HDF5 dataset "chemical_formula": shape (), type "|O">
DEBUG - value: Au(KAl3Si3O12H2) 
DEBUG - classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
DEBUG - classes:
NXsample_component.nxdl.xml:/chemical_formula
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXsample_component.nxdl.xml:/chemical_formula):
DEBUG - 
			The chemical formula specified using CIF conventions.
			Abbreviated version of CIF standard: 
			
			* Only recognized element symbols may be used.
			* Each element symbol is followed by a 'count' number. A count of '1' may be omitted.
			* A space or parenthesis must separate each cluster of (element symbol + count).
			* Where a group of elements is enclosed in parentheses, the multiplier for the 
			  group must follow the closing parentheses. That is, all element and group 
			  multipliers are assumed to be printed as subscripted numbers.
			* Unless the elements are ordered in a manner that corresponds to their chemical 
			  structure, the order of the elements within any group or moiety depends on 
			  whether or not carbon is present.
			* If carbon is present, the order should be: 
			
			  - C, then H, then the other elements in alphabetical order of their symbol. 
			  - If carbon is not present, the elements are listed purely in alphabetic order of their symbol. 
			  
			* This is the *Hill* system used by Chemical Abstracts.
		
DEBUG - ===== FIELD (//entry/sample/sample_component_1/description): <HDF5 dataset "description": shape (), type "|O">
DEBUG - value: <p>A demo experiment on a sample Au(Mica).</p> 
DEBUG - classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
DEBUG - classes:
NXsample_component.nxdl.xml:/description
NXcomponent.nxdl.xml:/description
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXsample_component.nxdl.xml:/description):
DEBUG - 
			Description of the sample component
		
DEBUG - documentation (NXcomponent.nxdl.xml:/description):
DEBUG - 
            Ideally, use instances of ``identifierNAME`` to point to a resource
            that provides further details.

            If such a resource does not exist or should not be used, use this free text,
            although it is not recommended.
        
DEBUG - ===== FIELD (//entry/sample/sample_component_1/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG - value: Au(Mica) 
DEBUG - classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
DEBUG - classes:
NXsample_component.nxdl.xml:/name
NXcomponent.nxdl.xml:/name
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXsample_component.nxdl.xml:/name):
DEBUG - Descriptive name of sample component
DEBUG - documentation (NXcomponent.nxdl.xml:/name):
DEBUG - 
            Name of the component.
        
DEBUG - ===== FIELD (//entry/scan_mode): <HDF5 dataset "scan_mode": shape (), type "|O">
DEBUG - value: constant height 
DEBUG - classpath: ['NXentry', 'NX_CHAR']
DEBUG - classes:
NXstm.nxdl.xml:/ENTRY/scan_mode
NXspm.nxdl.xml:/ENTRY/scan_mode
DEBUG - <<REQUIRED>>
DEBUG - enumeration (NXstm.nxdl.xml:/ENTRY/scan_mode):
DEBUG - -> constant height
DEBUG - -> constant current
DEBUG - enumeration (NXspm.nxdl.xml:/ENTRY/scan_mode):
DEBUG - -> constant height
DEBUG - -> constant current
DEBUG - -> contact mode
DEBUG - -> tapping mode
DEBUG - -> peak force tapping mode
DEBUG - -> non-contact mode
DEBUG - documentation (NXstm.nxdl.xml:/ENTRY/scan_mode):
DEBUG - 
                The mode of the scan that is performed. Two commonly used modes  are constant
                height mode and constant current mode.
            
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/scan_mode):
DEBUG - 
                The mode of the scan. The possible options depend on the type of experiment.
                For example, in STM, the scan mode could be constant height or constant current,
                in AFM, the scan mode could be contact mode, tapping mode or non-contact mode.
                
                For general purpose usage, all scan modes from its sub-techniques are listed.
            
DEBUG - ===== FIELD (//entry/start_time): <HDF5 dataset "start_time": shape (), type "|O">
DEBUG - value: 2022-01-20T16:07:09+01:00 
DEBUG - classpath: ['NXentry', 'NX_DATE_TIME']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/start_time
NXentry.nxdl.xml:/start_time
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/start_time):
DEBUG - 
                The start time of the experiment.
            
DEBUG - documentation (NXentry.nxdl.xml:/start_time):
DEBUG - Starting time of measurement
DEBUG - ===== GROUP (//entry/user [NXstm::/NXentry/NXuser]): <HDF5 group "/entry/user" (3 members)>
DEBUG - classpath: ['NXentry', 'NXuser']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER
NXentry.nxdl.xml:/USER
NXuser.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER):
DEBUG - 
                Contact information of at least the user of the instrument or the
                investigator who performed this experiment. Adding multiple users if
                relevant is recommended.
            
DEBUG - documentation (NXentry.nxdl.xml:/USER):
DEBUG - 
DEBUG - documentation (NXuser.nxdl.xml:):
DEBUG - 
		Contact information for a user.  
		
		The format allows more 
		than one user with the same affiliation and contact information, 
		but a second :ref:`NXuser` group should be used if they have different 
		affiliations, etc.
	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/user@NX_class)
DEBUG - value: NXuser 
DEBUG - classpath: ['NXentry', 'NXuser']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER
NXentry.nxdl.xml:/USER
NXuser.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== FIELD (//entry/user/affiliation): <HDF5 dataset "affiliation": shape (2,), type "|O">
DEBUG - value: ['Dr. Cojal González, José David (HU)' 'Prof. Carlos-Andres Palma (HU)'] 
DEBUG - classpath: ['NXentry', 'NXuser', 'NX_CHAR']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/affiliation
NXuser.nxdl.xml:/affiliation
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/affiliation):
DEBUG - 
                    Name of the affiliation of the user at the point in time when
                    the experiment was performed.
                
DEBUG - documentation (NXuser.nxdl.xml:/affiliation):
DEBUG - Affiliation of user
DEBUG - ===== FIELD (//entry/user/email): <HDF5 dataset "email": shape (3,), type "|O">
DEBUG - value: ['mozumder@physik.hu-berlin.de' 'Dr. Cojal González, José David (HU)' ...
DEBUG - classpath: ['NXentry', 'NXuser', 'NX_CHAR']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/email
NXuser.nxdl.xml:/email
DEBUG - <<RECOMMENDED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/email):
DEBUG - 
                    Email address of the user.
                
DEBUG - documentation (NXuser.nxdl.xml:/email):
DEBUG - Email of user
DEBUG - ===== FIELD (//entry/user/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG - value: Rubel Mozumder 
DEBUG - classpath: ['NXentry', 'NXuser', 'NX_CHAR']
DEBUG - classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/name
NXuser.nxdl.xml:/name
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/name):
DEBUG - 
                    Name of the user.
                
DEBUG - documentation (NXuser.nxdl.xml:/name):
DEBUG - Name of user responsible for this entry
DEBUG - ===== GROUP (//entry/z_backward [NXstm::/NXentry/NXdata]): <HDF5 group "/entry/z_backward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                The data group.
            
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG - documentation (NXentry.nxdl.xml:/DATA):
DEBUG - 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/z_backward@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/z_backward@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/z_backward@signal)
DEBUG - value: topography_backward 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/z_backward@target)
DEBUG - value: /entry/z_backward 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/z_backward@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/z_backward@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/z_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/z_backward/topography_backward): <HDF5 dataset "topography_backward": shape (512, 512), type "<i4">
DEBUG - value: [571444632 571454832 571472750 571450168 571407349 571356662 571351217 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG - 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/z_backward/topography_backward@long_name)
DEBUG - value: Topography_backward (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/z_backward/topography_backward@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/z_backward/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/z_backward/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/z_backward/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/z_backward/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/z_backward/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/z_backward/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== GROUP (//entry/z_forward [NXstm::/NXentry/NXdata]): <HDF5 group "/entry/z_forward" (4 members)>
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - <<REQUIRED>>
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                The data group.
            
DEBUG - documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG - 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG - documentation (NXentry.nxdl.xml:/DATA):
DEBUG - 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG - documentation (NXobject.nxdl.xml:/DATA):
DEBUG - 
DEBUG - documentation (NXdata.nxdl.xml:):
DEBUG - 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG - documentation (NXobject.nxdl.xml:):
DEBUG - 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG - ===== ATTRS (//entry/z_forward@NX_class)
DEBUG - value: NXdata 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @NX_class [NX_CHAR]
DEBUG - 
DEBUG - ===== ATTRS (//entry/z_forward@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/axes):
DEBUG - 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG - ===== ATTRS (//entry/z_forward@signal)
DEBUG - value: topography_forward 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/signal):
DEBUG - 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG - ===== ATTRS (//entry/z_forward@target)
DEBUG - value: /entry/z_forward 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @target - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/z_forward@x_indices)
DEBUG - value: 0 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @x_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== ATTRS (//entry/z_forward@y_indices)
DEBUG - value: 1 
DEBUG - classpath: ['NXentry', 'NXdata']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG - @y_indices - IS NOT IN SCHEMA
DEBUG - 
DEBUG - ===== FIELD (//entry/z_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG - value: Title Data Group 0 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG - classes:
NXdata.nxdl.xml:/title
DEBUG - <<OPTIONAL>>
DEBUG - documentation (NXdata.nxdl.xml:/title):
DEBUG - 
			Title for the plot.
		
DEBUG - ===== FIELD (//entry/z_forward/topography_forward): <HDF5 dataset "topography_forward": shape (512, 512), type "<i4">
DEBUG - value: [571379072 571350418 571348439 571370482 571409081 571444477 571469445 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG - 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG - documentation (NXdata.nxdl.xml:/DATA):
DEBUG - 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG - ===== ATTRS (//entry/z_forward/topography_forward@long_name)
DEBUG - value: Topography_forward (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG - data label
DEBUG - ===== ATTRS (//entry/z_forward/topography_forward@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG - ===== FIELD (//entry/z_forward/x): <HDF5 dataset "x": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/z_forward/x@long_name)
DEBUG - value: x (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/z_forward/x@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #0
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ===== FIELD (//entry/z_forward/y): <HDF5 dataset "y": shape (512,), type "<f8">
DEBUG - value: [0.00000000e+00 9.76562511e-11 1.95312502e-10 2.92968753e-10 ...
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - <<REQUIRED>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG - 
                    The name of the axis that corresponds to the data field.
                
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG - 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG - ===== ATTRS (//entry/z_forward/y@long_name)
DEBUG - value: y (meter) 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXdata.nxdl.xml:/AXISNAME@long_name - [NX_CHAR]
DEBUG - <<OPTIONAL>>
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/long_name):
DEBUG - Axis label
DEBUG - ===== ATTRS (//entry/z_forward/y@units)
DEBUG - value: meter 
DEBUG - classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG - classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG - NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG - NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG - Dataset referenced as NXdata AXIS #1
DEBUG - documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG - 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG - ========================
DEBUG - === Default Plotable ===
DEBUG - ========================
DEBUG - 
DEBUG - NXentry has been identified: /entry
DEBUG - 
DEBUG - NXdata group has been identified: /entry/current_forward
DEBUG - ===== GROUP (//entry/current_forward [NXstm::/NXentry/NXdata]): <HDF5 group "/entry/current_forward" (4 members)>
DEBUG - ===== ATTRS (//entry/current_forward@NX_class)
DEBUG - value: NXdata 
DEBUG - ===== ATTRS (//entry/current_forward@axes)
DEBUG - value: ['x' 'y'] 
DEBUG - ===== ATTRS (//entry/current_forward@signal)
DEBUG - value: current 
DEBUG - ===== ATTRS (//entry/current_forward@target)
DEBUG - value: /entry/current_forward 
DEBUG - ===== ATTRS (//entry/current_forward@x_indices)
DEBUG - value: 0 
DEBUG - ===== ATTRS (//entry/current_forward@y_indices)
DEBUG - value: 1 
DEBUG - 
DEBUG - Signal has been identified: /entry/current_forward/current
DEBUG - ===== FIELD (//entry/current_forward/current): <HDF5 dataset "current": shape (512, 512), type "<i4">
DEBUG - value: [-100055201 -110339805  -57667645  -46606777  -40990747  -69971120 ...
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - ===== ATTRS (//entry/current_forward/current@long_name)
DEBUG - value: Current (ampere) 
DEBUG - Dataset referenced as NXdata SIGNAL
DEBUG - ===== ATTRS (//entry/current_forward/current@units)
DEBUG - value: ampere 
DEBUG - 
DEBUG - For Axis #0, 1 axes have been identified: [<HDF5 dataset "x": shape (512,), type "<f8">]
DEBUG - 
DEBUG - For Axis #1, 1 axes have been identified: [<HDF5 dataset "y": shape (512,), type "<f8">]
