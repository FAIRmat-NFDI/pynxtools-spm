===== GROUP (// [NXroot::]): <HDF5 file "afm_4_with_described_nxdata.nxs" (mode r)>
DEBUG: ===== GROUP (// [NXroot::]): <HDF5 file "afm_4_with_described_nxdata.nxs" (mode r)>
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:):
DEBUG: documentation (NXroot.nxdl.xml:):

        The root of a NeXus file.

        In the NeXus standard, only NXentry groups are allowed at the
        root level of a file, although it is permitted to include
        additional groups and fields that are not part of the NeXus
        standard and will not be validated by NeXus tools. NeXus defines
        a number of root-level attributes that can be used to annotate
        the NeXus tree.

        Note that NXroot is the only base class that does not inherit
        from the NXobject class, since the latter permits the inclusion
        of NeXus objects that are not allowed at the root level.
    
DEBUG: 
        The root of a NeXus file.

        In the NeXus standard, only NXentry groups are allowed at the
        root level of a file, although it is permitted to include
        additional groups and fields that are not part of the NeXus
        standard and will not be validated by NeXus tools. NeXus defines
        a number of root-level attributes that can be used to annotate
        the NeXus tree.

        Note that NXroot is the only base class that does not inherit
        from the NXobject class, since the latter permits the inclusion
        of NeXus objects that are not allowed at the root level.
    
===== ATTRS (//@HDF5_Version)
DEBUG: ===== ATTRS (//@HDF5_Version)
value: 1.14.6
DEBUG: value: 1.14.6
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
NXroot.nxdl.xml:@HDF5_Version - [NX_CHAR]
DEBUG: NXroot.nxdl.xml:@HDF5_Version - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:/HDF5_Version):
DEBUG: documentation (NXroot.nxdl.xml:/HDF5_Version):

            Version of HDF5 library used in writing the file.

            Note this attribute is spelled with uppercase "V",
            different than other version attributes.
        
DEBUG: 
            Version of HDF5 library used in writing the file.

            Note this attribute is spelled with uppercase "V",
            different than other version attributes.
        
===== ATTRS (//@NX_class)
DEBUG: ===== ATTRS (//@NX_class)
value: NXroot
DEBUG: value: NXroot
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//@NeXus_release)
DEBUG: ===== ATTRS (//@NeXus_release)
value: v2024.02.post1.dev1996+g6cfc2d2e
DEBUG: value: v2024.02.post1.dev1996+g6cfc2d2e
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
NXroot.nxdl.xml:@NeXus_release - [NX_CHAR]
DEBUG: NXroot.nxdl.xml:@NeXus_release - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:/NeXus_release):
DEBUG: documentation (NXroot.nxdl.xml:/NeXus_release):

            The version of NeXus definitions used in writing the file. This can either be a date-based
            NeXus release (e.g., YYYY.MM), see https://github.com/nexusformat/definitions/releases or
            a version tag that includes additional development information, such as a commit distance and
            a Git hash. This is typically formatted as  `vYYYY.MM.post1.dev<commit-distance>-g<git-hash>`,
            where `YYYY.MM` refers to the base version of the NeXus definitions. `post1.dev<commit-distance>` 
            indicates that the definitions are based on a commit after the base version (post1), with
            `<commit-distance>` being the number of commits since that version. `g<git-hash>` is the 
            abbreviated Git hash that identifies the specific commit of the definitions being used.

            If the version includes both a commit distance and a Git hash, the ``NeXus_repository`` 
            attribute must be included, specifying the URL of the repository containing that version.
        
DEBUG: 
            The version of NeXus definitions used in writing the file. This can either be a date-based
            NeXus release (e.g., YYYY.MM), see https://github.com/nexusformat/definitions/releases or
            a version tag that includes additional development information, such as a commit distance and
            a Git hash. This is typically formatted as  `vYYYY.MM.post1.dev<commit-distance>-g<git-hash>`,
            where `YYYY.MM` refers to the base version of the NeXus definitions. `post1.dev<commit-distance>` 
            indicates that the definitions are based on a commit after the base version (post1), with
            `<commit-distance>` being the number of commits since that version. `g<git-hash>` is the 
            abbreviated Git hash that identifies the specific commit of the definitions being used.

            If the version includes both a commit distance and a Git hash, the ``NeXus_repository`` 
            attribute must be included, specifying the URL of the repository containing that version.
        
===== ATTRS (//@NeXus_repository)
DEBUG: ===== ATTRS (//@NeXus_repository)
value: https://github.com/FAIRmat-NFDI/nexus_definitions/blob/6cfc2d2e
DEBUG: value: https://github.com/FAIRmat-NFDI/nexus_definitions/blob/6cfc2d2e
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
NXroot.nxdl.xml:@NeXus_repository - [NX_CHAR]
DEBUG: NXroot.nxdl.xml:@NeXus_repository - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:/NeXus_repository):
DEBUG: documentation (NXroot.nxdl.xml:/NeXus_repository):

            A repository containing the application definitions
            used for creating this file.
            If the ``NeXus_release`` attribute contains a commit distance and hash,
            this should refer to this repository.
        
DEBUG: 
            A repository containing the application definitions
            used for creating this file.
            If the ``NeXus_release`` attribute contains a commit distance and hash,
            this should refer to this repository.
        
===== ATTRS (//@file_name)
DEBUG: ===== ATTRS (//@file_name)
value: afm_4_with_described_nxdata.nxs
DEBUG: value: afm_4_with_described_nxdata.nxs
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
NXroot.nxdl.xml:@file_name - [NX_CHAR]
DEBUG: NXroot.nxdl.xml:@file_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:/file_name):
DEBUG: documentation (NXroot.nxdl.xml:/file_name):
File name of original NeXus file
DEBUG: File name of original NeXus file
===== ATTRS (//@file_time)
DEBUG: ===== ATTRS (//@file_time)
value: 2025-10-20 12:50:39.934224+02:00
DEBUG: value: 2025-10-20 12:50:39.934224+02:00
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
NXroot.nxdl.xml:@file_time - [NX_DATE_TIME]
DEBUG: NXroot.nxdl.xml:@file_time - [NX_DATE_TIME]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:/file_time):
DEBUG: documentation (NXroot.nxdl.xml:/file_time):
Date and time file was originally created
DEBUG: Date and time file was originally created
===== ATTRS (//@file_update_time)
DEBUG: ===== ATTRS (//@file_update_time)
value: 2025-10-20 12:50:39.934224+02:00
DEBUG: value: 2025-10-20 12:50:39.934224+02:00
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
NXroot.nxdl.xml:@file_update_time - [NX_DATE_TIME]
DEBUG: NXroot.nxdl.xml:@file_update_time - [NX_DATE_TIME]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:/file_update_time):
DEBUG: documentation (NXroot.nxdl.xml:/file_update_time):
Date and time of last file change at close
DEBUG: Date and time of last file change at close
===== ATTRS (//@h5py_version)
DEBUG: ===== ATTRS (//@h5py_version)
value: 3.14.0
DEBUG: value: 3.14.0
classpath: ['']
DEBUG: classpath: ['']
classes:
NXroot.nxdl.xml:
DEBUG: classes:
NXroot.nxdl.xml:
NXroot.nxdl.xml:@h5py_version - [NX_CHAR]
DEBUG: NXroot.nxdl.xml:@h5py_version - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXroot.nxdl.xml:/h5py_version):
DEBUG: documentation (NXroot.nxdl.xml:/h5py_version):
Version of h5py Python package used in writing the file
DEBUG: Version of h5py Python package used in writing the file
===== GROUP (//entry [NXafm::/NXentry]): <HDF5 group "/entry" (17 members)>
DEBUG: ===== GROUP (//entry [NXafm::/NXentry]): <HDF5 group "/entry" (17 members)>
classpath: ['NXentry']
DEBUG: classpath: ['NXentry']
classes:
NXafm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXafm.nxdl.xml:/ENTRY):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY):

DEBUG: 
documentation (NXspm.nxdl.xml:/ENTRY):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY):

DEBUG: 
documentation (NXsensor_scan.nxdl.xml:/ENTRY):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY):

DEBUG: 
documentation (NXentry.nxdl.xml:):
DEBUG: documentation (NXentry.nxdl.xml:):

		(**required**) :ref:`NXentry` describes the measurement.

		The top-level NeXus group which contains all the data and associated
		information that comprise a single measurement.
		It is mandatory that there is at least one
		group of this type in the NeXus file.	
DEBUG: 
		(**required**) :ref:`NXentry` describes the measurement.

		The top-level NeXus group which contains all the data and associated
		information that comprise a single measurement.
		It is mandatory that there is at least one
		group of this type in the NeXus file.	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry@NX_class)
DEBUG: ===== ATTRS (//entry@NX_class)
value: NXentry
DEBUG: value: NXentry
classpath: ['NXentry']
DEBUG: classpath: ['NXentry']
classes:
NXafm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry@default)
DEBUG: ===== ATTRS (//entry@default)
value: current_forward
DEBUG: value: current_forward
classpath: ['NXentry']
DEBUG: classpath: ['NXentry']
classes:
NXafm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY
NXspm.nxdl.xml:/ENTRY
NXsensor_scan.nxdl.xml:/ENTRY
NXentry.nxdl.xml:
NXobject.nxdl.xml:
NXafm.nxdl.xml:/ENTRY@default - [NX_CHAR]
DEBUG: NXafm.nxdl.xml:/ENTRY@default - [NX_CHAR]
NXspm.nxdl.xml:/ENTRY@default - [NX_CHAR]
DEBUG: NXspm.nxdl.xml:/ENTRY@default - [NX_CHAR]
NXsensor_scan.nxdl.xml:/ENTRY@default - [NX_CHAR]
DEBUG: NXsensor_scan.nxdl.xml:/ENTRY@default - [NX_CHAR]
documentation (NXsensor_scan.nxdl.xml:/ENTRY/default):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/default):

                .. index:: plotting
                
                Declares which child group contains a path leading
                to a :ref:`NXdata` group.
                
                It is recommended (as of NIAC2014) to use this attribute
                to help define the path to the default dataset to be visualized upon entry.
                See https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
            
DEBUG: 
                .. index:: plotting
                
                Declares which child group contains a path leading
                to a :ref:`NXdata` group.
                
                It is recommended (as of NIAC2014) to use this attribute
                to help define the path to the default dataset to be visualized upon entry.
                See https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
            
NXentry.nxdl.xml:@default - [NX_CHAR]
DEBUG: NXentry.nxdl.xml:@default - [NX_CHAR]
documentation (NXentry.nxdl.xml:/default):
DEBUG: documentation (NXentry.nxdl.xml:/default):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: default attribute value

			Declares which :ref:`NXdata` group contains the data
			to be shown by default.
			It is used to resolve ambiguity when
			one :ref:`NXdata` group exists.
			The value :ref:`names <validItemName>` a child group.  If that group
			itself has a ``default`` attribute, continue this chain until an
			:ref:`NXdata` group is reached.

			For more information about how NeXus identifies the default
			plottable data, see the
			:ref:`Find Plottable Data, v3 <Find-Plottable-Data-v3>`
			section.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: default attribute value

			Declares which :ref:`NXdata` group contains the data
			to be shown by default.
			It is used to resolve ambiguity when
			one :ref:`NXdata` group exists.
			The value :ref:`names <validItemName>` a child group.  If that group
			itself has a ``default`` attribute, continue this chain until an
			:ref:`NXdata` group is reached.

			For more information about how NeXus identifies the default
			plottable data, see the
			:ref:`Find Plottable Data, v3 <Find-Plottable-Data-v3>`
			section.
		
NXobject.nxdl.xml:@default - [NX_CHAR]
DEBUG: NXobject.nxdl.xml:@default - [NX_CHAR]
documentation (NXobject.nxdl.xml:/default):
DEBUG: documentation (NXobject.nxdl.xml:/default):

			.. index:: plotting

			Declares which child group contains a path leading
			to a :ref:`NXdata` group or a group using a base class
			extending :ref:`NXdata`.

			It is recommended (as of NIAC2014) to use this attribute
			to help define the path to the default dataset to be plotted.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
        
DEBUG: 
			.. index:: plotting

			Declares which child group contains a path leading
			to a :ref:`NXdata` group or a group using a base class
			extending :ref:`NXdata`.

			It is recommended (as of NIAC2014) to use this attribute
			to help define the path to the default dataset to be plotted.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
        
===== GROUP (//entry/current_backward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/current_backward" (4 members)>
DEBUG: ===== GROUP (//entry/current_backward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/current_backward" (4 members)>
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA):

                The data group.
            
DEBUG: 
                The data group.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):

                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG: 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
documentation (NXentry.nxdl.xml:/DATA):
DEBUG: documentation (NXentry.nxdl.xml:/DATA):

			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG: 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/current_backward@NX_class)
DEBUG: ===== ATTRS (//entry/current_backward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/current_backward@axes)
DEBUG: ===== ATTRS (//entry/current_backward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/current_backward@signal)
DEBUG: ===== ATTRS (//entry/current_backward@signal)
value: current
DEBUG: value: current
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/current_backward@x_indices)
DEBUG: ===== ATTRS (//entry/current_backward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/current_backward@y_indices)
DEBUG: ===== ATTRS (//entry/current_backward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/current_backward/current): <HDF5 dataset "current": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/current_backward/current): <HDF5 dataset "current": shape (128, 128), type ">f4">
value: [-9.50889944e-15, -2.74032065e-14, -1.69527630e-14, ..., -1.20854110e-14, -8.21634834e-15, -1.04400622e-14]
DEBUG: value: [-9.50889944e-15, -2.74032065e-14, -1.69527630e-14, ..., -1.20854110e-14, -8.21634834e-15, -1.04400622e-14]
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):

                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG: 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/current_backward/current@long_name)
DEBUG: ===== ATTRS (//entry/current_backward/current@long_name)
value: current (ampere)
DEBUG: value: current (ampere)
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/current_backward/current@units)
DEBUG: ===== ATTRS (//entry/current_backward/current@units)
value: ampere
DEBUG: value: ampere
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/current_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/current_backward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/current_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/current_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/current_backward/x@units)
DEBUG: ===== ATTRS (//entry/current_backward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/current_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/current_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/current_backward/y@units)
DEBUG: ===== ATTRS (//entry/current_backward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/current_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/current_forward" (4 members)>
DEBUG: ===== GROUP (//entry/current_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/current_forward" (4 members)>
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA):

                The data group.
            
DEBUG: 
                The data group.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):

                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG: 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
documentation (NXentry.nxdl.xml:/DATA):
DEBUG: documentation (NXentry.nxdl.xml:/DATA):

			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG: 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/current_forward@NX_class)
DEBUG: ===== ATTRS (//entry/current_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/current_forward@axes)
DEBUG: ===== ATTRS (//entry/current_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/current_forward@signal)
DEBUG: ===== ATTRS (//entry/current_forward@signal)
value: current
DEBUG: value: current
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/current_forward@x_indices)
DEBUG: ===== ATTRS (//entry/current_forward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/current_forward@y_indices)
DEBUG: ===== ATTRS (//entry/current_forward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/current_forward/current): <HDF5 dataset "current": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/current_forward/current): <HDF5 dataset "current": shape (128, 128), type ">f4">
value: [-1.73500486e-14, -1.45325053e-14, -1.88572319e-14, ..., -9.70792592e-15, -8.53756187e-15, -8.61566254e-15]
DEBUG: value: [-1.73500486e-14, -1.45325053e-14, -1.88572319e-14, ..., -9.70792592e-15, -8.53756187e-15, -8.61566254e-15]
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):

                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG: 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/current_forward/current@long_name)
DEBUG: ===== ATTRS (//entry/current_forward/current@long_name)
value: current (ampere)
DEBUG: value: current (ampere)
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/current_forward/current@units)
DEBUG: ===== ATTRS (//entry/current_forward/current@units)
value: ampere
DEBUG: value: ampere
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/current_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/current_forward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/current_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/current_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/current_forward/x@units)
DEBUG: ===== ATTRS (//entry/current_forward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/current_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/current_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/current_forward/y@units)
DEBUG: ===== ATTRS (//entry/current_forward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/definition): <HDF5 dataset "definition": shape (), type "|O">
DEBUG: ===== FIELD (//entry/definition): <HDF5 dataset "definition": shape (), type "|O">
value: NXafm
DEBUG: value: NXafm
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXafm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
<<REQUIRED>>
DEBUG: <<REQUIRED>>
enumeration (NXafm.nxdl.xml:/ENTRY/definition):
DEBUG: enumeration (NXafm.nxdl.xml:/ENTRY/definition):
-> NXafm
DEBUG: -> NXafm
enumeration (NXspm.nxdl.xml:/ENTRY/definition):
DEBUG: enumeration (NXspm.nxdl.xml:/ENTRY/definition):
-> NXspm
DEBUG: -> NXspm
enumeration (NXsensor_scan.nxdl.xml:/ENTRY/definition):
DEBUG: enumeration (NXsensor_scan.nxdl.xml:/ENTRY/definition):
-> NXsensor_scan
DEBUG: -> NXsensor_scan
documentation (NXafm.nxdl.xml:/ENTRY/definition):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/definition):

                Name of the definition that is used for the application.
            
DEBUG: 
                Name of the definition that is used for the application.
            
documentation (NXspm.nxdl.xml:/ENTRY/definition):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/definition):

                Name of the definition that is used for the application.
            
DEBUG: 
                Name of the definition that is used for the application.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/definition):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/definition):

DEBUG: 
documentation (NXentry.nxdl.xml:/definition):
DEBUG: documentation (NXentry.nxdl.xml:/definition):

			(alternate use: see same field in :ref:`NXsubentry` for preferred)
			
			Official NeXus NXDL schema to which this entry conforms which must be
			the name of the NXDL file (case sensitive without the file extension)
			that the NXDL schema is defined in. 
			
			For example the ``definition`` field for a file that conformed to the 
			*NXarpes.nxdl.xml* definition must contain the string **NXarpes**.
			
			This field is provided so that :ref:`NXentry` can be the overlay position
			in a NeXus data file for an application definition and its
			set of groups, fields, and attributes.

			*It is advised* to use :ref:`NXsubentry`, instead, as the overlay position.
		
DEBUG: 
			(alternate use: see same field in :ref:`NXsubentry` for preferred)
			
			Official NeXus NXDL schema to which this entry conforms which must be
			the name of the NXDL file (case sensitive without the file extension)
			that the NXDL schema is defined in. 
			
			For example the ``definition`` field for a file that conformed to the 
			*NXarpes.nxdl.xml* definition must contain the string **NXarpes**.
			
			This field is provided so that :ref:`NXentry` can be the overlay position
			in a NeXus data file for an application definition and its
			set of groups, fields, and attributes.

			*It is advised* to use :ref:`NXsubentry`, instead, as the overlay position.
		
===== ATTRS (//entry/definition@URL)
DEBUG: ===== ATTRS (//entry/definition@URL)
value: https://github.com/FAIRmat-NFDI/nexus_definitions/blob/6cfc2d2e
DEBUG: value: https://github.com/FAIRmat-NFDI/nexus_definitions/blob/6cfc2d2e
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXafm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
NXentry.nxdl.xml:/definition@URL - [NX_CHAR]
DEBUG: NXentry.nxdl.xml:/definition@URL - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXentry.nxdl.xml:/definition/URL):
DEBUG: documentation (NXentry.nxdl.xml:/definition/URL):
URL of NXDL file
DEBUG: URL of NXDL file
===== ATTRS (//entry/definition@version)
DEBUG: ===== ATTRS (//entry/definition@version)
value: v2024.02.post1.dev1996+g6cfc2d2e
DEBUG: value: v2024.02.post1.dev1996+g6cfc2d2e
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXafm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/definition
NXspm.nxdl.xml:/ENTRY/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition
NXentry.nxdl.xml:/definition
NXsensor_scan.nxdl.xml:/ENTRY/definition@version - [NX_CHAR]
DEBUG: NXsensor_scan.nxdl.xml:/ENTRY/definition@version - [NX_CHAR]
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/definition/version):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/definition/version):

DEBUG: 
NXentry.nxdl.xml:/definition@version - [NX_CHAR]
DEBUG: NXentry.nxdl.xml:/definition@version - [NX_CHAR]
documentation (NXentry.nxdl.xml:/definition/version):
DEBUG: documentation (NXentry.nxdl.xml:/definition/version):
NXDL version number
DEBUG: NXDL version number
===== FIELD (//entry/end_time): <HDF5 dataset "end_time": shape (), type "|O">
DEBUG: ===== FIELD (//entry/end_time): <HDF5 dataset "end_time": shape (), type "|O">
value: 2015-12-16T12:33:05+01:00
DEBUG: value: 2015-12-16T12:33:05+01:00
classpath: ['NXentry', 'NX_DATE_TIME']
DEBUG: classpath: ['NXentry', 'NX_DATE_TIME']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/end_time
NXentry.nxdl.xml:/end_time
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/end_time
NXentry.nxdl.xml:/end_time
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/end_time):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/end_time):

                The end time of the experiment.
            
DEBUG: 
                The end time of the experiment.
            
documentation (NXentry.nxdl.xml:/end_time):
DEBUG: documentation (NXentry.nxdl.xml:/end_time):
Ending time of measurement
DEBUG: Ending time of measurement
===== GROUP (//entry/excitation_backward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/excitation_backward" (4 members)>
DEBUG: ===== GROUP (//entry/excitation_backward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/excitation_backward" (4 members)>
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA):

                The data group.
            
DEBUG: 
                The data group.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):

                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG: 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
documentation (NXentry.nxdl.xml:/DATA):
DEBUG: documentation (NXentry.nxdl.xml:/DATA):

			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG: 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/excitation_backward@NX_class)
DEBUG: ===== ATTRS (//entry/excitation_backward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/excitation_backward@axes)
DEBUG: ===== ATTRS (//entry/excitation_backward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/excitation_backward@signal)
DEBUG: ===== ATTRS (//entry/excitation_backward@signal)
value: excitation
DEBUG: value: excitation
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/excitation_backward@x_indices)
DEBUG: ===== ATTRS (//entry/excitation_backward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/excitation_backward@y_indices)
DEBUG: ===== ATTRS (//entry/excitation_backward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/excitation_backward/excitation): <HDF5 dataset "excitation": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/excitation_backward/excitation): <HDF5 dataset "excitation": shape (128, 128), type ">f4">
value: [-0.0074797, 0.0144282, 0.00337177, ..., 0.00740978, 0.00211063, 0.01540442]
DEBUG: value: [-0.0074797, 0.0144282, 0.00337177, ..., 0.00740978, 0.00211063, 0.01540442]
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):

                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG: 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/excitation_backward/excitation@long_name)
DEBUG: ===== ATTRS (//entry/excitation_backward/excitation@long_name)
value: excitation (volt)
DEBUG: value: excitation (volt)
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/excitation_backward/excitation@units)
DEBUG: ===== ATTRS (//entry/excitation_backward/excitation@units)
value: volt
DEBUG: value: volt
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/excitation_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/excitation_backward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/excitation_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/excitation_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/excitation_backward/x@units)
DEBUG: ===== ATTRS (//entry/excitation_backward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/excitation_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/excitation_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/excitation_backward/y@units)
DEBUG: ===== ATTRS (//entry/excitation_backward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/excitation_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/excitation_forward" (4 members)>
DEBUG: ===== GROUP (//entry/excitation_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/excitation_forward" (4 members)>
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA):

                The data group.
            
DEBUG: 
                The data group.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):

                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG: 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
documentation (NXentry.nxdl.xml:/DATA):
DEBUG: documentation (NXentry.nxdl.xml:/DATA):

			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG: 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/excitation_forward@NX_class)
DEBUG: ===== ATTRS (//entry/excitation_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/excitation_forward@axes)
DEBUG: ===== ATTRS (//entry/excitation_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/excitation_forward@signal)
DEBUG: ===== ATTRS (//entry/excitation_forward@signal)
value: excitation
DEBUG: value: excitation
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/excitation_forward@x_indices)
DEBUG: ===== ATTRS (//entry/excitation_forward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/excitation_forward@y_indices)
DEBUG: ===== ATTRS (//entry/excitation_forward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/excitation_forward/excitation): <HDF5 dataset "excitation": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/excitation_forward/excitation): <HDF5 dataset "excitation": shape (128, 128), type ">f4">
value: [0.00650077, 0.0038855, 0.00741272, ..., 0.00715316, 0.00912067, 0.00589665]
DEBUG: value: [0.00650077, 0.0038855, 0.00741272, ..., 0.00715316, 0.00912067, 0.00589665]
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):

                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG: 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/excitation_forward/excitation@long_name)
DEBUG: ===== ATTRS (//entry/excitation_forward/excitation@long_name)
value: excitation (volt)
DEBUG: value: excitation (volt)
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/excitation_forward/excitation@units)
DEBUG: ===== ATTRS (//entry/excitation_forward/excitation@units)
value: volt
DEBUG: value: volt
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/excitation_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/excitation_forward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/excitation_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/excitation_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/excitation_forward/x@units)
DEBUG: ===== ATTRS (//entry/excitation_forward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/excitation_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/excitation_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/excitation_forward/y@units)
DEBUG: ===== ATTRS (//entry/excitation_forward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/experiment_description): <HDF5 dataset "experiment_description": shape (), type "|O">
DEBUG: ===== FIELD (//entry/experiment_description): <HDF5 dataset "experiment_description": shape (), type "|O">
value: <p>An demo NeXus example for AFM.&nbsp;</p>
DEBUG: value: <p>An demo NeXus example for AFM.&nbsp;</p>
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/experiment_description
NXentry.nxdl.xml:/experiment_description
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/experiment_description
NXentry.nxdl.xml:/experiment_description
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/experiment_description):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/experiment_description):

DEBUG: 
documentation (NXentry.nxdl.xml:/experiment_description):
DEBUG: documentation (NXentry.nxdl.xml:/experiment_description):
Brief summary of the experiment, including key objectives.
DEBUG: Brief summary of the experiment, including key objectives.
===== FIELD (//entry/experiment_technique): <HDF5 dataset "experiment_technique": shape (), type "|O">
DEBUG: ===== FIELD (//entry/experiment_technique): <HDF5 dataset "experiment_technique": shape (), type "|O">
value: AFM
DEBUG: value: AFM
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXafm.nxdl.xml:/ENTRY/experiment_technique
NXspm.nxdl.xml:/ENTRY/experiment_technique
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/experiment_technique
NXspm.nxdl.xml:/ENTRY/experiment_technique
<<REQUIRED>>
DEBUG: <<REQUIRED>>
enumeration (NXafm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG: enumeration (NXafm.nxdl.xml:/ENTRY/experiment_technique):
-> AFM
DEBUG: -> AFM
enumeration (NXspm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG: enumeration (NXspm.nxdl.xml:/ENTRY/experiment_technique):
-> STM
DEBUG: -> STM
-> STS
DEBUG: -> STS
-> AFM
DEBUG: -> AFM
documentation (NXafm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/experiment_technique):

                The AFM technique.
            
DEBUG: 
                The AFM technique.
            
documentation (NXspm.nxdl.xml:/ENTRY/experiment_technique):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/experiment_technique):

                The technique of the experiment like STM, STS, AFM.
            
DEBUG: 
                The technique of the experiment like STM, STS, AFM.
            
===== FIELD (//entry/identifier_collection): <HDF5 dataset "identifier_collection": shape (), type "|O">
DEBUG: ===== FIELD (//entry/identifier_collection): <HDF5 dataset "identifier_collection": shape (), type "|O">
value: D:\\Data\\123306
DEBUG: value: D:\\Data\\123306
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/identifier_collection
NXentry.nxdl.xml:/identifier_collection
NXobject.nxdl.xml:/identifierNAME
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/identifier_collection
NXentry.nxdl.xml:/identifier_collection
NXobject.nxdl.xml:/identifierNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/identifier_collection):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/identifier_collection):

                The unique identifier for the collection. The identifier is used to group a
                number of the experiments run upon the same setup and/or same sample.
            
DEBUG: 
                The unique identifier for the collection. The identifier is used to group a
                number of the experiments run upon the same setup and/or same sample.
            
documentation (NXentry.nxdl.xml:/identifier_collection):
DEBUG: documentation (NXentry.nxdl.xml:/identifier_collection):
User or Data Acquisition defined group of NeXus files or NXentry
DEBUG: User or Data Acquisition defined group of NeXus files or NXentry
documentation (NXobject.nxdl.xml:/identifierNAME):
DEBUG: documentation (NXobject.nxdl.xml:/identifierNAME):

			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
DEBUG: 
			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
===== FIELD (//entry/identifier_experiment): <HDF5 dataset "identifier_experiment": shape (), type "|O">
DEBUG: ===== FIELD (//entry/identifier_experiment): <HDF5 dataset "identifier_experiment": shape (), type "|O">
value: D:\\Data\\123306\A151216.123306-02602
DEBUG: value: D:\\Data\\123306\A151216.123306-02602
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/identifier_experiment
NXsensor_scan.nxdl.xml:/ENTRY/identifier_experiment
NXentry.nxdl.xml:/identifier_experiment
NXobject.nxdl.xml:/identifierNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/identifier_experiment
NXsensor_scan.nxdl.xml:/ENTRY/identifier_experiment
NXentry.nxdl.xml:/identifier_experiment
NXobject.nxdl.xml:/identifierNAME
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/identifier_experiment):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/identifier_experiment):

                The identifier for the experiment which should be unique at least in lab.
            
DEBUG: 
                The identifier for the experiment which should be unique at least in lab.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/identifier_experiment):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/identifier_experiment):

                The unique identifier for the entry. The identifier is mainly lab-defined and
                can be a combination of the sample name, date and time, experiment condition
                (such as temperature) or instrument-generated unique identifier.
            
DEBUG: 
                The unique identifier for the entry. The identifier is mainly lab-defined and
                can be a combination of the sample name, date and time, experiment condition
                (such as temperature) or instrument-generated unique identifier.
            
documentation (NXentry.nxdl.xml:/identifier_experiment):
DEBUG: documentation (NXentry.nxdl.xml:/identifier_experiment):

			Unique identifier for the experiment,
			defined by the facility,
			possibly linked to the proposals
		
DEBUG: 
			Unique identifier for the experiment,
			defined by the facility,
			possibly linked to the proposals
		
documentation (NXobject.nxdl.xml:/identifierNAME):
DEBUG: documentation (NXobject.nxdl.xml:/identifierNAME):

			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
DEBUG: 
			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
===== GROUP (//entry/instrument [NXafm::/NXentry/NXinstrument]): <HDF5 group "/entry/instrument" (9 members)>
DEBUG: ===== GROUP (//entry/instrument [NXafm::/NXentry/NXinstrument]): <HDF5 group "/entry/instrument" (9 members)>
classpath: ['NXentry', 'NXinstrument']
DEBUG: classpath: ['NXentry', 'NXinstrument']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT
NXentry.nxdl.xml:/INSTRUMENT
NXinstrument.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT
NXentry.nxdl.xml:/INSTRUMENT
NXinstrument.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT):

DEBUG: 
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT):

DEBUG: 
documentation (NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT):

DEBUG: 
documentation (NXentry.nxdl.xml:/INSTRUMENT):
DEBUG: documentation (NXentry.nxdl.xml:/INSTRUMENT):

DEBUG: 
documentation (NXinstrument.nxdl.xml:):
DEBUG: documentation (NXinstrument.nxdl.xml:):

		Collection of the components of the instrument or beamline.
		
		Template of instrument descriptions comprising various beamline components. 
		Each component will also be a NeXus group defined by its distance from the 
		sample. Negative distances represent beamline components that are before the 
		sample while positive distances represent components that are after the sample. 
		This device allows the unique identification of beamline components in a way 
		that is valid for both reactor and pulsed instrumentation.
	
DEBUG: 
		Collection of the components of the instrument or beamline.
		
		Template of instrument descriptions comprising various beamline components. 
		Each component will also be a NeXus group defined by its distance from the 
		sample. Negative distances represent beamline components that are before the 
		sample while positive distances represent components that are after the sample. 
		This device allows the unique identification of beamline components in a way 
		that is valid for both reactor and pulsed instrumentation.
	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument@NX_class)
DEBUG: ===== ATTRS (//entry/instrument@NX_class)
value: NXinstrument
DEBUG: value: NXinstrument
classpath: ['NXentry', 'NXinstrument']
DEBUG: classpath: ['NXentry', 'NXinstrument']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT
NXentry.nxdl.xml:/INSTRUMENT
NXinstrument.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT
NXentry.nxdl.xml:/INSTRUMENT
NXinstrument.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/hardware [NXafm::/NXentry/NXinstrument/NXfabrication]): <HDF5 group "/entry/instrument/hardware" (3 members)>
DEBUG: ===== GROUP (//entry/instrument/hardware [NXafm::/NXentry/NXinstrument/NXfabrication]): <HDF5 group "/entry/instrument/hardware" (3 members)>
classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware):

                    The hardware description of core instrument setup of experiment.
                    Usually, the entire instrument is supplied by a single manufacturer.
                    To describe the hardware from any sub-components, use the ``hardware`` group of that
                    sub-component (child group of the NXinstrument group) group.
                
DEBUG: 
                    The hardware description of core instrument setup of experiment.
                    Usually, the entire instrument is supplied by a single manufacturer.
                    To describe the hardware from any sub-components, use the ``hardware`` group of that
                    sub-component (child group of the NXinstrument group) group.
                
documentation (NXinstrument.nxdl.xml:/FABRICATION):
DEBUG: documentation (NXinstrument.nxdl.xml:/FABRICATION):

DEBUG: 
documentation (NXfabrication.nxdl.xml:):
DEBUG: documentation (NXfabrication.nxdl.xml:):

         Details about a component as it is defined by its manufacturer.
    
DEBUG: 
         Details about a component as it is defined by its manufacturer.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/hardware@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/hardware@NX_class)
value: NXfabrication
DEBUG: value: NXfabrication
classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/hardware/model): <HDF5 dataset "model": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/hardware/model): <HDF5 dataset "model": shape (), type "|O">
value: Generic 4
DEBUG: value: Generic 4
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/model
NXfabrication.nxdl.xml:/model
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/model
NXfabrication.nxdl.xml:/model
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/model):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/model):

                        Version or model of the hardware setup provided by the manufacturer.
                    
DEBUG: 
                        Version or model of the hardware setup provided by the manufacturer.
                    
documentation (NXfabrication.nxdl.xml:/model):
DEBUG: documentation (NXfabrication.nxdl.xml:/model):

             Version or model of the component named by the manufacturer.
        
DEBUG: 
             Version or model of the component named by the manufacturer.
        
===== ATTRS (//entry/instrument/hardware/model@version)
DEBUG: ===== ATTRS (//entry/instrument/hardware/model@version)
value: 4
DEBUG: value: 4
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/model
NXfabrication.nxdl.xml:/model
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/model
NXfabrication.nxdl.xml:/model
NXfabrication.nxdl.xml:/model@version - [NX_CHAR]
DEBUG: NXfabrication.nxdl.xml:/model@version - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXfabrication.nxdl.xml:/model/version):
DEBUG: documentation (NXfabrication.nxdl.xml:/model/version):

                 If it is possible that different versions exist, the value in this field should be made
                 specific enough to resolve the version.
            
DEBUG: 
                 If it is possible that different versions exist, the value in this field should be made
                 specific enough to resolve the version.
            
===== FIELD (//entry/instrument/hardware/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/hardware/name): <HDF5 dataset "name": shape (), type "|O">
value: Nanonis
DEBUG: value: Nanonis
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/name
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/name
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/name):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/name):

                        Name of the hardware.
                    
DEBUG: 
                        Name of the hardware.
                    
===== FIELD (//entry/instrument/hardware/vendor): <HDF5 dataset "vendor": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/hardware/vendor): <HDF5 dataset "vendor": shape (), type "|O">
value: Nanonis
DEBUG: value: Nanonis
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/vendor
NXfabrication.nxdl.xml:/vendor
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/vendor
NXfabrication.nxdl.xml:/vendor
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/vendor):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/hardware/vendor):

                        Company name of the manufacturer.
                    
DEBUG: 
                        Company name of the manufacturer.
                    
documentation (NXfabrication.nxdl.xml:/vendor):
DEBUG: documentation (NXfabrication.nxdl.xml:/vendor):

             Company name of the manufacturer.
        
DEBUG: 
             Company name of the manufacturer.
        
===== GROUP (//entry/instrument/height_piezo_sensor [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor]): <HDF5 group "/entry/instrument/height_piezo_sensor" (3 members)>
DEBUG: ===== GROUP (//entry/instrument/height_piezo_sensor [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor]): <HDF5 group "/entry/instrument/height_piezo_sensor" (3 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor
NXspm_piezo_sensor.nxdl.xml:
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor
NXspm_piezo_sensor.nxdl.xml:
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor):

                    The sensor information for the height (Z-axis) piezo device.
                
DEBUG: 
                    The sensor information for the height (Z-axis) piezo device.
                
documentation (NXspm_piezo_sensor.nxdl.xml:):
DEBUG: documentation (NXspm_piezo_sensor.nxdl.xml:):

        This piezo sensor group refers to the height (or Z) piezo sensor.
    
DEBUG: 
        This piezo sensor group refers to the height (or Z) piezo sensor.
    
documentation (NXsensor.nxdl.xml:):
DEBUG: documentation (NXsensor.nxdl.xml:):

		A sensor used to monitor an external condition 
		
		The condition itself is described in :ref:`NXenvironment`.
	
DEBUG: 
		A sensor used to monitor an external condition 
		
		The condition itself is described in :ref:`NXenvironment`.
	
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/height_piezo_sensor@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor@NX_class)
value: NXspm_piezo_sensor
DEBUG: value: NXspm_piezo_sensor
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor
NXspm_piezo_sensor.nxdl.xml:
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/height_piezo_sensor
NXspm_piezo_sensor.nxdl.xml:
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config']
classes:
NXspm_piezo_sensor.nxdl.xml:/piezo_configuration
NXspm_piezo_config.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_sensor.nxdl.xml:/piezo_configuration
NXspm_piezo_config.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_sensor.nxdl.xml:/piezo_configuration):
DEBUG: documentation (NXspm_piezo_sensor.nxdl.xml:/piezo_configuration):

            The piezo configuration information like piezoelectric calibration and material
            properties.
        
DEBUG: 
            The piezo configuration information like piezoelectric calibration and material
            properties.
        
documentation (NXspm_piezo_config.nxdl.xml:):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:):

        A base class describing piezo actuator settings for scanning probe microscopy.
        
        Piezoelectric actuators work utilizing the inverse-piezoelectric effect, when a voltage
        is applied on the material and it deforms proportional to the applied voltage.
        Description below shows calibration coefficients and other configuration parameters of
        open loop piezo actuators (that is actuators without capacitive sensor feedback systems).
    
DEBUG: 
        A base class describing piezo actuator settings for scanning probe microscopy.
        
        Piezoelectric actuators work utilizing the inverse-piezoelectric effect, when a voltage
        is applied on the material and it deforms proportional to the applied voltage.
        Description below shows calibration coefficients and other configuration parameters of
        open loop piezo actuators (that is actuators without capacitive sensor feedback systems).
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration@NX_class)
value: NXspm_piezo_config
DEBUG: value: NXspm_piezo_config
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config']
classes:
NXspm_piezo_sensor.nxdl.xml:/piezo_configuration
NXspm_piezo_config.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_sensor.nxdl.xml:/piezo_configuration
NXspm_piezo_config.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config/NXcalibration]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration/calibration" (12 members)>
DEBUG: ===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config/NXcalibration]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration/calibration" (12 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration']
classes:
NXspm_piezo_config.nxdl.xml:/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration):

DEBUG: 
documentation (NXcalibration.nxdl.xml:):
DEBUG: documentation (NXcalibration.nxdl.xml:):

        Subclass of NXprocess to describe post-processing calibrations.
    
DEBUG: 
        Subclass of NXprocess to describe post-processing calibrations.
    
documentation (NXprocess.nxdl.xml:):
DEBUG: documentation (NXprocess.nxdl.xml:):

        The :ref:`NXprocess` class describes an operation used to
        process data as part of an analysis workflow, providing
        information such as the software used, the date of the
        operation, the input parameters, and the resulting data. 
    
DEBUG: 
        The :ref:`NXprocess` class describes an operation used to
        process data as part of an analysis workflow, providing
        information such as the software used, the date of the
        operation, the input parameters, and the resulting data. 
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration@NX_class)
value: NXcalibration
DEBUG: value: NXcalibration
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration']
classes:
NXspm_piezo_config.nxdl.xml:/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_name): <HDF5 dataset "calibration_name": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_name): <HDF5 dataset "calibration_name": shape (), type "|O">
value: 4K
DEBUG: value: 4K
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_CHAR']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_name
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_name
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_name):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_name):

                A specific name of the calibration (e.g. active type with name 'LHe').
            
DEBUG: 
                A specific name of the calibration (e.g. active type with name 'LHe').
            
===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config/NXcalibration/NXparameters]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters" (5 members)>
DEBUG: ===== GROUP (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_piezo_config/NXcalibration/NXparameters]): <HDF5 group "/entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters" (5 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters):

DEBUG: 
documentation (NXcalibration.nxdl.xml:/calibration_parameters):
DEBUG: documentation (NXcalibration.nxdl.xml:/calibration_parameters):

            Fit coefficients to be used in ``fit_formula_description``.
            
            As an example, for non-linear energy calibrations, e.g. in a time-of-flight (TOF) detector, a polynomial 
            function is fitted to a set of features (peaks) at well defined energy positions to determine
            E(TOF). Here we can store the fit coefficients for that procedure.
        
DEBUG: 
            Fit coefficients to be used in ``fit_formula_description``.
            
            As an example, for non-linear energy calibrations, e.g. in a time-of-flight (TOF) detector, a polynomial 
            function is fitted to a set of features (peaks) at well defined energy positions to determine
            E(TOF). Here we can store the fit coefficients for that procedure.
        
documentation (NXprocess.nxdl.xml:/PARAMETERS):
DEBUG: documentation (NXprocess.nxdl.xml:/PARAMETERS):

            Parameters used in performing the data analysis.
        
DEBUG: 
            Parameters used in performing the data analysis.
        
documentation (NXobject.nxdl.xml:/PARAMETERS):
DEBUG: documentation (NXobject.nxdl.xml:/PARAMETERS):

DEBUG: 
documentation (NXparameters.nxdl.xml:):
DEBUG: documentation (NXparameters.nxdl.xml:):
Container for parameters, usually used in processing or analysis.
DEBUG: Container for parameters, usually used in processing or analysis.
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters@NX_class)
value: NXparameters
DEBUG: value: NXparameters
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_x): <HDF5 dataset "coefficient_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_x): <HDF5 dataset "coefficient_x": shape (), type "<f8">
value: 3.88870000e-09
DEBUG: value: 3.88870000e-09
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):

                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
DEBUG: 
                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_x@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_x@units)
value: meter / volt
DEBUG: value: meter / volt
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_y): <HDF5 dataset "coefficient_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_y): <HDF5 dataset "coefficient_y": shape (), type "<f8">
value: 3.62020000e-09
DEBUG: value: 3.62020000e-09
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):

                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
DEBUG: 
                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_y@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_y@units)
value: meter / volt
DEBUG: value: meter / volt
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_z): <HDF5 dataset "coefficient_z": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_z): <HDF5 dataset "coefficient_z": shape (), type "<f8">
value: -8.71000000e-10
DEBUG: value: -8.71000000e-10
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN):

                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
DEBUG: 
                    The calibration coefficient is the ratio of the actual distance moved by the piezo due to
                    the voltage or external force applied to the piezo. It is also called first-order correction.
                    The N (substring) denotes X and Y directions (e.g., coefficient_x).
                
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_z@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/coefficient_z@units)
value: meter / volt
DEBUG: value: meter / volt
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/coefficientN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_x): <HDF5 dataset "second_order_correction_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_x): <HDF5 dataset "second_order_correction_x": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN):

                    The N (substring) denotes X and Y directions (e.g., second_order_correction_x). If you know them, you can enter the 2nd order piezo
                    characteristics to compensate the error for that axis.
                    The following equation shows the
                    interpretation of the 2nd order correction parameters, For the X-piezo: :math:`U_x = \frac{1}{c_x} \cdot X + c_{xx} \cdot X^2`
                    with units: :math:`[V] = \frac{[V]}{[m]} \cdot [m] + \frac{[V]}{[m^2]} \cdot [m^2]`
                    where cx is the calibration of the piezo X and cxx is the 2nd order correction. The unit for
                    the second-order correction is (:math:`\frac{V}{m^2}`).
                
DEBUG: 
                    The N (substring) denotes X and Y directions (e.g., second_order_correction_x). If you know them, you can enter the 2nd order piezo
                    characteristics to compensate the error for that axis.
                    The following equation shows the
                    interpretation of the 2nd order correction parameters, For the X-piezo: :math:`U_x = \frac{1}{c_x} \cdot X + c_{xx} \cdot X^2`
                    with units: :math:`[V] = \frac{[V]}{[m]} \cdot [m] + \frac{[V]}{[m^2]} \cdot [m^2]`
                    where cx is the calibration of the piezo X and cxx is the 2nd order correction. The unit for
                    the second-order correction is (:math:`\frac{V}{m^2}`).
                
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_x@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_x@units)
value: volt / meter ** 2
DEBUG: value: volt / meter ** 2
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_y): <HDF5 dataset "second_order_correction_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_y): <HDF5 dataset "second_order_correction_y": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN):

                    The N (substring) denotes X and Y directions (e.g., second_order_correction_x). If you know them, you can enter the 2nd order piezo
                    characteristics to compensate the error for that axis.
                    The following equation shows the
                    interpretation of the 2nd order correction parameters, For the X-piezo: :math:`U_x = \frac{1}{c_x} \cdot X + c_{xx} \cdot X^2`
                    with units: :math:`[V] = \frac{[V]}{[m]} \cdot [m] + \frac{[V]}{[m^2]} \cdot [m^2]`
                    where cx is the calibration of the piezo X and cxx is the 2nd order correction. The unit for
                    the second-order correction is (:math:`\frac{V}{m^2}`).
                
DEBUG: 
                    The N (substring) denotes X and Y directions (e.g., second_order_correction_x). If you know them, you can enter the 2nd order piezo
                    characteristics to compensate the error for that axis.
                    The following equation shows the
                    interpretation of the 2nd order correction parameters, For the X-piezo: :math:`U_x = \frac{1}{c_x} \cdot X + c_{xx} \cdot X^2`
                    with units: :math:`[V] = \frac{[V]}{[m]} \cdot [m] + \frac{[V]}{[m^2]} \cdot [m^2]`
                    where cx is the calibration of the piezo X and cxx is the 2nd order correction. The unit for
                    the second-order correction is (:math:`\frac{V}{m^2}`).
                
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_y@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_parameters/second_order_correction_y@units)
value: volt / meter ** 2
DEBUG: value: volt / meter ** 2
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN
NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/calibration_parameters/second_order_correctionN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_type): <HDF5 dataset "calibration_type": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/calibration_type): <HDF5 dataset "calibration_type": shape (), type "|O">
value: active
DEBUG: value: active
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_CHAR']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_type
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/calibration_type
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
enumeration (NXspm_piezo_config.nxdl.xml:/calibration/calibration_type):
DEBUG: enumeration (NXspm_piezo_config.nxdl.xml:/calibration/calibration_type):
-> active
DEBUG: -> active
-> passive
DEBUG: -> passive
documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_type):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/calibration_type):

                The name of the calibration type, sometimes it is called
                `active calibration`.
            
DEBUG: 
                The name of the calibration type, sometimes it is called
                `active calibration`.
            
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_correction_status): <HDF5 dataset "drift_correction_status": shape (), type "|b1">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_correction_status): <HDF5 dataset "drift_correction_status": shape (), type "|b1">
value: False
DEBUG: value: False
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_BOOLEAN']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_BOOLEAN']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/drift_correction_status
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/drift_correction_status
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/drift_correction_status):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/drift_correction_status):

                The drift correction status (true / false) in calibration step of piezo.
            
DEBUG: 
                The drift correction status (true / false) in calibration step of piezo.
            
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_x): <HDF5 dataset "drift_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_x): <HDF5 dataset "drift_x": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/driftN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/driftN):

                The N (substring) denotes X, Y and Z directions (e.g., drift_x). Define the
                drift speed [m/s] for all three axes. When the compensation is on, the piezo will start to
                move at that speed.
            
DEBUG: 
                The N (substring) denotes X, Y and Z directions (e.g., drift_x). Define the
                drift speed [m/s] for all three axes. When the compensation is on, the piezo will start to
                move at that speed.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_x@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_x@units)
value: meter / second
DEBUG: value: meter / second
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
NXspm_piezo_config.nxdl.xml:/calibration/driftN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/driftN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_y): <HDF5 dataset "drift_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_y): <HDF5 dataset "drift_y": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/driftN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/driftN):

                The N (substring) denotes X, Y and Z directions (e.g., drift_x). Define the
                drift speed [m/s] for all three axes. When the compensation is on, the piezo will start to
                move at that speed.
            
DEBUG: 
                The N (substring) denotes X, Y and Z directions (e.g., drift_x). Define the
                drift speed [m/s] for all three axes. When the compensation is on, the piezo will start to
                move at that speed.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_y@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_y@units)
value: meter / second
DEBUG: value: meter / second
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
NXspm_piezo_config.nxdl.xml:/calibration/driftN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/driftN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_z): <HDF5 dataset "drift_z": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_z): <HDF5 dataset "drift_z": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/driftN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/driftN):

                The N (substring) denotes X, Y and Z directions (e.g., drift_x). Define the
                drift speed [m/s] for all three axes. When the compensation is on, the piezo will start to
                move at that speed.
            
DEBUG: 
                The N (substring) denotes X, Y and Z directions (e.g., drift_x). Define the
                drift speed [m/s] for all three axes. When the compensation is on, the piezo will start to
                move at that speed.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_z@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/drift_z@units)
value: meter / second
DEBUG: value: meter / second
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/driftN
NXspm_piezo_config.nxdl.xml:/calibration/driftN@units [NX_ANY]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/driftN@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/hv_gain_x): <HDF5 dataset "hv_gain_x": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/hv_gain_x): <HDF5 dataset "hv_gain_x": shape (), type "<i8">
value: 10
DEBUG: value: 10
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN):

                The N (substring) denotes X or Y or Z, e.g., hv_gain_x. In some systems, there is an HV gain readout feature. For
                these systems, the HV gain should be automatically adjusted whenever the gain is
                changed at the high voltage amplifier.
            
DEBUG: 
                The N (substring) denotes X or Y or Z, e.g., hv_gain_x. In some systems, there is an HV gain readout feature. For
                these systems, the HV gain should be automatically adjusted whenever the gain is
                changed at the high voltage amplifier.
            
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/hv_gain_y): <HDF5 dataset "hv_gain_y": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/hv_gain_y): <HDF5 dataset "hv_gain_y": shape (), type "<i8">
value: 10
DEBUG: value: 10
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN):

                The N (substring) denotes X or Y or Z, e.g., hv_gain_x. In some systems, there is an HV gain readout feature. For
                these systems, the HV gain should be automatically adjusted whenever the gain is
                changed at the high voltage amplifier.
            
DEBUG: 
                The N (substring) denotes X or Y or Z, e.g., hv_gain_x. In some systems, there is an HV gain readout feature. For
                these systems, the HV gain should be automatically adjusted whenever the gain is
                changed at the high voltage amplifier.
            
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/hv_gain_z): <HDF5 dataset "hv_gain_z": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/hv_gain_z): <HDF5 dataset "hv_gain_z": shape (), type "<i8">
value: 4
DEBUG: value: 4
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/hv_gainN):

                The N (substring) denotes X or Y or Z, e.g., hv_gain_x. In some systems, there is an HV gain readout feature. For
                these systems, the HV gain should be automatically adjusted whenever the gain is
                changed at the high voltage amplifier.
            
DEBUG: 
                The N (substring) denotes X or Y or Z, e.g., hv_gain_x. In some systems, there is an HV gain readout feature. For
                these systems, the HV gain should be automatically adjusted whenever the gain is
                changed at the high voltage amplifier.
            
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_x): <HDF5 dataset "tilt_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_x): <HDF5 dataset "tilt_x": shape (), type "<f8">
value: -1.44333
DEBUG: value: -1.44333
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/tiltN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/tiltN):

                The N (substring) denotes X and Y directions (e.g., tilt_x), and for both directions tilt needs to be adjusted according
                to the actual surface.
            
DEBUG: 
                The N (substring) denotes X and Y directions (e.g., tilt_x), and for both directions tilt needs to be adjusted according
                to the actual surface.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_x@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_x@units)
value: degree
DEBUG: value: degree
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
NXspm_piezo_config.nxdl.xml:/calibration/tiltN@units [NX_ANGLE]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/tiltN@units [NX_ANGLE]
===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_y): <HDF5 dataset "tilt_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_y): <HDF5 dataset "tilt_y": shape (), type "<f8">
value: -0.741252
DEBUG: value: -0.741252
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_config.nxdl.xml:/calibration/tiltN):
DEBUG: documentation (NXspm_piezo_config.nxdl.xml:/calibration/tiltN):

                The N (substring) denotes X and Y directions (e.g., tilt_x), and for both directions tilt needs to be adjusted according
                to the actual surface.
            
DEBUG: 
                The N (substring) denotes X and Y directions (e.g., tilt_x), and for both directions tilt needs to be adjusted according
                to the actual surface.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_y@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/piezo_configuration/calibration/tilt_y@units)
value: degree
DEBUG: value: degree
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_piezo_config', 'NXcalibration', 'NX_NUMBER']
classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
DEBUG: classes:
NXspm_piezo_config.nxdl.xml:/calibration/tiltN
NXspm_piezo_config.nxdl.xml:/calibration/tiltN@units [NX_ANGLE]
DEBUG: NXspm_piezo_config.nxdl.xml:/calibration/tiltN@units [NX_ANGLE]
===== GROUP (//entry/instrument/height_piezo_sensor/spm_positioner [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_positioner]): <HDF5 group "/entry/instrument/height_piezo_sensor/spm_positioner" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/height_piezo_sensor/spm_positioner [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_positioner]): <HDF5 group "/entry/instrument/height_piezo_sensor/spm_positioner" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner']
classes:
NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER
NXspm_positioner.nxdl.xml:
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER
NXspm_positioner.nxdl.xml:
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER):
DEBUG: documentation (NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER):

            The positioner information like the position of the tip, the position of the
            sample, PID controller etc.
        
DEBUG: 
            The positioner information like the position of the tip, the position of the
            sample, PID controller etc.
        
documentation (NXspm_positioner.nxdl.xml:):
DEBUG: documentation (NXspm_positioner.nxdl.xml:):

        An extension of positioner, used to maintain a measurement signal through
        a feedback loop, specialized for scanning probe microscopy applications.
        
        The component positions the spm head or cantilever tip on the surface of the sample
        thus maps 2D scan of the sample.
    
DEBUG: 
        An extension of positioner, used to maintain a measurement signal through
        a feedback loop, specialized for scanning probe microscopy applications.
        
        The component positions the spm head or cantilever tip on the surface of the sample
        thus maps 2D scan of the sample.
    
documentation (NXpositioner.nxdl.xml:):
DEBUG: documentation (NXpositioner.nxdl.xml:):

        A generic positioner such as a motor or piezo-electric transducer.  
    
DEBUG: 
        A generic positioner such as a motor or piezo-electric transducer.  
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner@NX_class)
value: NXspm_positioner
DEBUG: value: NXspm_positioner
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner']
classes:
NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER
NXspm_positioner.nxdl.xml:
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_piezo_sensor.nxdl.xml:/SPM_POSITIONER
NXspm_positioner.nxdl.xml:
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_positioner/NXpid_controller]): <HDF5 group "/entry/instrument/height_piezo_sensor/spm_positioner/z_controller" (9 members)>
DEBUG: ===== GROUP (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller [NXafm::/NXentry/NXinstrument/NXspm_piezo_sensor/NXspm_positioner/NXpid_controller]): <HDF5 group "/entry/instrument/height_piezo_sensor/spm_positioner/z_controller" (9 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller']
classes:
NXspm_positioner.nxdl.xml:/z_controller
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_positioner.nxdl.xml:/z_controller):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller):

            This controller's task is to continuously adjust the Z position of tip (e.g., in topography scan in
            STM/STS experiment) in order to keep the selected control signal as close as possible to the Set
            Point. Different control signals lead to different controller's behavior.
            
            The second PID feedback loop intends to position the tip in the Z direction.
            
            p_gain (proportional gain) from z_controller refers to K_p value from PID controller.
            i_gain (integral gain) from z_controller refers to K_i value from PID controller.
            setpoint from z_controller refers to setpoint from PID controller.
            
            Usually, the same controller, (z_controller) will be used for positioning the tip in three dimensional
            space. In this case, the controller coefficients (proportional, integral, differential) and other characteristic
            constants will be the same. Otherwise, for separate controllers positioning the tip in 3D space use the
            :ref:`feedback </NXspm_positioner/actuator/feedback-group>` controller in actuator.
        
DEBUG: 
            This controller's task is to continuously adjust the Z position of tip (e.g., in topography scan in
            STM/STS experiment) in order to keep the selected control signal as close as possible to the Set
            Point. Different control signals lead to different controller's behavior.
            
            The second PID feedback loop intends to position the tip in the Z direction.
            
            p_gain (proportional gain) from z_controller refers to K_p value from PID controller.
            i_gain (integral gain) from z_controller refers to K_i value from PID controller.
            setpoint from z_controller refers to setpoint from PID controller.
            
            Usually, the same controller, (z_controller) will be used for positioning the tip in three dimensional
            space. In this case, the controller coefficients (proportional, integral, differential) and other characteristic
            constants will be the same. Otherwise, for separate controllers positioning the tip in 3D space use the
            :ref:`feedback </NXspm_positioner/actuator/feedback-group>` controller in actuator.
        
documentation (NXpid_controller.nxdl.xml:):
DEBUG: documentation (NXpid_controller.nxdl.xml:):

        A description of a feedback system in terms of the settings of a proportional-integral-derivative (PID) controller.
         
        Automated control of a physical quantity is often achieved by connecting the output of a sensor to an actuator
        (e.g. using a thermocouple to monitor the effect of a heater and influence the power provided to it). The physical
        quantity being operated on is typically referred to as the "Process Variable", with the desired value being the 
        "Setpoint" (which may vary as a function of time) and the "Error Value" is the time-varying function of the difference 
        between the Setpoint value and the concurrent measurement of the Process Variable  (Error Value = Setpoint - Process Variable).
         
        A PID controller calculates an output value for use as an input signal to an actuator via the weighted sum of four terms:
        * Proportional: the current Error Value
        * Integral: the integral of the Error Value function
        * Derivative: the first derivative of the Error Value function
        * Feed Forward: A model of the physical system (optional)
        
        The weightings of these terms are given by the corresponding constants:
        * K_p
        * K_i
        * K_d
        * K_ff
         
        A classic PID controller only implements the P, I and D terms and the values of the K_p, K_i and K_d constants are sufficient to fully
        describe the behaviour of the feedback system implemented by such a PID controller. The inclusion of a Feed Forward term in a feedback system
        is a modern adaptation that aids optimization of the automated control. It is not present in all PID controllers, but it is also not uncommon.
         
        Note that the ``NXpid_controller`` is designed to be a child object of the actuator that its output is connected to. The parent object
        representing the actuator is likely to be represented by an ``NXactuator`` or ``NXpositioner`` base class, but there is a wide variety
        of possible applications for PID controllers.
    
DEBUG: 
        A description of a feedback system in terms of the settings of a proportional-integral-derivative (PID) controller.
         
        Automated control of a physical quantity is often achieved by connecting the output of a sensor to an actuator
        (e.g. using a thermocouple to monitor the effect of a heater and influence the power provided to it). The physical
        quantity being operated on is typically referred to as the "Process Variable", with the desired value being the 
        "Setpoint" (which may vary as a function of time) and the "Error Value" is the time-varying function of the difference 
        between the Setpoint value and the concurrent measurement of the Process Variable  (Error Value = Setpoint - Process Variable).
         
        A PID controller calculates an output value for use as an input signal to an actuator via the weighted sum of four terms:
        * Proportional: the current Error Value
        * Integral: the integral of the Error Value function
        * Derivative: the first derivative of the Error Value function
        * Feed Forward: A model of the physical system (optional)
        
        The weightings of these terms are given by the corresponding constants:
        * K_p
        * K_i
        * K_d
        * K_ff
         
        A classic PID controller only implements the P, I and D terms and the values of the K_p, K_i and K_d constants are sufficient to fully
        describe the behaviour of the feedback system implemented by such a PID controller. The inclusion of a Feed Forward term in a feedback system
        is a modern adaptation that aids optimization of the automated control. It is not present in all PID controllers, but it is also not uncommon.
         
        Note that the ``NXpid_controller`` is designed to be a child object of the actuator that its output is connected to. The parent object
        representing the actuator is likely to be represented by an ``NXactuator`` or ``NXpositioner`` base class, but there is a wide variety
        of possible applications for PID controllers.
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller@NX_class)
value: NXpid_controller
DEBUG: value: NXpid_controller
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller']
classes:
NXspm_positioner.nxdl.xml:/z_controller
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/D_t): <HDF5 dataset "D_t": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/D_t): <HDF5 dataset "D_t": shape (), type "<f8">
value: 0.0160967
DEBUG: value: 0.0160967
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/D_t
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/D_t
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_positioner.nxdl.xml:/z_controller/D_t):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller/D_t):

                The derivative time constant of the derivative part of the PID controller. Proportional Derivative constant
                K_d can be expressed as :math:`K_d = K_p D_t`.
            
DEBUG: 
                The derivative time constant of the derivative part of the PID controller. Proportional Derivative constant
                K_d can be expressed as :math:`K_d = K_p D_t`.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/D_t@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/D_t@units)
value: second
DEBUG: value: second
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/D_t
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/D_t
NXspm_positioner.nxdl.xml:/z_controller/D_t@units [NX_TIME]
DEBUG: NXspm_positioner.nxdl.xml:/z_controller/D_t@units [NX_TIME]
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/K_i): <HDF5 dataset "K_i": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/K_i): <HDF5 dataset "K_i": shape (), type "<f8">
value: 3.67489000e-10
DEBUG: value: 3.67489000e-10
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXpid_controller.nxdl.xml:/K_i
DEBUG: classes:
NXpid_controller.nxdl.xml:/K_i
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpid_controller.nxdl.xml:/K_i):
DEBUG: documentation (NXpid_controller.nxdl.xml:/K_i):

            Integral gain constant. This constant determines how strongly the output value
            should react to an accumulated offset in the Error Value that should have
            been corrected previously. since the integral term is proportional to both
            the magnitude and persistence of the Error Value over time.
        
DEBUG: 
            Integral gain constant. This constant determines how strongly the output value
            should react to an accumulated offset in the Error Value that should have
            been corrected previously. since the integral term is proportional to both
            the magnitude and persistence of the Error Value over time.
        
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/K_p): <HDF5 dataset "K_p": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/K_p): <HDF5 dataset "K_p": shape (), type "<f8">
value: 0.00000002
DEBUG: value: 0.00000002
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXpid_controller.nxdl.xml:/K_p
DEBUG: classes:
NXpid_controller.nxdl.xml:/K_p
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpid_controller.nxdl.xml:/K_p):
DEBUG: documentation (NXpid_controller.nxdl.xml:/K_p):

            Proportional gain constant. This constant determines how strongly the output value
            directly follows the current Error Value. When this constant dominates, the output
            value is linearly proportional to the Error Value.
        
DEBUG: 
            Proportional gain constant. This constant determines how strongly the output value
            directly follows the current Error Value. When this constant dominates, the output
            value is linearly proportional to the Error Value.
        
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/controller_label): <HDF5 dataset "controller_label": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/controller_label): <HDF5 dataset "controller_label": shape (), type "|O">
value: log Current
DEBUG: value: log Current
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_CHAR']
classes:
NXspm_positioner.nxdl.xml:/z_controller/controller_label
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/controller_label
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_positioner.nxdl.xml:/z_controller/controller_label):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller/controller_label):

                Controller label. This label which will be displayed at places where you can
                select a channel or controller.
            
DEBUG: 
                Controller label. This label which will be displayed at places where you can
                select a channel or controller.
            
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/feedback_on): <HDF5 dataset "feedback_on": shape (), type "|b1">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/feedback_on): <HDF5 dataset "feedback_on": shape (), type "|b1">
value: False
DEBUG: value: False
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_BOOLEAN']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_BOOLEAN']
classes:
NXspm_positioner.nxdl.xml:/z_controller/feedback_on
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/feedback_on
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm_positioner.nxdl.xml:/z_controller/feedback_on):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller/feedback_on):

                The status of the controller PID feedback system in z-axis is ON / OFF.
                E.g., for constant height mode, the z-controller feedback system is off.
            
DEBUG: 
                The status of the controller PID feedback system in z-axis is ON / OFF.
                E.g., for constant height mode, the z-controller feedback system is off.
            
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/set_point): <HDF5 dataset "set_point": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/set_point): <HDF5 dataset "set_point": shape (), type "<f8">
value: 4.99999000e-11
DEBUG: value: 4.99999000e-11
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/set_point
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/set_point
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_positioner.nxdl.xml:/z_controller/set_point):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller/set_point):

                The set point for the z-controller to be fixed and the target value could be
                height or current.
            
DEBUG: 
                The set point for the z-controller to be fixed and the target value could be
                height or current.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/set_point@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/set_point@units)
value: ampere
DEBUG: value: ampere
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/set_point
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/set_point
NXspm_positioner.nxdl.xml:/z_controller/set_point@units [NX_ANY]
DEBUG: NXspm_positioner.nxdl.xml:/z_controller/set_point@units [NX_ANY]
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/switch_off_delay): <HDF5 dataset "switch_off_delay": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/switch_off_delay): <HDF5 dataset "switch_off_delay": shape (), type "<f8">
value: 0.05
DEBUG: value: 0.05
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay):

                The switch-off delay of the controller from its stable point.
            
DEBUG: 
                The switch-off delay of the controller from its stable point.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/switch_off_delay@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/switch_off_delay@units)
value: second
DEBUG: value: second
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay
NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay@units [NX_TIME]
DEBUG: NXspm_positioner.nxdl.xml:/z_controller/switch_off_delay@units [NX_TIME]
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/tip_lift): <HDF5 dataset "tip_lift": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/tip_lift): <HDF5 dataset "tip_lift": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/tip_lift
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/tip_lift
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_positioner.nxdl.xml:/z_controller/tip_lift):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller/tip_lift):

                If the tip is lifted from the stable point.
            
DEBUG: 
                If the tip is lifted from the stable point.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/tip_lift@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/tip_lift@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/tip_lift
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/tip_lift
NXspm_positioner.nxdl.xml:/z_controller/tip_lift@units [NX_LENGTH]
DEBUG: NXspm_positioner.nxdl.xml:/z_controller/tip_lift@units [NX_LENGTH]
===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/z): <HDF5 dataset "z": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/z): <HDF5 dataset "z": shape (), type "<f8">
value: -0.00000002
DEBUG: value: -0.00000002
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/z
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/z
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_positioner.nxdl.xml:/z_controller/z):
DEBUG: documentation (NXspm_positioner.nxdl.xml:/z_controller/z):

                To indicate the relative tip position z between tip and sample. The tip position
                can also be varied when the z_controller is not running.
            
DEBUG: 
                To indicate the relative tip position z between tip and sample. The tip position
                can also be varied when the z_controller is not running.
            
===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/z@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/spm_positioner/z_controller/z@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NXspm_positioner', 'NXpid_controller', 'NX_NUMBER']
classes:
NXspm_positioner.nxdl.xml:/z_controller/z
DEBUG: classes:
NXspm_positioner.nxdl.xml:/z_controller/z
NXspm_positioner.nxdl.xml:/z_controller/z@units [NX_LENGTH]
DEBUG: NXspm_positioner.nxdl.xml:/z_controller/z@units [NX_LENGTH]
===== FIELD (//entry/instrument/height_piezo_sensor/z): <HDF5 dataset "z": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/height_piezo_sensor/z): <HDF5 dataset "z": shape (), type "<f8">
value: -0.00000002
DEBUG: value: -0.00000002
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NX_NUMBER']
classes:
NXspm_piezo_sensor.nxdl.xml:/z
DEBUG: classes:
NXspm_piezo_sensor.nxdl.xml:/z
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_piezo_sensor.nxdl.xml:/z):
DEBUG: documentation (NXspm_piezo_sensor.nxdl.xml:/z):

            The z position (e.g., target or averaged target value) of the piezo.
        
DEBUG: 
            The z position (e.g., target or averaged target value) of the piezo.
        
===== ATTRS (//entry/instrument/height_piezo_sensor/z@units)
DEBUG: ===== ATTRS (//entry/instrument/height_piezo_sensor/z@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_piezo_sensor', 'NX_NUMBER']
classes:
NXspm_piezo_sensor.nxdl.xml:/z
DEBUG: classes:
NXspm_piezo_sensor.nxdl.xml:/z
NXspm_piezo_sensor.nxdl.xml:/z@units [NX_LENGTH]
DEBUG: NXspm_piezo_sensor.nxdl.xml:/z@units [NX_LENGTH]
===== GROUP (//entry/instrument/lockin_amplifier [NXafm::/NXentry/NXinstrument/NXlockin]): <HDF5 group "/entry/instrument/lockin_amplifier" (6 members)>
DEBUG: ===== GROUP (//entry/instrument/lockin_amplifier [NXafm::/NXentry/NXinstrument/NXlockin]): <HDF5 group "/entry/instrument/lockin_amplifier" (6 members)>
classpath: ['NXentry', 'NXinstrument', 'NXlockin']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXlockin.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXlockin.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier):

                    The lock-in amplifier information.
                
DEBUG: 
                    The lock-in amplifier information.
                
documentation (NXlockin.nxdl.xml:):
DEBUG: documentation (NXlockin.nxdl.xml:):

        A base class definition for a lock-in amplifier.
        
        The lock-in amplifier information: the device is being used to extract a (potentially)
        very weak input signal buried in the noisy background, where the input signal has
        the same frequency (or its harmonic) as carrier signal or reference signal, using heterodyne
        detection.
        
        This method extracts the amplitude and phase shift between input signal and reference signal.
        
        In single phase lock-in amplifiers used in high signal-to-noise ratio applications, only
        the amplitude is measured and phase difference is set to zero.
        
        In two phase lock-in amplifiers used in low signal-to-noise ratio applications, both the
        amplitude and phase difference are measured.
        
        Fields with partial names like low_passN, high_passN, etc., can be repeated for each channel
        of the lockin amplifier. It is envisioned that these fields are named low_pass_0, low_pass_1,
        and so on.
    
DEBUG: 
        A base class definition for a lock-in amplifier.
        
        The lock-in amplifier information: the device is being used to extract a (potentially)
        very weak input signal buried in the noisy background, where the input signal has
        the same frequency (or its harmonic) as carrier signal or reference signal, using heterodyne
        detection.
        
        This method extracts the amplitude and phase shift between input signal and reference signal.
        
        In single phase lock-in amplifiers used in high signal-to-noise ratio applications, only
        the amplitude is measured and phase difference is set to zero.
        
        In two phase lock-in amplifiers used in low signal-to-noise ratio applications, both the
        amplitude and phase difference are measured.
        
        Fields with partial names like low_passN, high_passN, etc., can be repeated for each channel
        of the lockin amplifier. It is envisioned that these fields are named low_pass_0, low_pass_1,
        and so on.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/lockin_amplifier@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/lockin_amplifier@NX_class)
value: NXlockin
DEBUG: value: NXlockin
classpath: ['NXentry', 'NXinstrument', 'NXlockin']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXlockin.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/lockin_amplifier
NXlockin.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/lockin_amplifier/demodulated_signal): <HDF5 dataset "demodulated_signal": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/lockin_amplifier/demodulated_signal): <HDF5 dataset "demodulated_signal": shape (), type "|O">
value: current
DEBUG: value: current
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_CHAR']
classes:
NXlockin.nxdl.xml:/demodulated_signal
DEBUG: classes:
NXlockin.nxdl.xml:/demodulated_signal
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
enumeration (NXlockin.nxdl.xml:/demodulated_signal):
DEBUG: enumeration (NXlockin.nxdl.xml:/demodulated_signal):
-> current
DEBUG: -> current
-> voltage
DEBUG: -> voltage
-> bias
DEBUG: -> bias
documentation (NXlockin.nxdl.xml:/demodulated_signal):
DEBUG: documentation (NXlockin.nxdl.xml:/demodulated_signal):

            Type of the demodulated signal,  current | voltage | bias.
            The name of the current or voltage signal can be also specified
            according to their purpose (e.g., `bias` voltage).
        
DEBUG: 
            Type of the demodulated signal,  current | voltage | bias.
            The name of the current or voltage signal can be also specified
            according to their purpose (e.g., `bias` voltage).
        
===== FIELD (//entry/instrument/lockin_amplifier/harmonic_order_n): <HDF5 dataset "harmonic_order_n": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/lockin_amplifier/harmonic_order_n): <HDF5 dataset "harmonic_order_n": shape (), type "<i8">
value: 2
DEBUG: value: 2
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
classes:
NXlockin.nxdl.xml:/harmonic_orderN
DEBUG: classes:
NXlockin.nxdl.xml:/harmonic_orderN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXlockin.nxdl.xml:/harmonic_orderN):
DEBUG: documentation (NXlockin.nxdl.xml:/harmonic_orderN):

            The reference signal can be a higher harmonic of the modulation signal.
            Here the order of the harmonic is stored.
            N is envisioned to represent the channel number e.g., harmonic_order1.
        
DEBUG: 
            The reference signal can be a higher harmonic of the modulation signal.
            Here the order of the harmonic is stored.
            N is envisioned to represent the channel number e.g., harmonic_order1.
        
===== FIELD (//entry/instrument/lockin_amplifier/modulation_signal): <HDF5 dataset "modulation_signal": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/lockin_amplifier/modulation_signal): <HDF5 dataset "modulation_signal": shape (), type "|O">
value: bias
DEBUG: value: bias
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_CHAR']
classes:
NXlockin.nxdl.xml:/modulation_signal
DEBUG: classes:
NXlockin.nxdl.xml:/modulation_signal
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
enumeration (NXlockin.nxdl.xml:/modulation_signal):
DEBUG: enumeration (NXlockin.nxdl.xml:/modulation_signal):
-> voltage
DEBUG: -> voltage
-> current
DEBUG: -> current
-> bias
DEBUG: -> bias
documentation (NXlockin.nxdl.xml:/modulation_signal):
DEBUG: documentation (NXlockin.nxdl.xml:/modulation_signal):

            Type of the modulation or reference signal, voltage | current | bias.
            The name of the current or voltage signal can be also specified
            according to their purpose (e.g., `bias` voltage).
        
DEBUG: 
            Type of the modulation or reference signal, voltage | current | bias.
            The name of the current or voltage signal can be also specified
            according to their purpose (e.g., `bias` voltage).
        
===== FIELD (//entry/instrument/lockin_amplifier/modulation_status): <HDF5 dataset "modulation_status": shape (), type "|b1">
DEBUG: ===== FIELD (//entry/instrument/lockin_amplifier/modulation_status): <HDF5 dataset "modulation_status": shape (), type "|b1">
value: False
DEBUG: value: False
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_BOOLEAN']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_BOOLEAN']
classes:
NXlockin.nxdl.xml:/modulation_status
DEBUG: classes:
NXlockin.nxdl.xml:/modulation_status
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXlockin.nxdl.xml:/modulation_status):
DEBUG: documentation (NXlockin.nxdl.xml:/modulation_status):

            Switch the lock-in modulation on or off.
        
DEBUG: 
            Switch the lock-in modulation on or off.
        
===== FIELD (//entry/instrument/lockin_amplifier/ref_offset_phase_n): <HDF5 dataset "ref_offset_phase_n": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/lockin_amplifier/ref_offset_phase_n): <HDF5 dataset "ref_offset_phase_n": shape (), type "<f8">
value: -159.739
DEBUG: value: -159.739
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
DEBUG: classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXlockin.nxdl.xml:/ref_offset_phaseN):
DEBUG: documentation (NXlockin.nxdl.xml:/ref_offset_phaseN):

            An extra phase offset added to the reference signal in modulation step.
            N is envisioned to represent the channel number e.g., hp_filter_order1.
        
DEBUG: 
            An extra phase offset added to the reference signal in modulation step.
            N is envisioned to represent the channel number e.g., hp_filter_order1.
        
===== ATTRS (//entry/instrument/lockin_amplifier/ref_offset_phase_n@units)
DEBUG: ===== ATTRS (//entry/instrument/lockin_amplifier/ref_offset_phase_n@units)
value: degree
DEBUG: value: degree
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
DEBUG: classes:
NXlockin.nxdl.xml:/ref_offset_phaseN
NXlockin.nxdl.xml:/ref_offset_phaseN@units [NX_ANGLE]
DEBUG: NXlockin.nxdl.xml:/ref_offset_phaseN@units [NX_ANGLE]
===== FIELD (//entry/instrument/lockin_amplifier/reference_frequency): <HDF5 dataset "reference_frequency": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/lockin_amplifier/reference_frequency): <HDF5 dataset "reference_frequency": shape (), type "<f8">
value: 470
DEBUG: value: 470
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
classes:
NXlockin.nxdl.xml:/reference_frequency
DEBUG: classes:
NXlockin.nxdl.xml:/reference_frequency
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXlockin.nxdl.xml:/reference_frequency):
DEBUG: documentation (NXlockin.nxdl.xml:/reference_frequency):

            Frequency of the reference signal for the lock-in amplifier.
        
DEBUG: 
            Frequency of the reference signal for the lock-in amplifier.
        
===== ATTRS (//entry/instrument/lockin_amplifier/reference_frequency@units)
DEBUG: ===== ATTRS (//entry/instrument/lockin_amplifier/reference_frequency@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXlockin', 'NX_NUMBER']
classes:
NXlockin.nxdl.xml:/reference_frequency
DEBUG: classes:
NXlockin.nxdl.xml:/reference_frequency
NXlockin.nxdl.xml:/reference_frequency@units [NX_FREQUENCY]
DEBUG: NXlockin.nxdl.xml:/reference_frequency@units [NX_FREQUENCY]
===== GROUP (//entry/instrument/phase_lock_loop [NXafm::/NXentry/NXinstrument/NXphase_lock_loop]): <HDF5 group "/entry/instrument/phase_lock_loop" (3 members)>
DEBUG: ===== GROUP (//entry/instrument/phase_lock_loop [NXafm::/NXentry/NXinstrument/NXphase_lock_loop]): <HDF5 group "/entry/instrument/phase_lock_loop" (3 members)>
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/phase_lock_loop
NXphase_lock_loop.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/phase_lock_loop
NXphase_lock_loop.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/phase_lock_loop):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/phase_lock_loop):

                    Phase locked loop for cantilever lock-in device.
                
DEBUG: 
                    Phase locked loop for cantilever lock-in device.
                
documentation (NXphase_lock_loop.nxdl.xml:):
DEBUG: documentation (NXphase_lock_loop.nxdl.xml:):

        A base class definition for a phase-locked loop (PLL) used in AFM experiments.
        
        The PLL has three main components:
          1. Phase-detector
          2. Loop-filter
          3. Voltage-controlled oscillator (VCO)
          
        Depending on the phase error from the phase detector due to the phase difference between the
        Reference and output from the VCO signals, the PLL adjusts the output frequency to minimize the phase error.
        
        Measuring the phase error, the PLL can be in one of three states:
          - Zero phase error: The output signal is in coherence with the reference signal (lock condition).
          - Constant phase error: The output signal has a constant phase difference from the reference signal, and therefore,
                  both reference signals have the same frequency (lock condition).
          - Continuous increasing phase error: The output signal's phase continuously changes therefore they have different frequencies,
                  indicating the PLL is in an unlock condition.
    
DEBUG: 
        A base class definition for a phase-locked loop (PLL) used in AFM experiments.
        
        The PLL has three main components:
          1. Phase-detector
          2. Loop-filter
          3. Voltage-controlled oscillator (VCO)
          
        Depending on the phase error from the phase detector due to the phase difference between the
        Reference and output from the VCO signals, the PLL adjusts the output frequency to minimize the phase error.
        
        Measuring the phase error, the PLL can be in one of three states:
          - Zero phase error: The output signal is in coherence with the reference signal (lock condition).
          - Constant phase error: The output signal has a constant phase difference from the reference signal, and therefore,
                  both reference signals have the same frequency (lock condition).
          - Continuous increasing phase error: The output signal's phase continuously changes therefore they have different frequencies,
                  indicating the PLL is in an unlock condition.
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/phase_lock_loop@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/phase_lock_loop@NX_class)
value: NXphase_lock_loop
DEBUG: value: NXphase_lock_loop
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/phase_lock_loop
NXphase_lock_loop.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/phase_lock_loop
NXphase_lock_loop.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/phase_lock_loop/frequency_bandwidth): <HDF5 dataset "frequency_bandwidth": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/phase_lock_loop/frequency_bandwidth): <HDF5 dataset "frequency_bandwidth": shape (), type "<f8">
value: 90
DEBUG: value: 90
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
classes:
NXphase_lock_loop.nxdl.xml:/frequency_bandwidth
DEBUG: classes:
NXphase_lock_loop.nxdl.xml:/frequency_bandwidth
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXphase_lock_loop.nxdl.xml:/frequency_bandwidth):
DEBUG: documentation (NXphase_lock_loop.nxdl.xml:/frequency_bandwidth):

            The frequency bandwidth of the PLL is where it responds or is stable.
            If phase difference (also called phase error) is calculated from the input and output signal
            frequencies.
        
DEBUG: 
            The frequency bandwidth of the PLL is where it responds or is stable.
            If phase difference (also called phase error) is calculated from the input and output signal
            frequencies.
        
===== ATTRS (//entry/instrument/phase_lock_loop/frequency_bandwidth@units)
DEBUG: ===== ATTRS (//entry/instrument/phase_lock_loop/frequency_bandwidth@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
classes:
NXphase_lock_loop.nxdl.xml:/frequency_bandwidth
DEBUG: classes:
NXphase_lock_loop.nxdl.xml:/frequency_bandwidth
NXphase_lock_loop.nxdl.xml:/frequency_bandwidth@units [NX_FREQUENCY]
DEBUG: NXphase_lock_loop.nxdl.xml:/frequency_bandwidth@units [NX_FREQUENCY]
===== GROUP (//entry/instrument/phase_lock_loop/loop_filter [NXafm::/NXentry/NXinstrument/NXphase_lock_loop/NXcomponent]): <HDF5 group "/entry/instrument/phase_lock_loop/loop_filter" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/phase_lock_loop/loop_filter [NXafm::/NXentry/NXinstrument/NXphase_lock_loop/NXcomponent]): <HDF5 group "/entry/instrument/phase_lock_loop/loop_filter" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NXcomponent']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NXcomponent']
classes:
NXphase_lock_loop.nxdl.xml:/loop_filter
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXphase_lock_loop.nxdl.xml:/loop_filter
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXphase_lock_loop.nxdl.xml:/loop_filter):
DEBUG: documentation (NXphase_lock_loop.nxdl.xml:/loop_filter):

            The loop filter component of the PLL filters the voltage from the phase detector to the VCO.
            It extracts the average voltage of the phase error signals emitted from the phase detector.
        
DEBUG: 
            The loop filter component of the PLL filters the voltage from the phase detector to the VCO.
            It extracts the average voltage of the phase error signals emitted from the phase detector.
        
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/phase_lock_loop/loop_filter@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/phase_lock_loop/loop_filter@NX_class)
value: NXcomponent
DEBUG: value: NXcomponent
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NXcomponent']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NXcomponent']
classes:
NXphase_lock_loop.nxdl.xml:/loop_filter
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXphase_lock_loop.nxdl.xml:/loop_filter
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/phase_lock_loop/loop_filter/Kf_coefficient): <HDF5 dataset "Kf_coefficient": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/phase_lock_loop/loop_filter/Kf_coefficient): <HDF5 dataset "Kf_coefficient": shape (), type "<f8">
value: 53561
DEBUG: value: 53561
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NXcomponent', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NXcomponent', 'NX_NUMBER']
classes:
NXphase_lock_loop.nxdl.xml:/loop_filter/Kf_coefficient
DEBUG: classes:
NXphase_lock_loop.nxdl.xml:/loop_filter/Kf_coefficient
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXphase_lock_loop.nxdl.xml:/loop_filter/Kf_coefficient):
DEBUG: documentation (NXphase_lock_loop.nxdl.xml:/loop_filter/Kf_coefficient):

                The Kf coefficient, called loop filter gain, determines the gain of the
                loop filter circuit in the PLL.
            
DEBUG: 
                The Kf coefficient, called loop filter gain, determines the gain of the
                loop filter circuit in the PLL.
            
===== FIELD (//entry/instrument/phase_lock_loop/phase_bandwidth): <HDF5 dataset "phase_bandwidth": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/phase_lock_loop/phase_bandwidth): <HDF5 dataset "phase_bandwidth": shape (), type "<f8">
value: 30
DEBUG: value: 30
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
classes:
NXphase_lock_loop.nxdl.xml:/phase_bandwidth
DEBUG: classes:
NXphase_lock_loop.nxdl.xml:/phase_bandwidth
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXphase_lock_loop.nxdl.xml:/phase_bandwidth):
DEBUG: documentation (NXphase_lock_loop.nxdl.xml:/phase_bandwidth):

            The phase bandwidth of the PLL is where it responds or is stable.
            If phase difference (also called phase error) is calculated from the input and output signal
            phases.
        
DEBUG: 
            The phase bandwidth of the PLL is where it responds or is stable.
            If phase difference (also called phase error) is calculated from the input and output signal
            phases.
        
===== ATTRS (//entry/instrument/phase_lock_loop/phase_bandwidth@units)
DEBUG: ===== ATTRS (//entry/instrument/phase_lock_loop/phase_bandwidth@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXphase_lock_loop', 'NX_NUMBER']
classes:
NXphase_lock_loop.nxdl.xml:/phase_bandwidth
DEBUG: classes:
NXphase_lock_loop.nxdl.xml:/phase_bandwidth
NXphase_lock_loop.nxdl.xml:/phase_bandwidth@units [NX_FREQUENCY]
DEBUG: NXphase_lock_loop.nxdl.xml:/phase_bandwidth@units [NX_FREQUENCY]
===== GROUP (//entry/instrument/real_time_controller [NXafm::/NXentry/NXinstrument/NXrcs]): <HDF5 group "/entry/instrument/real_time_controller" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/real_time_controller [NXafm::/NXentry/NXinstrument/NXrcs]): <HDF5 group "/entry/instrument/real_time_controller" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXrcs']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/real_time_controller
NXrcs.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/real_time_controller
NXrcs.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/real_time_controller):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/real_time_controller):

DEBUG: 
documentation (NXrcs.nxdl.xml:):
DEBUG: documentation (NXrcs.nxdl.xml:):

        A base class for the Real Time Control System (RCS).
        
        A real time control system (RCS) is a reference architecture model
        used to design highly task intensive software systems and computing
        control systems.
    
DEBUG: 
        A base class for the Real Time Control System (RCS).
        
        A real time control system (RCS) is a reference architecture model
        used to design highly task intensive software systems and computing
        control systems.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/real_time_controller@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/real_time_controller@NX_class)
value: NXrcs
DEBUG: value: NXrcs
classpath: ['NXentry', 'NXinstrument', 'NXrcs']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/real_time_controller
NXrcs.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/real_time_controller
NXrcs.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/real_time_controller/animation_time): <HDF5 dataset "animation_time": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/real_time_controller/animation_time): <HDF5 dataset "animation_time": shape (), type "<f8">
value: 0.02
DEBUG: value: 0.02
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/animation_time
DEBUG: classes:
NXrcs.nxdl.xml:/animation_time
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXrcs.nxdl.xml:/animation_time):
DEBUG: documentation (NXrcs.nxdl.xml:/animation_time):

            The time of data animation of single in a data lifecycle or process
             cycle.
        
DEBUG: 
            The time of data animation of single in a data lifecycle or process
             cycle.
        
===== ATTRS (//entry/instrument/real_time_controller/animation_time@units)
DEBUG: ===== ATTRS (//entry/instrument/real_time_controller/animation_time@units)
value: second
DEBUG: value: second
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/animation_time
DEBUG: classes:
NXrcs.nxdl.xml:/animation_time
NXrcs.nxdl.xml:/animation_time@units [NX_TIME]
DEBUG: NXrcs.nxdl.xml:/animation_time@units [NX_TIME]
===== FIELD (//entry/instrument/real_time_controller/frequency): <HDF5 dataset "frequency": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/real_time_controller/frequency): <HDF5 dataset "frequency": shape (), type "<f8">
value: 10000
DEBUG: value: 10000
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/frequency
DEBUG: classes:
NXrcs.nxdl.xml:/frequency
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXrcs.nxdl.xml:/frequency):
DEBUG: documentation (NXrcs.nxdl.xml:/frequency):

            The frequency of the real-time controller system which indicated the number of close-loop process
            (gathering data, process data and update system) control cycles per unit time.
        
DEBUG: 
            The frequency of the real-time controller system which indicated the number of close-loop process
            (gathering data, process data and update system) control cycles per unit time.
        
===== ATTRS (//entry/instrument/real_time_controller/frequency@units)
DEBUG: ===== ATTRS (//entry/instrument/real_time_controller/frequency@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/frequency
DEBUG: classes:
NXrcs.nxdl.xml:/frequency
NXrcs.nxdl.xml:/frequency@units [NX_FREQUENCY]
DEBUG: NXrcs.nxdl.xml:/frequency@units [NX_FREQUENCY]
===== FIELD (//entry/instrument/real_time_controller/indication_time): <HDF5 dataset "indication_time": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/real_time_controller/indication_time): <HDF5 dataset "indication_time": shape (), type "<f8">
value: 0.3
DEBUG: value: 0.3
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/indication_time
DEBUG: classes:
NXrcs.nxdl.xml:/indication_time
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXrcs.nxdl.xml:/indication_time):
DEBUG: documentation (NXrcs.nxdl.xml:/indication_time):

            The time of data indication of the end of process.
        
DEBUG: 
            The time of data indication of the end of process.
        
===== ATTRS (//entry/instrument/real_time_controller/indication_time@units)
DEBUG: ===== ATTRS (//entry/instrument/real_time_controller/indication_time@units)
value: second
DEBUG: value: second
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/indication_time
DEBUG: classes:
NXrcs.nxdl.xml:/indication_time
NXrcs.nxdl.xml:/indication_time@units [NX_TIME]
DEBUG: NXrcs.nxdl.xml:/indication_time@units [NX_TIME]
===== FIELD (//entry/instrument/real_time_controller/measurement_time): <HDF5 dataset "measurement_time": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/real_time_controller/measurement_time): <HDF5 dataset "measurement_time": shape (), type "<f8">
value: 0.678761
DEBUG: value: 0.678761
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/measurement_time
DEBUG: classes:
NXrcs.nxdl.xml:/measurement_time
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXrcs.nxdl.xml:/measurement_time):
DEBUG: documentation (NXrcs.nxdl.xml:/measurement_time):

            The time of data measuring in a data lifecycle or process
             cycle.
        
DEBUG: 
            The time of data measuring in a data lifecycle or process
             cycle.
        
===== ATTRS (//entry/instrument/real_time_controller/measurement_time@units)
DEBUG: ===== ATTRS (//entry/instrument/real_time_controller/measurement_time@units)
value: second
DEBUG: value: second
classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXrcs', 'NX_NUMBER']
classes:
NXrcs.nxdl.xml:/measurement_time
DEBUG: classes:
NXrcs.nxdl.xml:/measurement_time
NXrcs.nxdl.xml:/measurement_time@units [NX_TIME]
DEBUG: NXrcs.nxdl.xml:/measurement_time@units [NX_TIME]
===== GROUP (//entry/instrument/sample_bias_voltage [NXafm::/NXentry/NXinstrument/NXsensor]): <HDF5 group "/entry/instrument/sample_bias_voltage" (3 members)>
DEBUG: ===== GROUP (//entry/instrument/sample_bias_voltage [NXafm::/NXentry/NXinstrument/NXsensor]): <HDF5 group "/entry/instrument/sample_bias_voltage" (3 members)>
classpath: ['NXentry', 'NXinstrument', 'NXsensor']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage):

                    The DC bias voltage that is applied to the sample (for example in constant-
                    current mode in STM).
                
DEBUG: 
                    The DC bias voltage that is applied to the sample (for example in constant-
                    current mode in STM).
                
documentation (NXinstrument.nxdl.xml:/SENSOR):
DEBUG: documentation (NXinstrument.nxdl.xml:/SENSOR):

DEBUG: 
documentation (NXsensor.nxdl.xml:):
DEBUG: documentation (NXsensor.nxdl.xml:):

		A sensor used to monitor an external condition 
		
		The condition itself is described in :ref:`NXenvironment`.
	
DEBUG: 
		A sensor used to monitor an external condition 
		
		The condition itself is described in :ref:`NXenvironment`.
	
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/sample_bias_voltage@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/sample_bias_voltage@NX_class)
value: NXsensor
DEBUG: value: NXsensor
classpath: ['NXentry', 'NXinstrument', 'NXsensor']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage
NXinstrument.nxdl.xml:/SENSOR
NXsensor.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/sample_bias_voltage/bias_offset_value): <HDF5 dataset "bias_offset_value": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/sample_bias_voltage/bias_offset_value): <HDF5 dataset "bias_offset_value": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value):

                        Offset value of the bias voltage.
                    
DEBUG: 
                        Offset value of the bias voltage.
                    
===== ATTRS (//entry/instrument/sample_bias_voltage/bias_offset_value@units)
DEBUG: ===== ATTRS (//entry/instrument/sample_bias_voltage/bias_offset_value@units)
value: volt
DEBUG: value: volt
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value@units [NX_VOLTAGE]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_offset_value@units [NX_VOLTAGE]
===== FIELD (//entry/instrument/sample_bias_voltage/bias_voltage): <HDF5 dataset "bias_voltage": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/sample_bias_voltage/bias_voltage): <HDF5 dataset "bias_voltage": shape (), type "<f8">
value: -0.0009
DEBUG: value: -0.0009
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage):

                        The bias voltage (DC) applied to the sample.
                    
DEBUG: 
                        The bias voltage (DC) applied to the sample.
                    
===== ATTRS (//entry/instrument/sample_bias_voltage/bias_voltage@units)
DEBUG: ===== ATTRS (//entry/instrument/sample_bias_voltage/bias_voltage@units)
value: volt
DEBUG: value: volt
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage@units [NX_VOLTAGE]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/bias_voltage@units [NX_VOLTAGE]
===== GROUP (//entry/instrument/sample_bias_voltage/calibration [NXafm::/NXentry/NXinstrument/NXsensor/NXcalibration]): <HDF5 group "/entry/instrument/sample_bias_voltage/calibration" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/sample_bias_voltage/calibration [NXafm::/NXentry/NXinstrument/NXsensor/NXcalibration]): <HDF5 group "/entry/instrument/sample_bias_voltage/calibration" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration):

                        Calibration of the bias voltage measurement (V/V).
                    
DEBUG: 
                        Calibration of the bias voltage measurement (V/V).
                    
documentation (NXcalibration.nxdl.xml:):
DEBUG: documentation (NXcalibration.nxdl.xml:):

        Subclass of NXprocess to describe post-processing calibrations.
    
DEBUG: 
        Subclass of NXprocess to describe post-processing calibrations.
    
documentation (NXprocess.nxdl.xml:):
DEBUG: documentation (NXprocess.nxdl.xml:):

        The :ref:`NXprocess` class describes an operation used to
        process data as part of an analysis workflow, providing
        information such as the software used, the date of the
        operation, the input parameters, and the resulting data. 
    
DEBUG: 
        The :ref:`NXprocess` class describes an operation used to
        process data as part of an analysis workflow, providing
        information such as the software used, the date of the
        operation, the input parameters, and the resulting data. 
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/sample_bias_voltage/calibration@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/sample_bias_voltage/calibration@NX_class)
value: NXcalibration
DEBUG: value: NXcalibration
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration
NXcalibration.nxdl.xml:
NXprocess.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters [NXafm::/NXentry/NXinstrument/NXsensor/NXcalibration/NXparameters]): <HDF5 group "/entry/instrument/sample_bias_voltage/calibration/calibration_parameters" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters [NXafm::/NXentry/NXinstrument/NXsensor/NXcalibration/NXparameters]): <HDF5 group "/entry/instrument/sample_bias_voltage/calibration/calibration_parameters" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters):

DEBUG: 
documentation (NXcalibration.nxdl.xml:/calibration_parameters):
DEBUG: documentation (NXcalibration.nxdl.xml:/calibration_parameters):

            Fit coefficients to be used in ``fit_formula_description``.
            
            As an example, for non-linear energy calibrations, e.g. in a time-of-flight (TOF) detector, a polynomial 
            function is fitted to a set of features (peaks) at well defined energy positions to determine
            E(TOF). Here we can store the fit coefficients for that procedure.
        
DEBUG: 
            Fit coefficients to be used in ``fit_formula_description``.
            
            As an example, for non-linear energy calibrations, e.g. in a time-of-flight (TOF) detector, a polynomial 
            function is fitted to a set of features (peaks) at well defined energy positions to determine
            E(TOF). Here we can store the fit coefficients for that procedure.
        
documentation (NXprocess.nxdl.xml:/PARAMETERS):
DEBUG: documentation (NXprocess.nxdl.xml:/PARAMETERS):

            Parameters used in performing the data analysis.
        
DEBUG: 
            Parameters used in performing the data analysis.
        
documentation (NXobject.nxdl.xml:/PARAMETERS):
DEBUG: documentation (NXobject.nxdl.xml:/PARAMETERS):

DEBUG: 
documentation (NXparameters.nxdl.xml:):
DEBUG: documentation (NXparameters.nxdl.xml:):
Container for parameters, usually used in processing or analysis.
DEBUG: Container for parameters, usually used in processing or analysis.
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters@NX_class)
value: NXparameters
DEBUG: value: NXparameters
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters
NXcalibration.nxdl.xml:/calibration_parameters
NXprocess.nxdl.xml:/PARAMETERS
NXobject.nxdl.xml:/PARAMETERS
NXparameters.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters/coefficient): <HDF5 dataset "coefficient": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters/coefficient): <HDF5 dataset "coefficient": shape (), type "<f8">
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient):

                                The coefficient of the calibration.
                            
DEBUG: 
                                The coefficient of the calibration.
                            
===== ATTRS (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters/coefficient@units)
DEBUG: ===== ATTRS (//entry/instrument/sample_bias_voltage/calibration/calibration_parameters/coefficient@units)
value: dimensionless
DEBUG: value: dimensionless
classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXsensor', 'NXcalibration', 'NXparameters', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/sample_bias_voltage/calibration/calibration_parameters/coefficient@units [NX_ANY]
===== GROUP (//entry/instrument/scan_environment [NXafm::/NXentry/NXinstrument/NXenvironment]): <HDF5 group "/entry/instrument/scan_environment" (2 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment [NXafm::/NXentry/NXinstrument/NXenvironment]): <HDF5 group "/entry/instrument/scan_environment" (2 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT
NXenvironment.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT
NXenvironment.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT):

                    The environment information.
                
DEBUG: 
                    The environment information.
                
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT):

                    Information of the scan environment holding concept for
                    temperature, setpoint (current or height), scan area and scan data.
                    
                    Note: At least one field from head_temperature, cryo_bottom_temperature and cryo_shield_temperature must be provided.
                
DEBUG: 
                    Information of the scan environment holding concept for
                    temperature, setpoint (current or height), scan area and scan data.
                    
                    Note: At least one field from head_temperature, cryo_bottom_temperature and cryo_shield_temperature must be provided.
                
documentation (NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT):

                    Describes an environment setup for the experiment.
                    
                    All the setting values of the independently scanned controllers are listed under corresponding
                    NXsensor groups. Similarly, separate NXsensor groups are used to store the readings from each
                    measurement sensor.
                    
                    For example, in a temperature-dependent IV measurement, the temperature and voltage must be
                    present as independently scanned controllers and the current sensor must also be present with
                    its readings.
                
DEBUG: 
                    Describes an environment setup for the experiment.
                    
                    All the setting values of the independently scanned controllers are listed under corresponding
                    NXsensor groups. Similarly, separate NXsensor groups are used to store the readings from each
                    measurement sensor.
                    
                    For example, in a temperature-dependent IV measurement, the temperature and voltage must be
                    present as independently scanned controllers and the current sensor must also be present with
                    its readings.
                
documentation (NXenvironment.nxdl.xml:):
DEBUG: documentation (NXenvironment.nxdl.xml:):
Parameters for controlling external conditions
DEBUG: Parameters for controlling external conditions
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment@NX_class)
value: NXenvironment
DEBUG: value: NXenvironment
classpath: ['NXentry', 'NXinstrument', 'NXenvironment']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT
NXenvironment.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT
NXsensor_scan.nxdl.xml:/ENTRY/INSTRUMENT/ENVIRONMENT
NXenvironment.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/identifier_environment): <HDF5 dataset "identifier_environment": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/identifier_environment): <HDF5 dataset "identifier_environment": shape (), type "|O">
value: A%y%m%d.%H%M%S-%N
DEBUG: value: A%y%m%d.%H%M%S-%N
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/identifier_environment
NXobject.nxdl.xml:/identifierNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/identifier_environment
NXobject.nxdl.xml:/identifierNAME
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/identifier_environment):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/identifier_environment):

                        Unique identifier for the scan environment defined by the user or lab. When multiple scans are performed
                        in a single environment conditions or settings, the entire scan environment can be differentiated
                        by this identifier. For example, scan on a sample of TiSe2 with layered of evaporated pyrene and
                        annealed at 300K temperature for 5 min process.
                    
DEBUG: 
                        Unique identifier for the scan environment defined by the user or lab. When multiple scans are performed
                        in a single environment conditions or settings, the entire scan environment can be differentiated
                        by this identifier. For example, scan on a sample of TiSe2 with layered of evaporated pyrene and
                        annealed at 300K temperature for 5 min process.
                    
documentation (NXobject.nxdl.xml:/identifierNAME):
DEBUG: documentation (NXobject.nxdl.xml:/identifierNAME):

			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
DEBUG: 
			An identifier for a (persistent) resource.

			An identifier, provided by some authority, that has been assigned to an
			object described by this ``NXobject``. To be useful, the identifier
			must not be reassigned to a different real-world object. It is typical for
			there to be some mechanism to resolve an identifier, obtaining metadata
			about the object. Identifiers for which some guarantees exist regarding
			this resolution process are called persistent identifiers.
			Persistent identifiers are also known as PIDs.
		
===== GROUP (//entry/instrument/scan_environment/spm_scan_control [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control" (6 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control" (6 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL):

                        The scan control information like scan region or phase space, type of scan (e.g.
                        mesh, spiral, etc.), and scan speed, etc. This group mainly stores the scan settings
                        data. For processed data or final experimental data would go to NXdata group.
                    
DEBUG: 
                        The scan control information like scan region or phase space, type of scan (e.g.
                        mesh, spiral, etc.), and scan speed, etc. This group mainly stores the scan settings
                        data. For processed data or final experimental data would go to NXdata group.
                    
documentation (NXspm_scan_control.nxdl.xml:):
DEBUG: documentation (NXspm_scan_control.nxdl.xml:):

        A scan is performed inside an N-dimensional phase space, where each dimension can correspond not only to real space coordinates (x,y) but also to any other parameter. This class contains detailed information about controlling the scan in such a phase space (or its subspace).
        
        scan_types:
        Trajectory: A list of N-dimensional sequential vectors describes the trajectory line for a full scan.
        Mesh: For each dimension a range and a direction are chosen. When a scan along a dimension is done, a single step in the next dimension is taken, and then the scan in the previous dimension is repeated. As such we can speak about the fastest and the slowest scan axes.
        Snake: Similar to a mesh scan but with the scanning direction reversed after each line.
        Spiral: A scan taken along a spiral trajectory.
        Linear: A scan where the scanning will be performed along a single independent axis.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        
        Scan_control_types:
        Stepping: At each step, a movement to the next point is performed; correction (for example backlash) or active regulation (feedback loop) may or may not be applied. After the movement is done, the measurement is performed without the movement.
        Continuous: The scanning of each line in an N-dimensional phase space is done without stopping; measurements are done simultaneously with the movement.
        Oscillating: Scanning over a scan point continuously and then moving to start scanning at the next position.
    
DEBUG: 
        A scan is performed inside an N-dimensional phase space, where each dimension can correspond not only to real space coordinates (x,y) but also to any other parameter. This class contains detailed information about controlling the scan in such a phase space (or its subspace).
        
        scan_types:
        Trajectory: A list of N-dimensional sequential vectors describes the trajectory line for a full scan.
        Mesh: For each dimension a range and a direction are chosen. When a scan along a dimension is done, a single step in the next dimension is taken, and then the scan in the previous dimension is repeated. As such we can speak about the fastest and the slowest scan axes.
        Snake: Similar to a mesh scan but with the scanning direction reversed after each line.
        Spiral: A scan taken along a spiral trajectory.
        Linear: A scan where the scanning will be performed along a single independent axis.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        
        Scan_control_types:
        Stepping: At each step, a movement to the next point is performed; correction (for example backlash) or active regulation (feedback loop) may or may not be applied. After the movement is done, the measurement is performed without the movement.
        Continuous: The scanning of each line in an N-dimensional phase space is done without stopping; measurements are done simultaneously with the movement.
        Oscillating: Scanning over a scan point continuously and then moving to start scanning at the next position.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control@NX_class)
value: NXspm_scan_control
DEBUG: value: NXspm_scan_control
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL
NXspm_scan_control.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/independent_scan_axes): <HDF5 dataset "independent_scan_axes": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/independent_scan_axes): <HDF5 dataset "independent_scan_axes": shape (), type "|O">
value: ['Y', 'X']
DEBUG: value: ['Y', 'X']
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
classes:
NXspm_scan_control.nxdl.xml:/independent_scan_axes
DEBUG: classes:
NXspm_scan_control.nxdl.xml:/independent_scan_axes
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_control.nxdl.xml:/independent_scan_axes):
DEBUG: documentation (NXspm_scan_control.nxdl.xml:/independent_scan_axes):

            An array of scan axes which are controlled independently of each other.
            (e.g. X, Y, Z, or other physical dimensions)
            
            The array elements are in the order of axes of the scan from the fastest to the slowest.
        
DEBUG: 
            An array of scan axes which are controlled independently of each other.
            (e.g. X, Y, Z, or other physical dimensions)
            
            The array elements are in the order of axes of the scan from the fastest to the slowest.
        
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan" (16 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan" (16 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN):

                            The mesh scan is a common technique used in SPM to scan the surface of the sample
                            in a grid pattern.
                        
DEBUG: 
                            The mesh scan is a common technique used in SPM to scan the surface of the sample
                            in a grid pattern.
                        
documentation (NXspm_scan_control.nxdl.xml:/meshSCAN):
DEBUG: documentation (NXspm_scan_control.nxdl.xml:/meshSCAN):

            For each dimension a range and a direction are chosen. When a scan along a dimension is done,
            a single step in the next dimension is taken, and then the scan in the previous dimension is
            repeated. As such we can speak about the fastest and the slowest scan axes.
        
DEBUG: 
            For each dimension a range and a direction are chosen. When a scan along a dimension is done,
            a single step in the next dimension is taken, and then the scan in the previous dimension is
            repeated. As such we can speak about the fastest and the slowest scan axes.
        
documentation (NXspm_scan_pattern.nxdl.xml:):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:):

        Basic base class to define the pattern of a scan in a given scan region.
        
        The base class is intended to handle the following scan types or patterns:
        
        Trajectory: A list of N-dimensional sequential vectors, representing a point in phase space, describes
          the trajectory line for a full scan.
        Mesh: For each dimension, a range and a direction are chosen. When a scan along a dimension is done, a
          single step in the next dimension is taken, and then the scan in the previous dimension is repeated.
          As such we can speak about the fastest and the slowest scan axes.
          
        Snake: Similar to a mesh scan but the current scanning direction reversed after each line completed.
        Spiral: A scan taken along a spiral trajectory.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        Linear: A scan where the scanning will be performed along a single independent axis.
    
DEBUG: 
        Basic base class to define the pattern of a scan in a given scan region.
        
        The base class is intended to handle the following scan types or patterns:
        
        Trajectory: A list of N-dimensional sequential vectors, representing a point in phase space, describes
          the trajectory line for a full scan.
        Mesh: For each dimension, a range and a direction are chosen. When a scan along a dimension is done, a
          single step in the next dimension is taken, and then the scan in the previous dimension is repeated.
          As such we can speak about the fastest and the slowest scan axes.
          
        Snake: Similar to a mesh scan but the current scanning direction reversed after each line completed.
        Spiral: A scan taken along a spiral trajectory.
        Tilt: At each step, a proportional movement is done in all dimensions (an special case of Trajectory scan).
        Linear: A scan where the scanning will be performed along a single independent axis.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan@NX_class)
value: NXspm_scan_pattern
DEBUG: value: NXspm_scan_pattern
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN
NXspm_scan_control.nxdl.xml:/meshSCAN
NXspm_scan_pattern.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/backward_speed_y): <HDF5 dataset "backward_speed_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/backward_speed_y): <HDF5 dataset "backward_speed_y": shape (), type "<f8">
value: 3.99872000e-10
DEBUG: value: 3.99872000e-10
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/backward_speedN
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/backward_speedN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/backward_speedN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/backward_speedN):

            Define the scan speed in the backward directions (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension.
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            Define the scan speed in the backward directions (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension.
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/backward_speed_y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/backward_speed_y@units)
value: meter / second
DEBUG: value: meter / second
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/backward_speedN
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/backward_speedN
NXspm_scan_pattern.nxdl.xml:/backward_speedN@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/backward_speedN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/forward_speed_y): <HDF5 dataset "forward_speed_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/forward_speed_y): <HDF5 dataset "forward_speed_y": shape (), type "<f8">
value: 9.99680000e-11
DEBUG: value: 9.99680000e-11
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/forward_speedN
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/forward_speedN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/forward_speedN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/forward_speedN):

            Define the scan speed in the forward directions (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension.
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            Define the scan speed in the forward directions (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension.
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/forward_speed_y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/forward_speed_y@units)
value: meter / second
DEBUG: value: meter / second
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/forward_speedN
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/forward_speedN
NXspm_scan_pattern.nxdl.xml:/forward_speedN@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/forward_speedN@units [NX_ANY]
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@signal)
value: frequency_shift
DEBUG: value: frequency_shift
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/frequency_shift): <HDF5 dataset "frequency_shift": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/frequency_shift): <HDF5 dataset "frequency_shift": shape (128, 128), type ">f4">
value: [-1.75658119, -2.06641316, -1.80084121, ..., -2.08539176, -1.85696685, -1.87276816]
DEBUG: value: [-1.75658119, -2.06641316, -1.80084121, ..., -2.08539176, -1.85696685, -1.87276816]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/frequency_shift@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/frequency_shift@long_name)
value: frequency_shift (hertz)
DEBUG: value: frequency_shift (hertz)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/frequency_shift@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/frequency_shift@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_backward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@signal)
value: frequency_shift
DEBUG: value: frequency_shift
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/frequency_shift): <HDF5 dataset "frequency_shift": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/frequency_shift): <HDF5 dataset "frequency_shift": shape (128, 128), type ">f4">
value: [-1.90274155, -1.91846573, -1.93628621, ..., -1.80584669, -1.93137515, -1.88308132]
DEBUG: value: [-1.90274155, -1.91846573, -1.93628621, ..., -1.80584669, -1.93137515, -1.88308132]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/frequency_shift@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/frequency_shift@long_name)
value: frequency_shift (hertz)
DEBUG: value: frequency_shift (hertz)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/frequency_shift@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/frequency_shift@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/frequency_shift_forward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@signal)
value: imput_4
DEBUG: value: imput_4
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/imput_4): <HDF5 dataset "imput_4": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/imput_4): <HDF5 dataset "imput_4": shape (128, 128), type ">f4">
value: [0.00077921, 0.00090984, 0.00097184, ..., -0.00069557, -0.00084838, -0.00083494]
DEBUG: value: [0.00077921, 0.00090984, 0.00097184, ..., -0.00069557, -0.00084838, -0.00083494]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/imput_4@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/imput_4@long_name)
value: imput_4 (volt)
DEBUG: value: imput_4 (volt)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/imput_4@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/imput_4@units)
value: volt
DEBUG: value: volt
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_backward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@signal)
value: imput_4
DEBUG: value: imput_4
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/imput_4): <HDF5 dataset "imput_4": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/imput_4): <HDF5 dataset "imput_4": shape (128, 128), type ">f4">
value: [0.00046444, -0.00063396, -0.00088052, ..., 0.00098887, 0.00046816, -0.00056118]
DEBUG: value: [0.00046444, -0.00063396, -0.00088052, ..., 0.00098887, 0.00046816, -0.00056118]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/imput_4@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/imput_4@long_name)
value: imput_4 (volt)
DEBUG: value: imput_4 (volt)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/imput_4@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/imput_4@units)
value: volt
DEBUG: value: volt
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/input_4_forward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@signal)
value: lix_1_omega
DEBUG: value: lix_1_omega
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/lix_1_omega): <HDF5 dataset "lix_1_omega": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/lix_1_omega): <HDF5 dataset "lix_1_omega": shape (128, 128), type ">f4">
value: [-6.42740628e-15, -9.57933616e-15, 1.79215845e-15, ..., 9.61310228e-15, 5.14713599e-16, -1.04481997e-14]
DEBUG: value: [-6.42740628e-15, -9.57933616e-15, 1.79215845e-15, ..., 9.61310228e-15, 5.14713599e-16, -1.04481997e-14]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/lix_1_omega@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/lix_1_omega@long_name)
value: lix_1_omega (ampere)
DEBUG: value: lix_1_omega (ampere)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/lix_1_omega@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/lix_1_omega@units)
value: ampere
DEBUG: value: ampere
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_backward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@signal)
value: lix_1_omega
DEBUG: value: lix_1_omega
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/lix_1_omega): <HDF5 dataset "lix_1_omega": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/lix_1_omega): <HDF5 dataset "lix_1_omega": shape (128, 128), type ">f4">
value: [3.49040678e-15, 5.49645291e-16, -1.20006357e-15, ..., 7.80060064e-16, 3.36023052e-16, 7.79443275e-18]
DEBUG: value: [3.49040678e-15, 5.49645291e-16, -1.20006357e-15, ..., 7.80060064e-16, 3.36023052e-16, 7.79443275e-18]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/lix_1_omega@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/lix_1_omega@long_name)
value: lix_1_omega (ampere)
DEBUG: value: lix_1_omega (ampere)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/lix_1_omega@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/lix_1_omega@units)
value: ampere
DEBUG: value: ampere
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/lix_1_omega_forward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@signal)
value: liy_1_omega
DEBUG: value: liy_1_omega
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/liy_1_omega): <HDF5 dataset "liy_1_omega": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/liy_1_omega): <HDF5 dataset "liy_1_omega": shape (128, 128), type ">f4">
value: [-3.88837124e-15, 9.37044343e-15, 7.73512520e-15, ..., -3.89206049e-15, -1.37858898e-14, 1.97853280e-15]
DEBUG: value: [-3.88837124e-15, 9.37044343e-15, 7.73512520e-15, ..., -3.89206049e-15, -1.37858898e-14, 1.97853280e-15]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/liy_1_omega@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/liy_1_omega@long_name)
value: liy_1_omega (ampere)
DEBUG: value: liy_1_omega (ampere)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/liy_1_omega@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/liy_1_omega@units)
value: ampere
DEBUG: value: ampere
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_backward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_pattern/NXdata]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA):

            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
DEBUG: 
            The scan data is the data collected during the scan.
            If the scan has several channels or derivatives from the channel data, please
            duplicate this NXdata group for each.
        
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@axes)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@signal)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@signal)
value: liy_1_omega
DEBUG: value: liy_1_omega
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@x_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@y_indices)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/liy_1_omega): <HDF5 dataset "liy_1_omega": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/liy_1_omega): <HDF5 dataset "liy_1_omega": shape (128, 128), type ">f4">
value: [-8.47126650e-16, -1.43359969e-16, -3.48881245e-15, ..., -1.61680781e-15, -1.59096557e-15, -6.28633760e-16]
DEBUG: value: [-8.47126650e-16, -1.43359969e-16, -3.48881245e-15, ..., -1.61680781e-15, -1.59096557e-15, -6.28633760e-16]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/DATA):

                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
DEBUG: 
                The data (e.g. current, voltage, temperature) field that can be plotted against
                the axes.
            
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/liy_1_omega@long_name)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/liy_1_omega@long_name)
value: liy_1_omega (ampere)
DEBUG: value: liy_1_omega (ampere)
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/liy_1_omega@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/liy_1_omega@units)
value: ampere
DEBUG: value: ampere
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME):

                The name of the axis that corresponds to the data field.
            
DEBUG: 
                The name of the axis that corresponds to the data field.
            
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/liy_1_omega_forward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/scan_points_x): <HDF5 dataset "scan_points_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/scan_points_x): <HDF5 dataset "scan_points_x": shape (), type "<f8">
value: 128
DEBUG: value: 128
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_x):

                                The number of points scanned in x direction.
                            
DEBUG: 
                                The number of points scanned in x direction.
                            
documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):

            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/scan_points_y): <HDF5 dataset "scan_points_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/scan_points_y): <HDF5 dataset "scan_points_y": shape (), type "<f8">
value: 128
DEBUG: value: 128
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y
NXspm_scan_pattern.nxdl.xml:/scan_pointsN
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/scan_points_y):

                                The number of points scanned in y direction.
                            
DEBUG: 
                                The number of points scanned in y direction.
                            
documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/scan_pointsN):

            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            Define the total number of points in the given axis the scan to be performed (except the spiral and trajectory scans).
            Rename the field, according to the name of the dimension (e.g. scan_points_x, scan_points_voltage).
            
            Trajectory scan: N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_x): <HDF5 dataset "step_size_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_x): <HDF5 dataset "step_size_x": shape (), type "<f8">
value: 1.56250000e-11
DEBUG: value: 1.56250000e-11
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x):

                                The step size in x direction.
                            
DEBUG: 
                                The step size in x direction.
                            
documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):

            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x
NXspm_scan_pattern.nxdl.xml:/step_sizeN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_x@units [NX_LENGTH]
NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_y): <HDF5 dataset "step_size_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_y): <HDF5 dataset "step_size_y": shape (), type "<f8">
value: 1.56250000e-11
DEBUG: value: 1.56250000e-11
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y):

                                The step size in y direction.
                            
DEBUG: 
                                The step size in y direction.
                            
documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/step_sizeN):

            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            The size of each step in the scan on each dimension (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. step_size_x, step_size_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/step_size_y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y
NXspm_scan_pattern.nxdl.xml:/step_sizeN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/meshSCAN/step_size_y@units [NX_LENGTH]
NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
DEBUG: NXspm_scan_pattern.nxdl.xml:/step_sizeN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/stepping_x): <HDF5 dataset "stepping_x": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/stepping_x): <HDF5 dataset "stepping_x": shape (), type "<i8">
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):

            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/stepping_y): <HDF5 dataset "stepping_y": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/mesh_scan/stepping_y): <HDF5 dataset "stepping_y": shape (), type "<i8">
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_pattern', 'NX_NUMBER']
classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
DEBUG: classes:
NXspm_scan_pattern.nxdl.xml:/steppingN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):
DEBUG: documentation (NXspm_scan_pattern.nxdl.xml:/steppingN):

            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
DEBUG: 
            The number of steps the probe jumps over the scan steps or points in the scanning process. This comes into picture, when not
            every point from the scan_points is scanned along an axis (except the spiral and trajectory scans).
            
            Rename the field, according to the name of the dimension (e.g. stepping_x, stepping_voltage).
            
            Trajectory scan:  N refers to the nth trajectory line (line between two trajectory points).
            Spiral scan: N refers to the nth circle from center.
        
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_control_type): <HDF5 dataset "scan_control_type": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_control_type): <HDF5 dataset "scan_control_type": shape (), type "|O">
value: continuous
DEBUG: value: continuous
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
classes:
NXspm_scan_control.nxdl.xml:/scan_control_type
DEBUG: classes:
NXspm_scan_control.nxdl.xml:/scan_control_type
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
enumeration (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG: enumeration (NXspm_scan_control.nxdl.xml:/scan_control_type):
-> stepping
DEBUG: -> stepping
-> continuous
DEBUG: -> continuous
-> oscillating
DEBUG: -> oscillating
documentation (NXspm_scan_control.nxdl.xml:/scan_control_type):
DEBUG: documentation (NXspm_scan_control.nxdl.xml:/scan_control_type):

            This string describes how the scan was performed.
        
DEBUG: 
            This string describes how the scan was performed.
        
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_name): <HDF5 dataset "scan_name": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_name): <HDF5 dataset "scan_name": shape (), type "|O">
value: A%y%m%d.%H%M%S-%N
DEBUG: value: A%y%m%d.%H%M%S-%N
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scanTAG
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scanTAG
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scanTAG):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scanTAG):

                            If there are multiple scans performed under the same environment, use this field
                            to differentiate among them.
                        
DEBUG: 
                            If there are multiple scans performed under the same environment, use this field
                            to differentiate among them.
                        
===== GROUP (//entry/instrument/scan_environment/spm_scan_control/scan_region [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_region]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/scan_region" (10 members)>
DEBUG: ===== GROUP (//entry/instrument/scan_environment/spm_scan_control/scan_region [NXafm::/NXentry/NXinstrument/NXenvironment/NXspm_scan_control/NXspm_scan_region]): <HDF5 group "/entry/instrument/scan_environment/spm_scan_control/scan_region" (10 members)>
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region):

                            The scan region (phase space or sub-phase space) is the region where the scan is
                            performed.
                        
DEBUG: 
                            The scan region (phase space or sub-phase space) is the region where the scan is
                            performed.
                        
documentation (NXspm_scan_control.nxdl.xml:/scan_region):
DEBUG: documentation (NXspm_scan_control.nxdl.xml:/scan_region):

            The scan region is the area of phase space or sub-phase space where the scan is
            performed. The region could be N-dimensional and is defined by the minimum and
            maximum values of the scan axes.
        
DEBUG: 
            The scan region is the area of phase space or sub-phase space where the scan is
            performed. The region could be N-dimensional and is defined by the minimum and
            maximum values of the scan axes.
        
documentation (NXspm_scan_region.nxdl.xml:):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:):

        The scan region is the area of phase space or sub-phase space where the scan is
        performed. The region could be N-dimensional and is defined by the minimum and
        maximum values of the scan axes.
    
DEBUG: 
        The scan region is the area of phase space or sub-phase space where the scan is
        performed. The region could be N-dimensional and is defined by the minimum and
        maximum values of the scan axes.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region@NX_class)
value: NXspm_scan_region
DEBUG: value: NXspm_scan_region
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region
NXspm_scan_control.nxdl.xml:/scan_region
NXspm_scan_region.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_n): <HDF5 dataset "scan_angle_n": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_n): <HDF5 dataset "scan_angle_n": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG: classes:
NXspm_scan_region.nxdl.xml:/scan_angleN
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):

            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG: 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_n@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_n@units)
value: degree
DEBUG: value: degree
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG: classes:
NXspm_scan_region.nxdl.xml:/scan_angleN
NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_x): <HDF5 dataset "scan_angle_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_x): <HDF5 dataset "scan_angle_x": shape (), type "<f8">
value: 0.0
DEBUG: value: 0.0
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x):

                                The angle of the scan region in x direction.
                            
DEBUG: 
                                The angle of the scan region in x direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_angleN):

            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
DEBUG: 
            The orientation of the scan region or subspace. Usually, the scan_offset and scan_range are enough
            to define the scan region. This field defines how the spatial space is oriented with respect to
            the frame of reference.
            
            Rename the field describing the angle with an axis of the spatial space (e.g. scan_angle_x).
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_angle_x@units)
value: degree
DEBUG: value: degree
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x
NXspm_scan_region.nxdl.xml:/scan_angleN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x@units [NX_ANGLE]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_angle_x@units [NX_ANGLE]
NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_angleN@units [NX_ANGLE]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_x): <HDF5 dataset "scan_end_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_x): <HDF5 dataset "scan_end_x": shape (), type "<f8">
value: -0.00000033
DEBUG: value: -0.00000033
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x):

                                The end of the scan in x direction.
                            
DEBUG: 
                                The end of the scan in x direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_endN):

            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG: 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x
NXspm_scan_region.nxdl.xml:/scan_endN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_x@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_y): <HDF5 dataset "scan_end_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_y): <HDF5 dataset "scan_end_y": shape (), type "<f8">
value: -0.00000031
DEBUG: value: -0.00000031
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y):

                                The end of the scan in y direction.
                            
DEBUG: 
                                The end of the scan in y direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_endN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_endN):

            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG: 
            The end of the scan is the ending point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            Note: The scan_offset and scan_range are equivalent to the scan_start and scan_end.
            
            For N-dimensional, it is a list of N numbers.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_end_y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y
NXspm_scan_region.nxdl.xml:/scan_endN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_end_y@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_endN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_x): <HDF5 dataset "scan_offset_value_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_x): <HDF5 dataset "scan_offset_value_x": shape (), type "<f8">
value: -0.00000033
DEBUG: value: -0.00000033
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x):

                                The offset of the scan in x direction.
                            
DEBUG: 
                                The offset of the scan in x direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):

            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG: 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_x@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_y): <HDF5 dataset "scan_offset_value_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_y): <HDF5 dataset "scan_offset_value_y": shape (), type "<f8">
value: -0.00000031
DEBUG: value: -0.00000031
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y):

                                The offset of the scan in y direction.
                            
DEBUG: 
                                The offset of the scan in y direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_offset_valueN):

            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
DEBUG: 
            The offset of center of the scan region from the origin along the specific scan axis.
            
            'N' denotes the name of the specific scan axis. (Offset, start and end positions are related)
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_offset_value_y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y
NXspm_scan_region.nxdl.xml:/scan_offset_valueN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_offset_value_y@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_offset_valueN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_x): <HDF5 dataset "scan_range_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_x): <HDF5 dataset "scan_range_x": shape (), type "<f8">
value: 2.00000000e-09
DEBUG: value: 2.00000000e-09
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x):

                                The range of the scan in x direction.
                            
DEBUG: 
                                The range of the scan in x direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):

            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG: 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x
NXspm_scan_region.nxdl.xml:/scan_rangeN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_x@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_y): <HDF5 dataset "scan_range_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_y): <HDF5 dataset "scan_range_y": shape (), type "<f8">
value: 2.00000000e-09
DEBUG: value: 2.00000000e-09
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y):

                                The range of the scan in y direction.
                            
DEBUG: 
                                The range of the scan in y direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_rangeN):

            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
DEBUG: 
            The range of the scan is the difference start and end values of the scan region
            along the dimension 'N'.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_range_y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y
NXspm_scan_region.nxdl.xml:/scan_rangeN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_range_y@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_rangeN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_x): <HDF5 dataset "scan_start_x": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_x): <HDF5 dataset "scan_start_x": shape (), type "<f8">
value: -0.00000033
DEBUG: value: -0.00000033
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x):

                                The start of the scan in x direction.
                            
DEBUG: 
                                The start of the scan in x direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_startN):

            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG: 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_x@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x
NXspm_scan_region.nxdl.xml:/scan_startN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_x@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_y): <HDF5 dataset "scan_start_y": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_y): <HDF5 dataset "scan_start_y": shape (), type "<f8">
value: -0.00000031
DEBUG: value: -0.00000031
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y):

                                The start of the scan in y direction.
                            
DEBUG: 
                                The start of the scan in y direction.
                            
documentation (NXspm_scan_region.nxdl.xml:/scan_startN):
DEBUG: documentation (NXspm_scan_region.nxdl.xml:/scan_startN):

            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
DEBUG: 
            The start of the scan is the starting point of the scan region (phase space or sub-phase space)
            for each independent scan axis.
            
            For N-dimensional, it is a list of N numbers.
        
===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_y@units)
DEBUG: ===== ATTRS (//entry/instrument/scan_environment/spm_scan_control/scan_region/scan_start_y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NXspm_scan_region', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y
NXspm_scan_region.nxdl.xml:/scan_startN
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y@units [NX_LENGTH]
DEBUG: NXspm.nxdl.xml:/ENTRY/INSTRUMENT/SCAN_ENVIRONMENT/SPM_SCAN_CONTROL/scan_region/scan_start_y@units [NX_LENGTH]
NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
DEBUG: NXspm_scan_region.nxdl.xml:/scan_startN@units [NX_ANY]
===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_type): <HDF5 dataset "scan_type": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/scan_environment/spm_scan_control/scan_type): <HDF5 dataset "scan_type": shape (), type "|O">
value: mesh
DEBUG: value: mesh
classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXenvironment', 'NXspm_scan_control', 'NX_CHAR']
classes:
NXspm_scan_control.nxdl.xml:/scan_type
DEBUG: classes:
NXspm_scan_control.nxdl.xml:/scan_type
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
enumeration (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG: enumeration (NXspm_scan_control.nxdl.xml:/scan_type):
-> trajectory
DEBUG: -> trajectory
-> mesh
DEBUG: -> mesh
-> snake
DEBUG: -> snake
-> spiral
DEBUG: -> spiral
-> linear
DEBUG: -> linear
-> tilt
DEBUG: -> tilt
documentation (NXspm_scan_control.nxdl.xml:/scan_type):
DEBUG: documentation (NXspm_scan_control.nxdl.xml:/scan_type):

            This group specifies how the trajectory of the scan is defined.
        
DEBUG: 
            This group specifies how the trajectory of the scan is defined.
        
===== GROUP (//entry/instrument/software [NXafm::/NXentry/NXinstrument/NXfabrication]): <HDF5 group "/entry/instrument/software" (3 members)>
DEBUG: ===== GROUP (//entry/instrument/software [NXafm::/NXentry/NXinstrument/NXfabrication]): <HDF5 group "/entry/instrument/software" (3 members)>
classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software):

                    The software description of core instrument setup of experiment.
                    Usually, the entire instrument is supplied by a single name/manufacturer/model/etc.
                    To describe the software from any sub-components, use the ``software`` group of that component.
                
DEBUG: 
                    The software description of core instrument setup of experiment.
                    Usually, the entire instrument is supplied by a single name/manufacturer/model/etc.
                    To describe the software from any sub-components, use the ``software`` group of that component.
                
documentation (NXinstrument.nxdl.xml:/FABRICATION):
DEBUG: documentation (NXinstrument.nxdl.xml:/FABRICATION):

DEBUG: 
documentation (NXfabrication.nxdl.xml:):
DEBUG: documentation (NXfabrication.nxdl.xml:):

         Details about a component as it is defined by its manufacturer.
    
DEBUG: 
         Details about a component as it is defined by its manufacturer.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/software@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/software@NX_class)
value: NXfabrication
DEBUG: value: NXfabrication
classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software
NXinstrument.nxdl.xml:/FABRICATION
NXfabrication.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/software/model): <HDF5 dataset "model": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/software/model): <HDF5 dataset "model": shape (), type "|O">
value: Generic 4
DEBUG: value: Generic 4
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/model
NXfabrication.nxdl.xml:/model
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/model
NXfabrication.nxdl.xml:/model
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/model):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/model):

                        Version or model of the component named by the manufacturer.
                    
DEBUG: 
                        Version or model of the component named by the manufacturer.
                    
documentation (NXfabrication.nxdl.xml:/model):
DEBUG: documentation (NXfabrication.nxdl.xml:/model):

             Version or model of the component named by the manufacturer.
        
DEBUG: 
             Version or model of the component named by the manufacturer.
        
===== ATTRS (//entry/instrument/software/model@version)
DEBUG: ===== ATTRS (//entry/instrument/software/model@version)
value: 4
DEBUG: value: 4
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/model
NXfabrication.nxdl.xml:/model
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/model
NXfabrication.nxdl.xml:/model
NXfabrication.nxdl.xml:/model@version - [NX_CHAR]
DEBUG: NXfabrication.nxdl.xml:/model@version - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXfabrication.nxdl.xml:/model/version):
DEBUG: documentation (NXfabrication.nxdl.xml:/model/version):

                 If it is possible that different versions exist, the value in this field should be made
                 specific enough to resolve the version.
            
DEBUG: 
                 If it is possible that different versions exist, the value in this field should be made
                 specific enough to resolve the version.
            
===== FIELD (//entry/instrument/software/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/software/name): <HDF5 dataset "name": shape (), type "|O">
value: Nanonis
DEBUG: value: Nanonis
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/name
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/name
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/name):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/name):

                        Name of the software.
                    
DEBUG: 
                        Name of the software.
                    
===== FIELD (//entry/instrument/software/vendor): <HDF5 dataset "vendor": shape (), type "|O">
DEBUG: ===== FIELD (//entry/instrument/software/vendor): <HDF5 dataset "vendor": shape (), type "|O">
value: Nanonis
DEBUG: value: Nanonis
classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXfabrication', 'NX_CHAR']
classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/vendor
NXfabrication.nxdl.xml:/vendor
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/vendor
NXfabrication.nxdl.xml:/vendor
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/vendor):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/INSTRUMENT/software/vendor):

                        Company name of the manufacturer.
                    
DEBUG: 
                        Company name of the manufacturer.
                    
documentation (NXfabrication.nxdl.xml:/vendor):
DEBUG: documentation (NXfabrication.nxdl.xml:/vendor):

             Company name of the manufacturer.
        
DEBUG: 
             Company name of the manufacturer.
        
===== GROUP (//entry/instrument/spm_cantilever [NXafm::/NXentry/NXinstrument/NXspm_cantilever]): <HDF5 group "/entry/instrument/spm_cantilever" (4 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever [NXafm::/NXentry/NXinstrument/NXspm_cantilever]): <HDF5 group "/entry/instrument/spm_cantilever" (4 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER
NXspm_cantilever.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER
NXspm_cantilever.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER):

                    The cantilever information.
                
DEBUG: 
                    The cantilever information.
                
documentation (NXspm_cantilever.nxdl.xml:):
DEBUG: documentation (NXspm_cantilever.nxdl.xml:):

        A base class to describe the cantilever used in Atomic Force Microscopy (AFM).
    
DEBUG: 
        A base class to describe the cantilever used in Atomic Force Microscopy (AFM).
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever@NX_class)
value: NXspm_cantilever
DEBUG: value: NXspm_cantilever
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER
NXspm_cantilever.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER
NXspm_cantilever.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/spm_cantilever/amplitude_positioner [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner]): <HDF5 group "/entry/instrument/spm_cantilever/amplitude_positioner" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/amplitude_positioner [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner]): <HDF5 group "/entry/instrument/spm_cantilever/amplitude_positioner" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/amplitude_positioner
NXspm_cantilever.nxdl.xml:/amplitude_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/amplitude_positioner
NXspm_cantilever.nxdl.xml:/amplitude_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/amplitude_positioner):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/amplitude_positioner):

                        The amplitude positioner of the cantilever.
                    
DEBUG: 
                        The amplitude positioner of the cantilever.
                    
documentation (NXspm_cantilever.nxdl.xml:/amplitude_positioner):
DEBUG: documentation (NXspm_cantilever.nxdl.xml:/amplitude_positioner):

            The amplitude positioner of the cantilever.
        
DEBUG: 
            The amplitude positioner of the cantilever.
        
documentation (NXpositioner.nxdl.xml:):
DEBUG: documentation (NXpositioner.nxdl.xml:):

        A generic positioner such as a motor or piezo-electric transducer.  
    
DEBUG: 
        A generic positioner such as a motor or piezo-electric transducer.  
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/amplitude_positioner@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/amplitude_positioner@NX_class)
value: NXpositioner
DEBUG: value: NXpositioner
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/amplitude_positioner
NXspm_cantilever.nxdl.xml:/amplitude_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/amplitude_positioner
NXspm_cantilever.nxdl.xml:/amplitude_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/spm_cantilever/amplitude_positioner/actuator [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator]): <HDF5 group "/entry/instrument/spm_cantilever/amplitude_positioner/actuator" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/amplitude_positioner/actuator [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator]): <HDF5 group "/entry/instrument/spm_cantilever/amplitude_positioner/actuator" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpositioner.nxdl.xml:/actuator):
DEBUG: documentation (NXpositioner.nxdl.xml:/actuator):

            The actuator of the positioner which is responsible for the movement of the
            probe.
        
DEBUG: 
            The actuator of the positioner which is responsible for the movement of the
            probe.
        
documentation (NXactuator.nxdl.xml:):
DEBUG: documentation (NXactuator.nxdl.xml:):

         An actuator used to control an external condition.
         
         The condition itself is described in :ref:`NXenvironment`.
    
DEBUG: 
         An actuator used to control an external condition.
         
         The condition itself is described in :ref:`NXenvironment`.
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/amplitude_positioner/actuator@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/amplitude_positioner/actuator@NX_class)
value: NXactuator
DEBUG: value: NXactuator
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator/NXpid_controller]): <HDF5 group "/entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback" (2 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator/NXpid_controller]): <HDF5 group "/entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback" (2 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpositioner.nxdl.xml:/actuator/feedback):
DEBUG: documentation (NXpositioner.nxdl.xml:/actuator/feedback):

                The feedback of the actual position of the positioner.
            
DEBUG: 
                The feedback of the actual position of the positioner.
            
documentation (NXactuator.nxdl.xml:/PID_CONTROLLER):
DEBUG: documentation (NXactuator.nxdl.xml:/PID_CONTROLLER):

             If the actuator is PID-controlled, the settings of the PID controller can be
             stored here.
        
DEBUG: 
             If the actuator is PID-controlled, the settings of the PID controller can be
             stored here.
        
documentation (NXpid_controller.nxdl.xml:):
DEBUG: documentation (NXpid_controller.nxdl.xml:):

        A description of a feedback system in terms of the settings of a proportional-integral-derivative (PID) controller.
         
        Automated control of a physical quantity is often achieved by connecting the output of a sensor to an actuator
        (e.g. using a thermocouple to monitor the effect of a heater and influence the power provided to it). The physical
        quantity being operated on is typically referred to as the "Process Variable", with the desired value being the 
        "Setpoint" (which may vary as a function of time) and the "Error Value" is the time-varying function of the difference 
        between the Setpoint value and the concurrent measurement of the Process Variable  (Error Value = Setpoint - Process Variable).
         
        A PID controller calculates an output value for use as an input signal to an actuator via the weighted sum of four terms:
        * Proportional: the current Error Value
        * Integral: the integral of the Error Value function
        * Derivative: the first derivative of the Error Value function
        * Feed Forward: A model of the physical system (optional)
        
        The weightings of these terms are given by the corresponding constants:
        * K_p
        * K_i
        * K_d
        * K_ff
         
        A classic PID controller only implements the P, I and D terms and the values of the K_p, K_i and K_d constants are sufficient to fully
        describe the behaviour of the feedback system implemented by such a PID controller. The inclusion of a Feed Forward term in a feedback system
        is a modern adaptation that aids optimization of the automated control. It is not present in all PID controllers, but it is also not uncommon.
         
        Note that the ``NXpid_controller`` is designed to be a child object of the actuator that its output is connected to. The parent object
        representing the actuator is likely to be represented by an ``NXactuator`` or ``NXpositioner`` base class, but there is a wide variety
        of possible applications for PID controllers.
    
DEBUG: 
        A description of a feedback system in terms of the settings of a proportional-integral-derivative (PID) controller.
         
        Automated control of a physical quantity is often achieved by connecting the output of a sensor to an actuator
        (e.g. using a thermocouple to monitor the effect of a heater and influence the power provided to it). The physical
        quantity being operated on is typically referred to as the "Process Variable", with the desired value being the 
        "Setpoint" (which may vary as a function of time) and the "Error Value" is the time-varying function of the difference 
        between the Setpoint value and the concurrent measurement of the Process Variable  (Error Value = Setpoint - Process Variable).
         
        A PID controller calculates an output value for use as an input signal to an actuator via the weighted sum of four terms:
        * Proportional: the current Error Value
        * Integral: the integral of the Error Value function
        * Derivative: the first derivative of the Error Value function
        * Feed Forward: A model of the physical system (optional)
        
        The weightings of these terms are given by the corresponding constants:
        * K_p
        * K_i
        * K_d
        * K_ff
         
        A classic PID controller only implements the P, I and D terms and the values of the K_p, K_i and K_d constants are sufficient to fully
        describe the behaviour of the feedback system implemented by such a PID controller. The inclusion of a Feed Forward term in a feedback system
        is a modern adaptation that aids optimization of the automated control. It is not present in all PID controllers, but it is also not uncommon.
         
        Note that the ``NXpid_controller`` is designed to be a child object of the actuator that its output is connected to. The parent object
        representing the actuator is likely to be represented by an ``NXactuator`` or ``NXpositioner`` base class, but there is a wide variety
        of possible applications for PID controllers.
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback@NX_class)
value: NXpid_controller
DEBUG: value: NXpid_controller
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback/K_i): <HDF5 dataset "K_i": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback/K_i): <HDF5 dataset "K_i": shape (), type "<f8">
value: 56027600000
DEBUG: value: 56027600000
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
classes:
NXpid_controller.nxdl.xml:/K_i
DEBUG: classes:
NXpid_controller.nxdl.xml:/K_i
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpid_controller.nxdl.xml:/K_i):
DEBUG: documentation (NXpid_controller.nxdl.xml:/K_i):

            Integral gain constant. This constant determines how strongly the output value
            should react to an accumulated offset in the Error Value that should have
            been corrected previously. since the integral term is proportional to both
            the magnitude and persistence of the Error Value over time.
        
DEBUG: 
            Integral gain constant. This constant determines how strongly the output value
            should react to an accumulated offset in the Error Value that should have
            been corrected previously. since the integral term is proportional to both
            the magnitude and persistence of the Error Value over time.
        
===== FIELD (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback/K_p): <HDF5 dataset "K_p": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/amplitude_positioner/actuator/feedback/K_p): <HDF5 dataset "K_p": shape (), type "<f8">
value: 42208300000
DEBUG: value: 42208300000
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
classes:
NXpid_controller.nxdl.xml:/K_p
DEBUG: classes:
NXpid_controller.nxdl.xml:/K_p
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpid_controller.nxdl.xml:/K_p):
DEBUG: documentation (NXpid_controller.nxdl.xml:/K_p):

            Proportional gain constant. This constant determines how strongly the output value
            directly follows the current Error Value. When this constant dominates, the output
            value is linearly proportional to the Error Value.
        
DEBUG: 
            Proportional gain constant. This constant determines how strongly the output value
            directly follows the current Error Value. When this constant dominates, the output
            value is linearly proportional to the Error Value.
        
===== GROUP (//entry/instrument/spm_cantilever/cantilever_config [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXspm_cantilever_config]): <HDF5 group "/entry/instrument/spm_cantilever/cantilever_config" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/cantilever_config [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXspm_cantilever_config]): <HDF5 group "/entry/instrument/spm_cantilever/cantilever_config" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config']
classes:
NXspm_cantilever.nxdl.xml:/cantilever_config
NXspm_cantilever_config.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_cantilever.nxdl.xml:/cantilever_config
NXspm_cantilever_config.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_cantilever.nxdl.xml:/cantilever_config):
DEBUG: documentation (NXspm_cantilever.nxdl.xml:/cantilever_config):

            The configuration parameters of the cantilever used in scanning probe
            microscopy.
        
DEBUG: 
            The configuration parameters of the cantilever used in scanning probe
            microscopy.
        
documentation (NXspm_cantilever_config.nxdl.xml:):
DEBUG: documentation (NXspm_cantilever_config.nxdl.xml:):

        This file defines the NXspm_cantilever_config base class, which contains configuration
        information about the cantilever used in the AFM (atomic force microscopy) experiments.
    
DEBUG: 
        This file defines the NXspm_cantilever_config base class, which contains configuration
        information about the cantilever used in the AFM (atomic force microscopy) experiments.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_config@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_config@NX_class)
value: NXspm_cantilever_config
DEBUG: value: NXspm_cantilever_config
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config']
classes:
NXspm_cantilever.nxdl.xml:/cantilever_config
NXspm_cantilever_config.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm_cantilever.nxdl.xml:/cantilever_config
NXspm_cantilever_config.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/spm_cantilever/cantilever_config/amplitude_excitation): <HDF5 dataset "amplitude_excitation": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_config/amplitude_excitation): <HDF5 dataset "amplitude_excitation": shape (), type "<f8">
value: 0.00865808
DEBUG: value: 0.00865808
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config', 'NX_NUMBER']
classes:
NXspm_cantilever_config.nxdl.xml:/amplitude_excitation
DEBUG: classes:
NXspm_cantilever_config.nxdl.xml:/amplitude_excitation
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_cantilever_config.nxdl.xml:/amplitude_excitation):
DEBUG: documentation (NXspm_cantilever_config.nxdl.xml:/amplitude_excitation):

            Either the drive amplitude in mv for the driving cantilever or the free-oscillation amplitude which is the
            resulted movement amplitude without interaction to the surface.
        
DEBUG: 
            Either the drive amplitude in mv for the driving cantilever or the free-oscillation amplitude which is the
            resulted movement amplitude without interaction to the surface.
        
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_config/amplitude_excitation@units)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_config/amplitude_excitation@units)
value: volt
DEBUG: value: volt
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_config', 'NX_NUMBER']
classes:
NXspm_cantilever_config.nxdl.xml:/amplitude_excitation
DEBUG: classes:
NXspm_cantilever_config.nxdl.xml:/amplitude_excitation
NXspm_cantilever_config.nxdl.xml:/amplitude_excitation@units [NX_ANY]
DEBUG: NXspm_cantilever_config.nxdl.xml:/amplitude_excitation@units [NX_ANY]
===== GROUP (//entry/instrument/spm_cantilever/cantilever_oscillator [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXspm_cantilever_oscillator]): <HDF5 group "/entry/instrument/spm_cantilever/cantilever_oscillator" (7 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/cantilever_oscillator [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXspm_cantilever_oscillator]): <HDF5 group "/entry/instrument/spm_cantilever/cantilever_oscillator" (7 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator
NXspm_cantilever.nxdl.xml:/cantilever_oscillator
NXspm_cantilever_oscillator.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator
NXspm_cantilever.nxdl.xml:/cantilever_oscillator
NXspm_cantilever_oscillator.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator):

                        When a cantilever is oscillated close to its resonance, this describes the oscillator properties.
                        
                        A cantilever can be used in direct contact mode to detect interaction forces or oscillated close to its
                        resonance frequency. Changes in the oscillation amplitude, phase (between oscillated tail and moving tip)
                        or resonance frequency are very sensitive to changes in the interaction potential field, giving rise of
                        various measurement modes, such as non-contact or intermittent-contact (tapping) modes.
                    
DEBUG: 
                        When a cantilever is oscillated close to its resonance, this describes the oscillator properties.
                        
                        A cantilever can be used in direct contact mode to detect interaction forces or oscillated close to its
                        resonance frequency. Changes in the oscillation amplitude, phase (between oscillated tail and moving tip)
                        or resonance frequency are very sensitive to changes in the interaction potential field, giving rise of
                        various measurement modes, such as non-contact or intermittent-contact (tapping) modes.
                    
documentation (NXspm_cantilever.nxdl.xml:/cantilever_oscillator):
DEBUG: documentation (NXspm_cantilever.nxdl.xml:/cantilever_oscillator):

            The oscillator of the cantilever.
        
DEBUG: 
            The oscillator of the cantilever.
        
documentation (NXspm_cantilever_oscillator.nxdl.xml:):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:):

        In generally speaking a cantilever resembles a leaf-spring which can be treated as a
        harmonic oscillator as a first approximation.
        
        Note: If any field data in this group comes in an array as input or output in the scan process they will
        be stored in NXdata in scan_control group.
    
DEBUG: 
        In generally speaking a cantilever resembles a leaf-spring which can be treated as a
        harmonic oscillator as a first approximation.
        
        Note: If any field data in this group comes in an array as input or output in the scan process they will
        be stored in NXdata in scan_control group.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator@NX_class)
value: NXspm_cantilever_oscillator
DEBUG: value: NXspm_cantilever_oscillator
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator
NXspm_cantilever.nxdl.xml:/cantilever_oscillator
NXspm_cantilever_oscillator.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator
NXspm_cantilever.nxdl.xml:/cantilever_oscillator
NXspm_cantilever_oscillator.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_bandwidth): <HDF5 dataset "frequency_bandwidth": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_bandwidth): <HDF5 dataset "frequency_bandwidth": shape (), type "<f8">
value: 38.147
DEBUG: value: 38.147
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth
DEBUG: classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth):

            The bandwidth of the resonance frequency.
        
DEBUG: 
            The bandwidth of the resonance frequency.
        
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_bandwidth@units)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_bandwidth@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth
DEBUG: classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth
NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth@units [NX_FREQUENCY]
DEBUG: NXspm_cantilever_oscillator.nxdl.xml:/frequency_bandwidth@units [NX_FREQUENCY]
===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_cutoff): <HDF5 dataset "frequency_cutoff": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_cutoff): <HDF5 dataset "frequency_cutoff": shape (), type "<i8">
value: 389
DEBUG: value: 389
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff
DEBUG: classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff):

            The cutoff frequency of the cantilever.
        
DEBUG: 
            The cutoff frequency of the cantilever.
        
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_cutoff@units)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_cutoff@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff
DEBUG: classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff
NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff@units [NX_FREQUENCY]
DEBUG: NXspm_cantilever_oscillator.nxdl.xml:/frequency_cutoff@units [NX_FREQUENCY]
===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_harmonic): <HDF5 dataset "frequency_harmonic": shape (), type "<i8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_harmonic): <HDF5 dataset "frequency_harmonic": shape (), type "<i8">
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_harmonic
DEBUG: classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_harmonic
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_harmonic):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_harmonic):

            The harmonic (e.g., second harmonic of the fundamental frequency) frequency of
            the cantilever.
        
DEBUG: 
            The harmonic (e.g., second harmonic of the fundamental frequency) frequency of
            the cantilever.
        
===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_shift): <HDF5 dataset "frequency_shift": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_shift): <HDF5 dataset "frequency_shift": shape (), type "<f8">
value: -3.48602
DEBUG: value: -3.48602
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift
DEBUG: classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift):

            Shift in the resonance frequency of the cantilever.
        
DEBUG: 
            Shift in the resonance frequency of the cantilever.
        
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_shift@units)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/frequency_shift@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift
DEBUG: classes:
NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift
NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift@units [NX_FREQUENCY]
DEBUG: NXspm_cantilever_oscillator.nxdl.xml:/frequency_shift@units [NX_FREQUENCY]
===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_amplitude): <HDF5 dataset "reference_amplitude": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_amplitude): <HDF5 dataset "reference_amplitude": shape (), type "<f8">
value: 1.00000000e-10
DEBUG: value: 1.00000000e-10
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude
NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude
NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude):

DEBUG: 
documentation (NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude):

            The reference amplitude (also called drive amplitude) of the cantilever.
            This is the amplitude of the cantilever oscillation when no external forces are acting on it.
            
            Note: At least one from reference_amplitude, reference_frequency, or reference_phase is expected.
        
DEBUG: 
            The reference amplitude (also called drive amplitude) of the cantilever.
            This is the amplitude of the cantilever oscillation when no external forces are acting on it.
            
            Note: At least one from reference_amplitude, reference_frequency, or reference_phase is expected.
        
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_amplitude@units)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_amplitude@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude
NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude
NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude@units [NX_LENGTH]
DEBUG: NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_amplitude@units [NX_LENGTH]
NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude@units [NX_LENGTH]
DEBUG: NXspm_cantilever_oscillator.nxdl.xml:/reference_amplitude@units [NX_LENGTH]
===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_frequency): <HDF5 dataset "reference_frequency": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_frequency): <HDF5 dataset "reference_frequency": shape (), type "<f8">
value: 22631.2
DEBUG: value: 22631.2
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency
NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency
NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency):

DEBUG: 
documentation (NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency):

            The reference frequency (also called drive frequency or resonance frequency) of
            the cantilever.
            
            Note: At least one from reference_amplitude, reference_frequency, or reference_phase is expected.
        
DEBUG: 
            The reference frequency (also called drive frequency or resonance frequency) of
            the cantilever.
            
            Note: At least one from reference_amplitude, reference_frequency, or reference_phase is expected.
        
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_frequency@units)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_frequency@units)
value: hertz
DEBUG: value: hertz
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency
NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency
NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency@units [NX_FREQUENCY]
DEBUG: NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_frequency@units [NX_FREQUENCY]
NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency@units [NX_FREQUENCY]
DEBUG: NXspm_cantilever_oscillator.nxdl.xml:/reference_frequency@units [NX_FREQUENCY]
===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_phase): <HDF5 dataset "reference_phase": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_phase): <HDF5 dataset "reference_phase": shape (), type "<f8">
value: 112.72
DEBUG: value: 112.72
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase
NXspm_cantilever_oscillator.nxdl.xml:/reference_phase
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase
NXspm_cantilever_oscillator.nxdl.xml:/reference_phase
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase):

DEBUG: 
documentation (NXspm_cantilever_oscillator.nxdl.xml:/reference_phase):
DEBUG: documentation (NXspm_cantilever_oscillator.nxdl.xml:/reference_phase):

            The reference phase of the cantilever oscillator.
                
            Note: At least one from reference_amplitude, reference_frequency, or reference_phase is expected.
        
DEBUG: 
            The reference phase of the cantilever oscillator.
                
            Note: At least one from reference_amplitude, reference_frequency, or reference_phase is expected.
        
===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_phase@units)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/cantilever_oscillator/reference_phase@units)
value: degree
DEBUG: value: degree
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXspm_cantilever_oscillator', 'NX_NUMBER']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase
NXspm_cantilever_oscillator.nxdl.xml:/reference_phase
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase
NXspm_cantilever_oscillator.nxdl.xml:/reference_phase
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase@units [NX_ANGLE]
DEBUG: NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/cantilever_oscillator/reference_phase@units [NX_ANGLE]
NXspm_cantilever_oscillator.nxdl.xml:/reference_phase@units [NX_ANGLE]
DEBUG: NXspm_cantilever_oscillator.nxdl.xml:/reference_phase@units [NX_ANGLE]
===== GROUP (//entry/instrument/spm_cantilever/phase_positioner [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner]): <HDF5 group "/entry/instrument/spm_cantilever/phase_positioner" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/phase_positioner [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner]): <HDF5 group "/entry/instrument/spm_cantilever/phase_positioner" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/phase_positioner
NXspm_cantilever.nxdl.xml:/phase_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/phase_positioner
NXspm_cantilever.nxdl.xml:/phase_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/phase_positioner):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/phase_positioner):

                        The phase positioner of the cantilever.
                    
DEBUG: 
                        The phase positioner of the cantilever.
                    
documentation (NXspm_cantilever.nxdl.xml:/phase_positioner):
DEBUG: documentation (NXspm_cantilever.nxdl.xml:/phase_positioner):

            The phase positioner of the cantilever.
        
DEBUG: 
            The phase positioner of the cantilever.
        
documentation (NXpositioner.nxdl.xml:):
DEBUG: documentation (NXpositioner.nxdl.xml:):

        A generic positioner such as a motor or piezo-electric transducer.  
    
DEBUG: 
        A generic positioner such as a motor or piezo-electric transducer.  
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/phase_positioner@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/phase_positioner@NX_class)
value: NXpositioner
DEBUG: value: NXpositioner
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner']
classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/phase_positioner
NXspm_cantilever.nxdl.xml:/phase_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/INSTRUMENT/SPM_CANTILEVER/phase_positioner
NXspm_cantilever.nxdl.xml:/phase_positioner
NXpositioner.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/spm_cantilever/phase_positioner/actuator [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator]): <HDF5 group "/entry/instrument/spm_cantilever/phase_positioner/actuator" (1 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/phase_positioner/actuator [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator]): <HDF5 group "/entry/instrument/spm_cantilever/phase_positioner/actuator" (1 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpositioner.nxdl.xml:/actuator):
DEBUG: documentation (NXpositioner.nxdl.xml:/actuator):

            The actuator of the positioner which is responsible for the movement of the
            probe.
        
DEBUG: 
            The actuator of the positioner which is responsible for the movement of the
            probe.
        
documentation (NXactuator.nxdl.xml:):
DEBUG: documentation (NXactuator.nxdl.xml:):

         An actuator used to control an external condition.
         
         The condition itself is described in :ref:`NXenvironment`.
    
DEBUG: 
         An actuator used to control an external condition.
         
         The condition itself is described in :ref:`NXenvironment`.
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/phase_positioner/actuator@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/phase_positioner/actuator@NX_class)
value: NXactuator
DEBUG: value: NXactuator
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator']
classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator
NXactuator.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator/NXpid_controller]): <HDF5 group "/entry/instrument/spm_cantilever/phase_positioner/actuator/feedback" (2 members)>
DEBUG: ===== GROUP (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback [NXafm::/NXentry/NXinstrument/NXspm_cantilever/NXpositioner/NXactuator/NXpid_controller]): <HDF5 group "/entry/instrument/spm_cantilever/phase_positioner/actuator/feedback" (2 members)>
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpositioner.nxdl.xml:/actuator/feedback):
DEBUG: documentation (NXpositioner.nxdl.xml:/actuator/feedback):

                The feedback of the actual position of the positioner.
            
DEBUG: 
                The feedback of the actual position of the positioner.
            
documentation (NXactuator.nxdl.xml:/PID_CONTROLLER):
DEBUG: documentation (NXactuator.nxdl.xml:/PID_CONTROLLER):

             If the actuator is PID-controlled, the settings of the PID controller can be
             stored here.
        
DEBUG: 
             If the actuator is PID-controlled, the settings of the PID controller can be
             stored here.
        
documentation (NXpid_controller.nxdl.xml:):
DEBUG: documentation (NXpid_controller.nxdl.xml:):

        A description of a feedback system in terms of the settings of a proportional-integral-derivative (PID) controller.
         
        Automated control of a physical quantity is often achieved by connecting the output of a sensor to an actuator
        (e.g. using a thermocouple to monitor the effect of a heater and influence the power provided to it). The physical
        quantity being operated on is typically referred to as the "Process Variable", with the desired value being the 
        "Setpoint" (which may vary as a function of time) and the "Error Value" is the time-varying function of the difference 
        between the Setpoint value and the concurrent measurement of the Process Variable  (Error Value = Setpoint - Process Variable).
         
        A PID controller calculates an output value for use as an input signal to an actuator via the weighted sum of four terms:
        * Proportional: the current Error Value
        * Integral: the integral of the Error Value function
        * Derivative: the first derivative of the Error Value function
        * Feed Forward: A model of the physical system (optional)
        
        The weightings of these terms are given by the corresponding constants:
        * K_p
        * K_i
        * K_d
        * K_ff
         
        A classic PID controller only implements the P, I and D terms and the values of the K_p, K_i and K_d constants are sufficient to fully
        describe the behaviour of the feedback system implemented by such a PID controller. The inclusion of a Feed Forward term in a feedback system
        is a modern adaptation that aids optimization of the automated control. It is not present in all PID controllers, but it is also not uncommon.
         
        Note that the ``NXpid_controller`` is designed to be a child object of the actuator that its output is connected to. The parent object
        representing the actuator is likely to be represented by an ``NXactuator`` or ``NXpositioner`` base class, but there is a wide variety
        of possible applications for PID controllers.
    
DEBUG: 
        A description of a feedback system in terms of the settings of a proportional-integral-derivative (PID) controller.
         
        Automated control of a physical quantity is often achieved by connecting the output of a sensor to an actuator
        (e.g. using a thermocouple to monitor the effect of a heater and influence the power provided to it). The physical
        quantity being operated on is typically referred to as the "Process Variable", with the desired value being the 
        "Setpoint" (which may vary as a function of time) and the "Error Value" is the time-varying function of the difference 
        between the Setpoint value and the concurrent measurement of the Process Variable  (Error Value = Setpoint - Process Variable).
         
        A PID controller calculates an output value for use as an input signal to an actuator via the weighted sum of four terms:
        * Proportional: the current Error Value
        * Integral: the integral of the Error Value function
        * Derivative: the first derivative of the Error Value function
        * Feed Forward: A model of the physical system (optional)
        
        The weightings of these terms are given by the corresponding constants:
        * K_p
        * K_i
        * K_d
        * K_ff
         
        A classic PID controller only implements the P, I and D terms and the values of the K_p, K_i and K_d constants are sufficient to fully
        describe the behaviour of the feedback system implemented by such a PID controller. The inclusion of a Feed Forward term in a feedback system
        is a modern adaptation that aids optimization of the automated control. It is not present in all PID controllers, but it is also not uncommon.
         
        Note that the ``NXpid_controller`` is designed to be a child object of the actuator that its output is connected to. The parent object
        representing the actuator is likely to be represented by an ``NXactuator`` or ``NXpositioner`` base class, but there is a wide variety
        of possible applications for PID controllers.
    
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback@NX_class)
DEBUG: ===== ATTRS (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback@NX_class)
value: NXpid_controller
DEBUG: value: NXpid_controller
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller']
classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXpositioner.nxdl.xml:/actuator/feedback
NXactuator.nxdl.xml:/PID_CONTROLLER
NXpid_controller.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback/K_i): <HDF5 dataset "K_i": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback/K_i): <HDF5 dataset "K_i": shape (), type "<f8">
value: 0.492123
DEBUG: value: 0.492123
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
classes:
NXpid_controller.nxdl.xml:/K_i
DEBUG: classes:
NXpid_controller.nxdl.xml:/K_i
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpid_controller.nxdl.xml:/K_i):
DEBUG: documentation (NXpid_controller.nxdl.xml:/K_i):

            Integral gain constant. This constant determines how strongly the output value
            should react to an accumulated offset in the Error Value that should have
            been corrected previously. since the integral term is proportional to both
            the magnitude and persistence of the Error Value over time.
        
DEBUG: 
            Integral gain constant. This constant determines how strongly the output value
            should react to an accumulated offset in the Error Value that should have
            been corrected previously. since the integral term is proportional to both
            the magnitude and persistence of the Error Value over time.
        
===== FIELD (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback/K_p): <HDF5 dataset "K_p": shape (), type "<f8">
DEBUG: ===== FIELD (//entry/instrument/spm_cantilever/phase_positioner/actuator/feedback/K_p): <HDF5 dataset "K_p": shape (), type "<f8">
value: 0.370741
DEBUG: value: 0.370741
classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXinstrument', 'NXspm_cantilever', 'NXpositioner', 'NXactuator', 'NXpid_controller', 'NX_NUMBER']
classes:
NXpid_controller.nxdl.xml:/K_p
DEBUG: classes:
NXpid_controller.nxdl.xml:/K_p
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXpid_controller.nxdl.xml:/K_p):
DEBUG: documentation (NXpid_controller.nxdl.xml:/K_p):

            Proportional gain constant. This constant determines how strongly the output value
            directly follows the current Error Value. When this constant dominates, the output
            value is linearly proportional to the Error Value.
        
DEBUG: 
            Proportional gain constant. This constant determines how strongly the output value
            directly follows the current Error Value. When this constant dominates, the output
            value is linearly proportional to the Error Value.
        
===== GROUP (//entry/sample [NXafm::/NXentry/NXsample]): <HDF5 group "/entry/sample" (3 members)>
DEBUG: ===== GROUP (//entry/sample [NXafm::/NXentry/NXsample]): <HDF5 group "/entry/sample" (3 members)>
classpath: ['NXentry', 'NXsample']
DEBUG: classpath: ['NXentry', 'NXsample']
classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE
NXentry.nxdl.xml:/SAMPLE
NXsample.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE
NXentry.nxdl.xml:/SAMPLE
NXsample.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXspm.nxdl.xml:/ENTRY/SAMPLE):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/SAMPLE):

                The sample information.
            
DEBUG: 
                The sample information.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE):

DEBUG: 
documentation (NXentry.nxdl.xml:/SAMPLE):
DEBUG: documentation (NXentry.nxdl.xml:/SAMPLE):

DEBUG: 
documentation (NXsample.nxdl.xml:):
DEBUG: documentation (NXsample.nxdl.xml:):

		Any information on the sample. 
		
		This could include scanned variables that
		are associated with one of the data dimensions, e.g. the magnetic field, or
		logged data, e.g. monitored temperature vs elapsed time.
	
DEBUG: 
		Any information on the sample. 
		
		This could include scanned variables that
		are associated with one of the data dimensions, e.g. the magnetic field, or
		logged data, e.g. monitored temperature vs elapsed time.
	
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/sample@NX_class)
DEBUG: ===== ATTRS (//entry/sample@NX_class)
value: NXsample
DEBUG: value: NXsample
classpath: ['NXentry', 'NXsample']
DEBUG: classpath: ['NXentry', 'NXsample']
classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE
NXentry.nxdl.xml:/SAMPLE
NXsample.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE
NXentry.nxdl.xml:/SAMPLE
NXsample.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/sample/history [NXafm::/NXentry/NXsample/NXhistory]): <HDF5 group "/entry/sample/history" (1 members)>
DEBUG: ===== GROUP (//entry/sample/history [NXafm::/NXentry/NXsample/NXhistory]): <HDF5 group "/entry/sample/history" (1 members)>
classpath: ['NXentry', 'NXsample', 'NXhistory']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXhistory']
classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE/history
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY
NXsample.nxdl.xml:/history
NXhistory.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE/history
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY
NXsample.nxdl.xml:/history
NXhistory.nxdl.xml:
NXobject.nxdl.xml:
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXspm.nxdl.xml:/ENTRY/SAMPLE/history):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/SAMPLE/history):

                    A set of physical processes that occurred to the sample prior/during experiment.
                
DEBUG: 
                    A set of physical processes that occurred to the sample prior/during experiment.
                
documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY):

DEBUG: 
documentation (NXsample.nxdl.xml:/history):
DEBUG: documentation (NXsample.nxdl.xml:/history):

        	A set of physical processes that occurred to the sample prior/during experiment.
		
DEBUG: 
        	A set of physical processes that occurred to the sample prior/during experiment.
		
documentation (NXhistory.nxdl.xml:):
DEBUG: documentation (NXhistory.nxdl.xml:):

        A set of activities that occurred to a physical entity prior/during experiment.
        
        Ideally, a full report of the previous operations (or links to a chain of operations).
        Alternatively, notes allow for additional descriptors in any format.
    
DEBUG: 
        A set of activities that occurred to a physical entity prior/during experiment.
        
        Ideally, a full report of the previous operations (or links to a chain of operations).
        Alternatively, notes allow for additional descriptors in any format.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/sample/history@NX_class)
DEBUG: ===== ATTRS (//entry/sample/history@NX_class)
value: NXhistory
DEBUG: value: NXhistory
classpath: ['NXentry', 'NXsample', 'NXhistory']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXhistory']
classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE/history
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY
NXsample.nxdl.xml:/history
NXhistory.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/SAMPLE/history
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/HISTORY
NXsample.nxdl.xml:/history
NXhistory.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== GROUP (//entry/sample/history/note [NXafm::/NXentry/NXsample/NXhistory/NXnote]): <HDF5 group "/entry/sample/history/note" (1 members)>
DEBUG: ===== GROUP (//entry/sample/history/note [NXafm::/NXentry/NXsample/NXhistory/NXnote]): <HDF5 group "/entry/sample/history/note" (1 members)>
classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote']
classes:
NXhistory.nxdl.xml:/NOTE
NXobject.nxdl.xml:/NOTE
NXnote.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXhistory.nxdl.xml:/NOTE
NXobject.nxdl.xml:/NOTE
NXnote.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXhistory.nxdl.xml:/NOTE):
DEBUG: documentation (NXhistory.nxdl.xml:/NOTE):

            A descriptor to keep track of the treatment of the physical entity before or during the
            experiment (NXnote allows to add pictures, audio, movies). Alternatively, a
            reference to the location or a unique identifier or other metadata file. In the
            case these are not available, free-text description.
            This should only be used in case that there is no rigorous description
            using the base classes above. This group can also be used to pull in any activities
            that are not well described by an existing base class definition.
            
            Any number of instances of NXnote are allowed for describing extra details of
            this activity.
        
DEBUG: 
            A descriptor to keep track of the treatment of the physical entity before or during the
            experiment (NXnote allows to add pictures, audio, movies). Alternatively, a
            reference to the location or a unique identifier or other metadata file. In the
            case these are not available, free-text description.
            This should only be used in case that there is no rigorous description
            using the base classes above. This group can also be used to pull in any activities
            that are not well described by an existing base class definition.
            
            Any number of instances of NXnote are allowed for describing extra details of
            this activity.
        
documentation (NXobject.nxdl.xml:/NOTE):
DEBUG: documentation (NXobject.nxdl.xml:/NOTE):

DEBUG: 
documentation (NXnote.nxdl.xml:):
DEBUG: documentation (NXnote.nxdl.xml:):

		Any additional freeform information not covered by the other base classes.
		
		This class can be used to store additional information in a 
		NeXus file e.g. pictures, movies, audio, additional text logs
	
DEBUG: 
		Any additional freeform information not covered by the other base classes.
		
		This class can be used to store additional information in a 
		NeXus file e.g. pictures, movies, audio, additional text logs
	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/sample/history/note@NX_class)
DEBUG: ===== ATTRS (//entry/sample/history/note@NX_class)
value: NXnote
DEBUG: value: NXnote
classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote']
classes:
NXhistory.nxdl.xml:/NOTE
NXobject.nxdl.xml:/NOTE
NXnote.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXhistory.nxdl.xml:/NOTE
NXobject.nxdl.xml:/NOTE
NXnote.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/sample/history/note/description): <HDF5 dataset "description": shape (), type "|O">
DEBUG: ===== FIELD (//entry/sample/history/note/description): <HDF5 dataset "description": shape (), type "|O">
value: Demo description: This sample is used in Palma's lab.
DEBUG: value: Demo description: This sample is used in Palma's lab.
classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXhistory', 'NXnote', 'NX_CHAR']
classes:
NXnote.nxdl.xml:/description
DEBUG: classes:
NXnote.nxdl.xml:/description
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXnote.nxdl.xml:/description):
DEBUG: documentation (NXnote.nxdl.xml:/description):
Title of an image or other details of the note
DEBUG: Title of an image or other details of the note
===== FIELD (//entry/sample/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG: ===== FIELD (//entry/sample/name): <HDF5 dataset "name": shape (), type "|O">
value: diPAMY
DEBUG: value: diPAMY
classpath: ['NXentry', 'NXsample', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXsample', 'NX_CHAR']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/name
NXsample.nxdl.xml:/name
NXcomponent.nxdl.xml:/name
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/name
NXsample.nxdl.xml:/name
NXcomponent.nxdl.xml:/name
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/name):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/SAMPLE/name):

DEBUG: 
documentation (NXsample.nxdl.xml:/name):
DEBUG: documentation (NXsample.nxdl.xml:/name):
Descriptive name of sample
DEBUG: Descriptive name of sample
documentation (NXcomponent.nxdl.xml:/name):
DEBUG: documentation (NXcomponent.nxdl.xml:/name):

            Name of the component.
        
DEBUG: 
            Name of the component.
        
===== GROUP (//entry/sample/sample_component_1 [NXafm::/NXentry/NXsample/NXsample_component]): <HDF5 group "/entry/sample/sample_component_1" (3 members)>
DEBUG: ===== GROUP (//entry/sample/sample_component_1 [NXafm::/NXentry/NXsample/NXsample_component]): <HDF5 group "/entry/sample/sample_component_1" (3 members)>
classpath: ['NXentry', 'NXsample', 'NXsample_component']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXsample_component']
classes:
NXsample.nxdl.xml:/SAMPLE_COMPONENT
NXsample_component.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXsample.nxdl.xml:/SAMPLE_COMPONENT
NXsample_component.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXsample.nxdl.xml:/SAMPLE_COMPONENT):
DEBUG: documentation (NXsample.nxdl.xml:/SAMPLE_COMPONENT):

			One group per sample component
			This is the preferred way of recording per component information over the n_comp arrays
		
DEBUG: 
			One group per sample component
			This is the preferred way of recording per component information over the n_comp arrays
		
documentation (NXsample_component.nxdl.xml:):
DEBUG: documentation (NXsample_component.nxdl.xml:):

		One group like this per component can be recorded for a sample consisting of multiple components.
	
DEBUG: 
		One group like this per component can be recorded for a sample consisting of multiple components.
	
documentation (NXcomponent.nxdl.xml:):
DEBUG: documentation (NXcomponent.nxdl.xml:):

         Base class for components of an instrument - real ones or simulated ones.
    
DEBUG: 
         Base class for components of an instrument - real ones or simulated ones.
    
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/sample/sample_component_1@NX_class)
DEBUG: ===== ATTRS (//entry/sample/sample_component_1@NX_class)
value: NXsample_component
DEBUG: value: NXsample_component
classpath: ['NXentry', 'NXsample', 'NXsample_component']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXsample_component']
classes:
NXsample.nxdl.xml:/SAMPLE_COMPONENT
NXsample_component.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXsample.nxdl.xml:/SAMPLE_COMPONENT
NXsample_component.nxdl.xml:
NXcomponent.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/sample/sample_component_1/chemical_formula): <HDF5 dataset "chemical_formula": shape (), type "|O">
DEBUG: ===== FIELD (//entry/sample/sample_component_1/chemical_formula): <HDF5 dataset "chemical_formula": shape (), type "|O">
value:  KAl₂(AlSi₃O₁₀)(OH)₂)
DEBUG: value:  KAl₂(AlSi₃O₁₀)(OH)₂)
classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
classes:
NXsample_component.nxdl.xml:/chemical_formula
DEBUG: classes:
NXsample_component.nxdl.xml:/chemical_formula
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXsample_component.nxdl.xml:/chemical_formula):
DEBUG: documentation (NXsample_component.nxdl.xml:/chemical_formula):

			The chemical formula specified using CIF conventions.
			Abbreviated version of CIF standard: 
			
			* Only recognized element symbols may be used.
			* Each element symbol is followed by a 'count' number. A count of '1' may be omitted.
			* A space or parenthesis must separate each cluster of (element symbol + count).
			* Where a group of elements is enclosed in parentheses, the multiplier for the 
			  group must follow the closing parentheses. That is, all element and group 
			  multipliers are assumed to be printed as subscripted numbers.
			* Unless the elements are ordered in a manner that corresponds to their chemical 
			  structure, the order of the elements within any group or moiety depends on 
			  whether or not carbon is present.
			* If carbon is present, the order should be: 
			
			  - C, then H, then the other elements in alphabetical order of their symbol. 
			  - If carbon is not present, the elements are listed purely in alphabetic order of their symbol. 
			  
			* This is the *Hill* system used by Chemical Abstracts.
		
DEBUG: 
			The chemical formula specified using CIF conventions.
			Abbreviated version of CIF standard: 
			
			* Only recognized element symbols may be used.
			* Each element symbol is followed by a 'count' number. A count of '1' may be omitted.
			* A space or parenthesis must separate each cluster of (element symbol + count).
			* Where a group of elements is enclosed in parentheses, the multiplier for the 
			  group must follow the closing parentheses. That is, all element and group 
			  multipliers are assumed to be printed as subscripted numbers.
			* Unless the elements are ordered in a manner that corresponds to their chemical 
			  structure, the order of the elements within any group or moiety depends on 
			  whether or not carbon is present.
			* If carbon is present, the order should be: 
			
			  - C, then H, then the other elements in alphabetical order of their symbol. 
			  - If carbon is not present, the elements are listed purely in alphabetic order of their symbol. 
			  
			* This is the *Hill* system used by Chemical Abstracts.
		
===== FIELD (//entry/sample/sample_component_1/description): <HDF5 dataset "description": shape (), type "|O">
DEBUG: ===== FIELD (//entry/sample/sample_component_1/description): <HDF5 dataset "description": shape (), type "|O">
value: <p>Gold on Mica.</p>
DEBUG: value: <p>Gold on Mica.</p>
classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
classes:
NXsample_component.nxdl.xml:/description
NXcomponent.nxdl.xml:/description
DEBUG: classes:
NXsample_component.nxdl.xml:/description
NXcomponent.nxdl.xml:/description
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXsample_component.nxdl.xml:/description):
DEBUG: documentation (NXsample_component.nxdl.xml:/description):

			Description of the sample component
		
DEBUG: 
			Description of the sample component
		
documentation (NXcomponent.nxdl.xml:/description):
DEBUG: documentation (NXcomponent.nxdl.xml:/description):

            Ideally, use instances of ``identifierNAME`` to point to a resource
            that provides further details.

            If such a resource does not exist or should not be used, use this free text,
            although it is not recommended.
        
DEBUG: 
            Ideally, use instances of ``identifierNAME`` to point to a resource
            that provides further details.

            If such a resource does not exist or should not be used, use this free text,
            although it is not recommended.
        
===== FIELD (//entry/sample/sample_component_1/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG: ===== FIELD (//entry/sample/sample_component_1/name): <HDF5 dataset "name": shape (), type "|O">
value: Au(Mica)
DEBUG: value: Au(Mica)
classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXsample', 'NXsample_component', 'NX_CHAR']
classes:
NXsample_component.nxdl.xml:/name
NXcomponent.nxdl.xml:/name
DEBUG: classes:
NXsample_component.nxdl.xml:/name
NXcomponent.nxdl.xml:/name
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXsample_component.nxdl.xml:/name):
DEBUG: documentation (NXsample_component.nxdl.xml:/name):
Descriptive name of sample component
DEBUG: Descriptive name of sample component
documentation (NXcomponent.nxdl.xml:/name):
DEBUG: documentation (NXcomponent.nxdl.xml:/name):

            Name of the component.
        
DEBUG: 
            Name of the component.
        
===== FIELD (//entry/scan_mode): <HDF5 dataset "scan_mode": shape (), type "|O">
DEBUG: ===== FIELD (//entry/scan_mode): <HDF5 dataset "scan_mode": shape (), type "|O">
value: tapping mode
DEBUG: value: tapping mode
classpath: ['NXentry', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NX_CHAR']
classes:
NXafm.nxdl.xml:/ENTRY/scan_mode
NXspm.nxdl.xml:/ENTRY/scan_mode
DEBUG: classes:
NXafm.nxdl.xml:/ENTRY/scan_mode
NXspm.nxdl.xml:/ENTRY/scan_mode
<<REQUIRED>>
DEBUG: <<REQUIRED>>
enumeration (NXafm.nxdl.xml:/ENTRY/scan_mode):
DEBUG: enumeration (NXafm.nxdl.xml:/ENTRY/scan_mode):
-> contact mode
DEBUG: -> contact mode
-> tapping mode
DEBUG: -> tapping mode
-> non-contact mode
DEBUG: -> non-contact mode
-> peak force tapping mode
DEBUG: -> peak force tapping mode
enumeration (NXspm.nxdl.xml:/ENTRY/scan_mode):
DEBUG: enumeration (NXspm.nxdl.xml:/ENTRY/scan_mode):
-> constant height
DEBUG: -> constant height
-> constant current
DEBUG: -> constant current
-> contact mode
DEBUG: -> contact mode
-> tapping mode
DEBUG: -> tapping mode
-> peak force tapping mode
DEBUG: -> peak force tapping mode
-> non-contact mode
DEBUG: -> non-contact mode
documentation (NXafm.nxdl.xml:/ENTRY/scan_mode):
DEBUG: documentation (NXafm.nxdl.xml:/ENTRY/scan_mode):

                The mode of the scan.
                
                contact mode: Cantilever attempts to move on the sample surface in very close contact with the sample.
                 The cantilever deflection is usually employed to control the cantilever position using a PID feedback loop.
                non-contact mode: Cantilever attempts to oscillate above the sample surface. Cantilever attempts to stay in the
                 interaction (atomic force) zone therefore cantilever oscillator amplitude and frequency are deformed.
                 The cantilever frequency or oscillation amplitude is usually employed to control the cantilever position using a PID feedback loop.
                tapping mode: Resembles to the non-contact mode, but at every point of scan the cantilever tip comes closer
                 to the sample surface ("taps it").
                 The cantilever oscillation amplitude is usually employed to control the cantilever position using a PID feedback loop.
                peak force tapping mode: Like the tapping mode, but at each point of the scan force-distance curve is recorded.
                 The maximum force is usually employed to control the cantilever position using a PID feedback loop.
            
DEBUG: 
                The mode of the scan.
                
                contact mode: Cantilever attempts to move on the sample surface in very close contact with the sample.
                 The cantilever deflection is usually employed to control the cantilever position using a PID feedback loop.
                non-contact mode: Cantilever attempts to oscillate above the sample surface. Cantilever attempts to stay in the
                 interaction (atomic force) zone therefore cantilever oscillator amplitude and frequency are deformed.
                 The cantilever frequency or oscillation amplitude is usually employed to control the cantilever position using a PID feedback loop.
                tapping mode: Resembles to the non-contact mode, but at every point of scan the cantilever tip comes closer
                 to the sample surface ("taps it").
                 The cantilever oscillation amplitude is usually employed to control the cantilever position using a PID feedback loop.
                peak force tapping mode: Like the tapping mode, but at each point of the scan force-distance curve is recorded.
                 The maximum force is usually employed to control the cantilever position using a PID feedback loop.
            
documentation (NXspm.nxdl.xml:/ENTRY/scan_mode):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/scan_mode):

                The mode of the scan. The possible options depend on the type of experiment.
                For example, in STM, the scan mode could be constant height or constant current,
                in AFM, the scan mode could be contact mode, tapping mode or non-contact mode.
                
                For general purpose usage, all scan modes from its sub-techniques are listed.
            
DEBUG: 
                The mode of the scan. The possible options depend on the type of experiment.
                For example, in STM, the scan mode could be constant height or constant current,
                in AFM, the scan mode could be contact mode, tapping mode or non-contact mode.
                
                For general purpose usage, all scan modes from its sub-techniques are listed.
            
===== FIELD (//entry/start_time): <HDF5 dataset "start_time": shape (), type "|O">
DEBUG: ===== FIELD (//entry/start_time): <HDF5 dataset "start_time": shape (), type "|O">
value: 2015-12-16T11:39:44+01:00
DEBUG: value: 2015-12-16T11:39:44+01:00
classpath: ['NXentry', 'NX_DATE_TIME']
DEBUG: classpath: ['NXentry', 'NX_DATE_TIME']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/start_time
NXentry.nxdl.xml:/start_time
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/start_time
NXentry.nxdl.xml:/start_time
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/start_time):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/start_time):

                The start time of the experiment.
            
DEBUG: 
                The start time of the experiment.
            
documentation (NXentry.nxdl.xml:/start_time):
DEBUG: documentation (NXentry.nxdl.xml:/start_time):
Starting time of measurement
DEBUG: Starting time of measurement
===== GROUP (//entry/user [NXafm::/NXentry/NXuser]): <HDF5 group "/entry/user" (3 members)>
DEBUG: ===== GROUP (//entry/user [NXafm::/NXentry/NXuser]): <HDF5 group "/entry/user" (3 members)>
classpath: ['NXentry', 'NXuser']
DEBUG: classpath: ['NXentry', 'NXuser']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER
NXentry.nxdl.xml:/USER
NXuser.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER
NXentry.nxdl.xml:/USER
NXuser.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER):

                Contact information of at least the user of the instrument or the
                investigator who performed this experiment. Adding multiple users if
                relevant is recommended.
            
DEBUG: 
                Contact information of at least the user of the instrument or the
                investigator who performed this experiment. Adding multiple users if
                relevant is recommended.
            
documentation (NXentry.nxdl.xml:/USER):
DEBUG: documentation (NXentry.nxdl.xml:/USER):

DEBUG: 
documentation (NXuser.nxdl.xml:):
DEBUG: documentation (NXuser.nxdl.xml:):

		Contact information for a user.  
		
		The format allows more 
		than one user with the same affiliation and contact information, 
		but a second :ref:`NXuser` group should be used if they have different 
		affiliations, etc.
	
DEBUG: 
		Contact information for a user.  
		
		The format allows more 
		than one user with the same affiliation and contact information, 
		but a second :ref:`NXuser` group should be used if they have different 
		affiliations, etc.
	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/user@NX_class)
DEBUG: ===== ATTRS (//entry/user@NX_class)
value: NXuser
DEBUG: value: NXuser
classpath: ['NXentry', 'NXuser']
DEBUG: classpath: ['NXentry', 'NXuser']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER
NXentry.nxdl.xml:/USER
NXuser.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER
NXentry.nxdl.xml:/USER
NXuser.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== FIELD (//entry/user/affiliation): <HDF5 dataset "affiliation": shape (2,), type "|O">
DEBUG: ===== FIELD (//entry/user/affiliation): <HDF5 dataset "affiliation": shape (2,), type "|O">
value: [Dr. Cojal González, José David (HU), Prof. Carlos-Andres Palma (HU)]
DEBUG: value: [Dr. Cojal González, José David (HU), Prof. Carlos-Andres Palma (HU)]
classpath: ['NXentry', 'NXuser', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXuser', 'NX_CHAR']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/affiliation
NXuser.nxdl.xml:/affiliation
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/affiliation
NXuser.nxdl.xml:/affiliation
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/affiliation):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/affiliation):

                    Name of the affiliation of the user at the point in time when
                    the experiment was performed.
                
DEBUG: 
                    Name of the affiliation of the user at the point in time when
                    the experiment was performed.
                
documentation (NXuser.nxdl.xml:/affiliation):
DEBUG: documentation (NXuser.nxdl.xml:/affiliation):
Affiliation of user
DEBUG: Affiliation of user
===== FIELD (//entry/user/email): <HDF5 dataset "email": shape (3,), type "|O">
DEBUG: ===== FIELD (//entry/user/email): <HDF5 dataset "email": shape (3,), type "|O">
value: [cojal@physik.hu-berlin.de, palma@physik.hu-berlin.de, mozumder@physik.hu-berlin.de]
DEBUG: value: [cojal@physik.hu-berlin.de, palma@physik.hu-berlin.de, mozumder@physik.hu-berlin.de]
classpath: ['NXentry', 'NXuser', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXuser', 'NX_CHAR']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/email
NXuser.nxdl.xml:/email
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/email
NXuser.nxdl.xml:/email
<<RECOMMENDED>>
DEBUG: <<RECOMMENDED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/email):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/email):

                    Email address of the user.
                
DEBUG: 
                    Email address of the user.
                
documentation (NXuser.nxdl.xml:/email):
DEBUG: documentation (NXuser.nxdl.xml:/email):
Email of user
DEBUG: Email of user
===== FIELD (//entry/user/name): <HDF5 dataset "name": shape (), type "|O">
DEBUG: ===== FIELD (//entry/user/name): <HDF5 dataset "name": shape (), type "|O">
value: Rubel Mozumder
DEBUG: value: Rubel Mozumder
classpath: ['NXentry', 'NXuser', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXuser', 'NX_CHAR']
classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/name
NXuser.nxdl.xml:/name
DEBUG: classes:
NXsensor_scan.nxdl.xml:/ENTRY/USER/name
NXuser.nxdl.xml:/name
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/name):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/USER/name):

                    Name of the user.
                
DEBUG: 
                    Name of the user.
                
documentation (NXuser.nxdl.xml:/name):
DEBUG: documentation (NXuser.nxdl.xml:/name):
Name of user responsible for this entry
DEBUG: Name of user responsible for this entry
===== GROUP (//entry/z_backward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/z_backward" (4 members)>
DEBUG: ===== GROUP (//entry/z_backward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/z_backward" (4 members)>
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA):

                The data group.
            
DEBUG: 
                The data group.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):

                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG: 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
documentation (NXentry.nxdl.xml:/DATA):
DEBUG: documentation (NXentry.nxdl.xml:/DATA):

			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG: 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/z_backward@NX_class)
DEBUG: ===== ATTRS (//entry/z_backward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/z_backward@axes)
DEBUG: ===== ATTRS (//entry/z_backward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/z_backward@signal)
DEBUG: ===== ATTRS (//entry/z_backward@signal)
value: z
DEBUG: value: z
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/z_backward@x_indices)
DEBUG: ===== ATTRS (//entry/z_backward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/z_backward@y_indices)
DEBUG: ===== ATTRS (//entry/z_backward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/z_backward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/z_backward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/z_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/z_backward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/z_backward/x@units)
DEBUG: ===== ATTRS (//entry/z_backward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/z_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/z_backward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/z_backward/y@units)
DEBUG: ===== ATTRS (//entry/z_backward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/z_backward/z): <HDF5 dataset "z": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/z_backward/z): <HDF5 dataset "z": shape (128, 128), type ">f4">
value: [-0.00000002, -0.00000002, -0.00000002, ..., -0.00000002, -0.00000002, -0.00000002]
DEBUG: value: [-0.00000002, -0.00000002, -0.00000002, ..., -0.00000002, -0.00000002, -0.00000002]
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):

                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG: 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/z_backward/z@long_name)
DEBUG: ===== ATTRS (//entry/z_backward/z@long_name)
value: z (meter)
DEBUG: value: z (meter)
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/z_backward/z@units)
DEBUG: ===== ATTRS (//entry/z_backward/z@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
===== GROUP (//entry/z_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/z_forward" (4 members)>
DEBUG: ===== GROUP (//entry/z_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/z_forward" (4 members)>
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
<<REQUIRED>>
DEBUG: <<REQUIRED>>
documentation (NXspm.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA):

                The data group.
            
DEBUG: 
                The data group.
            
documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):
DEBUG: documentation (NXsensor_scan.nxdl.xml:/ENTRY/DATA):

                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
DEBUG: 
                A scan specific representation of the measured signals as a function of the independently controlled environment settings.
                Plot of every measured signal as a function of the timestamp of when they have been acquired is also possible.
            
documentation (NXentry.nxdl.xml:/DATA):
DEBUG: documentation (NXentry.nxdl.xml:/DATA):

			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
DEBUG: 
			The data group

			.. note:: Before the NIAC2016 meeting [#]_, at least one
			   :ref:`NXdata` group was required in each :ref:`NXentry` group.
			   At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
			   an optional group in :ref:`NXentry` groups for data files that
			   do not use an application definition.
			   It is recommended strongly that all NeXus data files provide
			   a NXdata group.
			   It is permissible to omit the NXdata group only when
			   defining the default plot is not practical or possible
			   from the available data.

			   For example, neutron event data may not have anything that
			   makes a useful plot without extensive processing.

			   Certain application definitions override this decision and
			   require an :ref:`NXdata` group
			   in the :ref:`NXentry` group.  The ``minOccurs=0`` attribute
			   in the application definition will indicate the
			   :ref:`NXdata` group
			   is optional, otherwise, it is required.

			   .. [#] NIAC2016:
			      https://www.nexusformat.org/NIAC2016.html,
			      https://github.com/nexusformat/NIAC/issues/16

		
documentation (NXobject.nxdl.xml:/DATA):
DEBUG: documentation (NXobject.nxdl.xml:/DATA):

DEBUG: 
documentation (NXdata.nxdl.xml:):
DEBUG: documentation (NXdata.nxdl.xml:):

		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
DEBUG: 
		The :ref:`NXdata` class is designed to encapsulate all the information required for a set of data to be plotted.
		NXdata groups contain plottable data (also referred to as *signals* or *dependent variables*) and their
		associated axis coordinates (also referred to as *axes* or *independent variables*).

		The actual names of the :ref:`DATA </NXdata/DATA-field>` and :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
		can be chosen :ref:`freely <validItemName>`, as indicated by the upper case (this is a common convention in all NeXus classes).
		
		.. note:: ``NXdata`` provides data and coordinates to be plotted but
			does not describe how the data is to be plotted or even the dimensionality of the plot.
			https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute

		.. include:: data/index.rst
		   :start-line: 1

		.. admonition:: Example of a simple curve plot

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x"]
				  data: float[100]
				  x: float[100]

		More complex cases are supported

		* histogram data: ``x`` has one more value than ``data``.
		* alternative axes: instead of a single ``x`` axis you can have several axes, one of which being the default.
		* signals with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` along each dimension.
		* axes with more than one dimension: ``data`` could be 2D with axes ``x`` and ``y`` also being 2D, providing a
		  unique ``(x, y)`` coordinate for each ``data`` point.

		**Signals:**

		.. index:: plotting

		.. admonition:: Defined by

			* :ref:`DATA </NXdata/DATA-field>` fields
			* the :ref:`signal </NXdata@signal-attribute>` attribute
			* the :ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute

		The :ref:`DATA </NXdata/DATA-field>` fields contain the signal values to be plotted. The name of the field
		to be used as the *default plot signal* is provided by the :ref:`signal </NXdata@signal-attribute>` attribute.
		The names of the fields to be used as *secondary plot signals* are provided by the
		:ref:`auxiliary_signals</NXdata@auxiliary_signals-attribute>` attribute.

		.. admonition:: An example with three signals, one of which being the default

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  data1: float[10,20,30]  # the default signal
				  data2: float[10,20,30]
				  data3: float[10,20,30]

		**Axes:**

		.. index:: axes (attribute)
		.. index:: coordinates

		.. admonition:: Defined by

			* :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			* the :ref:`axes </NXdata@axes-attribute>` attribute
			* :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes

		The fields and attributes are defined as follows

		1. The :ref:`AXISNAME </NXdata/AXISNAME-field>` fields contain the axis coordinates associated with the signal values.

		2. The :ref:`axes </NXdata@axes-attribute>` attribute provides the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   fields to be used as the `default axis` for each dimension of the :ref:`DATA </NXdata/DATA-field>` fields.

		3. The :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` attributes describe the :ref:`DATA </NXdata/DATA-field>`
		   dimensions spanned by the corresponding :ref:`AXISNAME </NXdata/AXISNAME-field>` fields.

		The fields and attributes have the following constraints

		1. The length of the :ref:`axes </NXdata@axes-attribute>` attribute must be equal to the rank of the :ref:`DATA </NXdata/DATA-field>`
		   fields. When a particular dimension has no default axis, the string “.” is used in that position.

		2. The number of values in :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` must be equal to the rank of the corresponding
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		3. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is missing for a given
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field, the positions of the :ref:`AXISNAME </NXdata/AXISNAME-field>`
		   field name in the :ref:`axes </NXdata@axes-attribute>` attribute are used.

		4. When :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>` is the same as the indices of "AXISNAME" in the
		   :ref:`axes </NXdata@axes-attribute>` attribute, there is no need to provide
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		5. The indices of "AXISNAME" in the :ref:`axes </NXdata@axes-attribute>` attribute must be a subset of
		   :ref:`AXISNAME_indices </NXdata@AXISNAME_indices-attribute>`.

		6. The shape of an :ref:`AXISNAME </NXdata/AXISNAME-field>` field must correspond to the shape of the
		   :ref:`DATA </NXdata/DATA-field>` dimensions it spans. This means that for each dimension ``i`` in ``[0, AXISNAME.ndim)``
		   spanned by axis field :ref:`AXISNAME </NXdata/AXISNAME-field>`, the number of axis values ``AXISNAME.shape[i]``
		   along dimension ``i`` must be equal to the number of data points ``DATA.shape[AXISNAME_indices[i]]`` along dimension ``i``
		   or one more than the number of data points ``DATA.shape[AXISNAME_indices[i]]+1`` in case the
		   :ref:`AXISNAME </NXdata/AXISNAME-field>` field contains histogram bin edges along dimension ``i``.

		Highlight consequences of these constraints

		1. An :ref:`AXISNAME </NXdata/AXISNAME-field>` field can have more than one dimension and can therefore span
		   more than one :ref:`DATA </NXdata/DATA-field>` dimension. Conversely, one :ref:`DATA </NXdata/DATA-field>` dimension
		   can be spanned by more than one :ref:`AXISNAME </NXdata/AXISNAME-field>` field. The default axis name (if any)
		   of each dimension can be found in the :ref:`axes </NXdata@axes-attribute>` attribute.

		2. A list of all available axes is not provided directly. All strings in the :ref:`axes </NXdata@axes-attribute>` attribute
		   (excluding the “.” string) are axis field names. In addition the prefix of an attribute ending with the string "_indices" is also
		   an axis field name.

		.. admonition:: The following example covers all axes features supported (see :ref:`sphx_glr_classes_base_classes_data_plot_fscan2d.py`)

			.. code-block::

				data:NXdata
				  @signal = "data"
				  @axes = ["x_set", "y_set", "."]  # default axes for all three dimensions
				  @x_encoder_indices = [0, 1]
				  @y_encoder_indices = 1           # or [1]
				  data: float[10,7,1024]
				  x_encoder: float[11,7]           # coordinates along the first and second dimensions
				  y_encoder: float[7]              # coordinates along the second dimension
				  x_set: float[10]                 # default coordinates along the first dimension
				  y_set: float[7]                  # default coordinates along the second dimension

		**Uncertainties:**

		.. admonition:: Defined by

			* :ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields

		Standard deviations on data values as well as coordinates can be provided by
		:ref:`FIELDNAME_errors </NXdata/FIELDNAME_errors-field>` fields where ``FIELDNAME`` is the name of a
		:ref:`DATA </NXdata/DATA-field>` field or an :ref:`AXISNAME </NXdata/AXISNAME-field>` field.

		.. admonition:: An example of uncertainties on the signal, auxiliary signals and axis coordinates

			.. code-block::

				data:NXdata
				  @signal = "data1"
				  @auxiliary_signals = ["data2", "data3"]
				  @axes = ["x", ".", "z"]
				  data1: float[10,20,30]
				  data2: float[10,20,30]
				  data3: float[10,20,30]
				  x: float[10]
				  z: float[30]
				  data1_errors: float[10,20,30]
				  data2_errors: float[10,20,30]
				  data3_errors: float[10,20,30]
				  x_errors: float[10]
				  z_errors: float[30]

	
documentation (NXobject.nxdl.xml:):
DEBUG: documentation (NXobject.nxdl.xml:):

        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
DEBUG: 
        This is the base object of NeXus. The groups and fields contained 
        within this file are allowed to be present in any derived base class.

        If nameType="partial", the placeholders (e.g., FIELDNAME or GROUPNAME)
        can be replaced by the name of any object (field or group, 
        respectively) that exists within the same group.
	
===== ATTRS (//entry/z_forward@NX_class)
DEBUG: ===== ATTRS (//entry/z_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@NX_class [NX_CHAR]
DEBUG: @NX_class [NX_CHAR]

DEBUG: 
===== ATTRS (//entry/z_forward@axes)
DEBUG: ===== ATTRS (//entry/z_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@axes - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@axes - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/axes):
DEBUG: documentation (NXdata.nxdl.xml:/axes):

			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
DEBUG: 
			.. index:: plotting

			The ``axes`` attribute is a list of strings which are the names of the :ref:`AXISNAME </NXdata/AXISNAME-field>` fields
			to be used as the default axis along every :ref:`DATA </NXdata/DATA-field>` dimension. As a result the length must
			be equal to the rank of the :ref:`DATA </NXdata/DATA-field>` fields. The string "." can be used for
			dimensions without a default axis.

			.. note::  When ``axes`` contains multiple strings, it must be saved as an actual array
				of strings and not a single comma separated string.
		
===== ATTRS (//entry/z_forward@signal)
DEBUG: ===== ATTRS (//entry/z_forward@signal)
value: z
DEBUG: value: z
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
NXdata.nxdl.xml:@signal - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:@signal - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/signal):
DEBUG: documentation (NXdata.nxdl.xml:/signal):

			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
DEBUG: 
			.. index:: find the default plottable data
			.. index:: plotting
			.. index:: signal attribute value
			
			The value is the :ref:`name <validItemName>` of the signal that contains
			the default plottable data. This field or link *must* exist and be a direct child
			of this NXdata group.
			
			It is recommended (as of NIAC2014) to use this attribute
			rather than adding a signal attribute to the field.
			See https://www.nexusformat.org/2014_How_to_find_default_data.html
			for a summary of the discussion.
		
===== ATTRS (//entry/z_forward@x_indices)
DEBUG: ===== ATTRS (//entry/z_forward@x_indices)
value: 0
DEBUG: value: 0
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@x_indices - IS NOT IN SCHEMA
DEBUG: @x_indices - IS NOT IN SCHEMA

DEBUG: 
===== ATTRS (//entry/z_forward@y_indices)
DEBUG: ===== ATTRS (//entry/z_forward@y_indices)
value: 1
DEBUG: value: 1
classpath: ['NXentry', 'NXdata']
DEBUG: classpath: ['NXentry', 'NXdata']
classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA
NXsensor_scan.nxdl.xml:/ENTRY/DATA
NXentry.nxdl.xml:/DATA
NXobject.nxdl.xml:/DATA
NXdata.nxdl.xml:
NXobject.nxdl.xml:
@y_indices - IS NOT IN SCHEMA
DEBUG: @y_indices - IS NOT IN SCHEMA

DEBUG: 
===== FIELD (//entry/z_forward/title): <HDF5 dataset "title": shape (), type "|O">
DEBUG: ===== FIELD (//entry/z_forward/title): <HDF5 dataset "title": shape (), type "|O">
value: Title Data Group 0
DEBUG: value: Title Data Group 0
classpath: ['NXentry', 'NXdata', 'NX_CHAR']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR']
classes:
NXdata.nxdl.xml:/title
DEBUG: classes:
NXdata.nxdl.xml:/title
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
documentation (NXdata.nxdl.xml:/title):
DEBUG: documentation (NXdata.nxdl.xml:/title):

			Title for the plot.
		
DEBUG: 
			Title for the plot.
		
===== FIELD (//entry/z_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/z_forward/x): <HDF5 dataset "x": shape (128,), type "<f8">
value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
DEBUG: value: [-0.00000033, -0.00000033, -0.00000033, ..., -0.00000033, -0.00000033, -0.00000033]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/z_forward/x@units)
DEBUG: ===== ATTRS (//entry/z_forward/x@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #1
DEBUG: Dataset referenced as NXdata AXIS #1
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/z_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
DEBUG: ===== FIELD (//entry/z_forward/y): <HDF5 dataset "y": shape (128,), type "<f8">
value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
DEBUG: value: [-0.00000031, -0.00000031, -0.00000031, ..., -0.00000031, -0.00000031, -0.00000031]
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME):

                    The name of the axis that corresponds to the data field.
                
DEBUG: 
                    The name of the axis that corresponds to the data field.
                
documentation (NXdata.nxdl.xml:/AXISNAME):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME):

			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
DEBUG: 
			Coordinate values along one or more :ref:`DATA </NXdata/DATA-field>` dimensions.

			The shape of an ``AXISNAME`` field must correspond to the shape of the :ref:`DATA </NXdata/DATA-field>`
			dimensions it spans. This means that for each ``i`` in ``[0, AXISNAME.ndim)`` the number of data points
			``DATA.shape[AXISNAME_indices[i]]`` must be equal to the number of coordinates ``AXISNAME.shape[i]`` or the
			number of bin edges ``AXISNAME.shape[i]+1`` in case of histogram data.

			As the upper case ``AXISNAME`` indicates, the names of the ``AXISNAME`` fields can be chosen :ref:`freely <validItemName>`.

			Most ``AXISNAME`` fields will be sequences of numbers but if an axis is better represented using names, such as channel names,
			an array of NX_CHAR can be provided.
		
===== ATTRS (//entry/z_forward/y@units)
DEBUG: ===== ATTRS (//entry/z_forward/y@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_CHAR_OR_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME
NXdata.nxdl.xml:/AXISNAME
NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/AXISNAME@units [NX_ANY]
NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/AXISNAME@units - [NX_CHAR]
Dataset referenced as NXdata AXIS #0
DEBUG: Dataset referenced as NXdata AXIS #0
documentation (NXdata.nxdl.xml:/AXISNAME/units):
DEBUG: documentation (NXdata.nxdl.xml:/AXISNAME/units):

				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
DEBUG: 
				Unit in which the coordinate values are expressed.
				See the section :ref:`Design-Units` for more information.
			
===== FIELD (//entry/z_forward/z): <HDF5 dataset "z": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/z_forward/z): <HDF5 dataset "z": shape (128, 128), type ">f4">
value: [-0.00000002, -0.00000002, -0.00000002, ..., -0.00000002, -0.00000002, -0.00000002]
DEBUG: value: [-0.00000002, -0.00000002, -0.00000002, ..., -0.00000002, -0.00000002, -0.00000002]
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
<<REQUIRED>>
DEBUG: <<REQUIRED>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):
DEBUG: documentation (NXspm.nxdl.xml:/ENTRY/DATA/DATA):

                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
DEBUG: 
                    The data (e.g. current, voltage, temperature) field that can be plotted against
                    the axes.
                
documentation (NXdata.nxdl.xml:/DATA):
DEBUG: documentation (NXdata.nxdl.xml:/DATA):

			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
DEBUG: 
			.. index:: plotting

			Data values to be used as the NeXus *plottable data*. As the upper case ``DATA``
			indicates, the names of the ``DATA`` fields can be chosen :ref:`freely <validItemName>`. The :ref:`signal attribute </NXdata@signal-attribute>`
			and :ref:`auxiliary_signals attribute</NXdata@auxiliary_signals-attribute>` can be used to find all datasets in the ``NXdata``
			that contain data values.

			The maximum rank is ``32`` for compatibility with backend file formats.
		
===== ATTRS (//entry/z_forward/z@long_name)
DEBUG: ===== ATTRS (//entry/z_forward/z@long_name)
value: z (meter)
DEBUG: value: z (meter)
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
DEBUG: NXdata.nxdl.xml:/DATA@long_name - [NX_CHAR]
<<OPTIONAL>>
DEBUG: <<OPTIONAL>>
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
documentation (NXdata.nxdl.xml:/DATA/long_name):
DEBUG: documentation (NXdata.nxdl.xml:/DATA/long_name):
data label
DEBUG: data label
===== ATTRS (//entry/z_forward/z@units)
DEBUG: ===== ATTRS (//entry/z_forward/z@units)
value: meter
DEBUG: value: meter
classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
DEBUG: classpath: ['NXentry', 'NXdata', 'NX_NUMBER']
classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
DEBUG: classes:
NXspm.nxdl.xml:/ENTRY/DATA/DATA
NXdata.nxdl.xml:/DATA
NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
DEBUG: NXspm.nxdl.xml:/ENTRY/DATA/DATA@units [NX_ANY]
NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
DEBUG: NXdata.nxdl.xml:/DATA@units - REQUIRED, but undefined unit category
========================
DEBUG: ========================
=== Default Plotable ===
DEBUG: === Default Plotable ===
========================
DEBUG: ========================

DEBUG: 
NXentry has been identified: /entry
DEBUG: NXentry has been identified: /entry

DEBUG: 
NXdata group has been identified: /entry/current_forward
DEBUG: NXdata group has been identified: /entry/current_forward
===== GROUP (//entry/current_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/current_forward" (4 members)>
DEBUG: ===== GROUP (//entry/current_forward [NXafm::/NXentry/NXdata]): <HDF5 group "/entry/current_forward" (4 members)>
===== ATTRS (//entry/current_forward@NX_class)
DEBUG: ===== ATTRS (//entry/current_forward@NX_class)
value: NXdata
DEBUG: value: NXdata
===== ATTRS (//entry/current_forward@axes)
DEBUG: ===== ATTRS (//entry/current_forward@axes)
value: [y, x]
DEBUG: value: [y, x]
===== ATTRS (//entry/current_forward@signal)
DEBUG: ===== ATTRS (//entry/current_forward@signal)
value: current
DEBUG: value: current
===== ATTRS (//entry/current_forward@x_indices)
DEBUG: ===== ATTRS (//entry/current_forward@x_indices)
value: 0
DEBUG: value: 0
===== ATTRS (//entry/current_forward@y_indices)
DEBUG: ===== ATTRS (//entry/current_forward@y_indices)
value: 1
DEBUG: value: 1

DEBUG: 
Signal has been identified: /entry/current_forward/current
DEBUG: Signal has been identified: /entry/current_forward/current
===== FIELD (//entry/current_forward/current): <HDF5 dataset "current": shape (128, 128), type ">f4">
DEBUG: ===== FIELD (//entry/current_forward/current): <HDF5 dataset "current": shape (128, 128), type ">f4">
value: [-1.73500486e-14, -1.45325053e-14, -1.88572319e-14, ..., -9.70792592e-15, -8.53756187e-15, -8.61566254e-15]
DEBUG: value: [-1.73500486e-14, -1.45325053e-14, -1.88572319e-14, ..., -9.70792592e-15, -8.53756187e-15, -8.61566254e-15]
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
===== ATTRS (//entry/current_forward/current@long_name)
DEBUG: ===== ATTRS (//entry/current_forward/current@long_name)
value: current (ampere)
DEBUG: value: current (ampere)
Dataset referenced as NXdata SIGNAL
DEBUG: Dataset referenced as NXdata SIGNAL
===== ATTRS (//entry/current_forward/current@units)
DEBUG: ===== ATTRS (//entry/current_forward/current@units)
value: ampere
DEBUG: value: ampere

DEBUG: 
For Axis #0, 2 axes have been identified: [<HDF5 dataset "y": shape (128,), type "<f8">, <HDF5 dataset "x": shape (128,), type "<f8">]
DEBUG: For Axis #0, 2 axes have been identified: [<HDF5 dataset "y": shape (128,), type "<f8">, <HDF5 dataset "x": shape (128,), type "<f8">]

DEBUG: 
For Axis #1, 2 axes have been identified: [<HDF5 dataset "x": shape (128,), type "<f8">, <HDF5 dataset "y": shape (128,), type "<f8">]
DEBUG: For Axis #1, 2 axes have been identified: [<HDF5 dataset "x": shape (128,), type "<f8">, <HDF5 dataset "y": shape (128,), type "<f8">]
